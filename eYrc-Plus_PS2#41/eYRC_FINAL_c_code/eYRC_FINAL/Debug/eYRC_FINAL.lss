
eYRC_FINAL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  000022f8  0000238c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010c  00800204  00800204  00002390  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002390  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000023c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  00002400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022cd  00000000  00000000  00002610  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000437  00000000  00000000  000048dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b2a  00000000  00000000  00004d14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000062c  00000000  00000000  00006840  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000069d  00000000  00000000  00006e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ffd  00000000  00000000  00007509  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  00009506  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	90 c0       	rjmp	.+288    	; 0x126 <__bad_interrupt>
       6:	00 00       	nop
       8:	8e c0       	rjmp	.+284    	; 0x126 <__bad_interrupt>
       a:	00 00       	nop
       c:	8c c0       	rjmp	.+280    	; 0x126 <__bad_interrupt>
       e:	00 00       	nop
      10:	8a c0       	rjmp	.+276    	; 0x126 <__bad_interrupt>
      12:	00 00       	nop
      14:	77 c1       	rjmp	.+750    	; 0x304 <__vector_5>
      16:	00 00       	nop
      18:	50 c1       	rjmp	.+672    	; 0x2ba <__vector_6>
      1a:	00 00       	nop
      1c:	84 c0       	rjmp	.+264    	; 0x126 <__bad_interrupt>
      1e:	00 00       	nop
      20:	82 c0       	rjmp	.+260    	; 0x126 <__bad_interrupt>
      22:	00 00       	nop
      24:	80 c0       	rjmp	.+256    	; 0x126 <__bad_interrupt>
      26:	00 00       	nop
      28:	7e c0       	rjmp	.+252    	; 0x126 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7c c0       	rjmp	.+248    	; 0x126 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7a c0       	rjmp	.+244    	; 0x126 <__bad_interrupt>
      32:	00 00       	nop
      34:	78 c0       	rjmp	.+240    	; 0x126 <__bad_interrupt>
      36:	00 00       	nop
      38:	76 c0       	rjmp	.+236    	; 0x126 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	74 c0       	rjmp	.+232    	; 0x126 <__bad_interrupt>
      3e:	00 00       	nop
      40:	72 c0       	rjmp	.+228    	; 0x126 <__bad_interrupt>
      42:	00 00       	nop
      44:	70 c0       	rjmp	.+224    	; 0x126 <__bad_interrupt>
      46:	00 00       	nop
      48:	6e c0       	rjmp	.+220    	; 0x126 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6c c0       	rjmp	.+216    	; 0x126 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6a c0       	rjmp	.+212    	; 0x126 <__bad_interrupt>
      52:	00 00       	nop
      54:	68 c0       	rjmp	.+208    	; 0x126 <__bad_interrupt>
      56:	00 00       	nop
      58:	66 c0       	rjmp	.+204    	; 0x126 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	64 c0       	rjmp	.+200    	; 0x126 <__bad_interrupt>
      5e:	00 00       	nop
      60:	62 c0       	rjmp	.+196    	; 0x126 <__bad_interrupt>
      62:	00 00       	nop
      64:	60 c0       	rjmp	.+192    	; 0x126 <__bad_interrupt>
      66:	00 00       	nop
      68:	5e c0       	rjmp	.+188    	; 0x126 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5c c0       	rjmp	.+184    	; 0x126 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5a c0       	rjmp	.+180    	; 0x126 <__bad_interrupt>
      72:	00 00       	nop
      74:	58 c0       	rjmp	.+176    	; 0x126 <__bad_interrupt>
      76:	00 00       	nop
      78:	56 c0       	rjmp	.+172    	; 0x126 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	54 c0       	rjmp	.+168    	; 0x126 <__bad_interrupt>
      7e:	00 00       	nop
      80:	52 c0       	rjmp	.+164    	; 0x126 <__bad_interrupt>
      82:	00 00       	nop
      84:	50 c0       	rjmp	.+160    	; 0x126 <__bad_interrupt>
      86:	00 00       	nop
      88:	4e c0       	rjmp	.+156    	; 0x126 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4c c0       	rjmp	.+152    	; 0x126 <__bad_interrupt>
      8e:	00 00       	nop
      90:	4a c0       	rjmp	.+148    	; 0x126 <__bad_interrupt>
      92:	00 00       	nop
      94:	48 c0       	rjmp	.+144    	; 0x126 <__bad_interrupt>
      96:	00 00       	nop
      98:	46 c0       	rjmp	.+140    	; 0x126 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	44 c0       	rjmp	.+136    	; 0x126 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	42 c0       	rjmp	.+132    	; 0x126 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	40 c0       	rjmp	.+128    	; 0x126 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3e c0       	rjmp	.+124    	; 0x126 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3c c0       	rjmp	.+120    	; 0x126 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3a c0       	rjmp	.+116    	; 0x126 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	38 c0       	rjmp	.+112    	; 0x126 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	36 c0       	rjmp	.+108    	; 0x126 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	34 c0       	rjmp	.+104    	; 0x126 <__bad_interrupt>
      be:	00 00       	nop
      c0:	32 c0       	rjmp	.+100    	; 0x126 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	30 c0       	rjmp	.+96     	; 0x126 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2e c0       	rjmp	.+92     	; 0x126 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	ee c1       	rjmp	.+988    	; 0x4aa <__vector_51>
      ce:	00 00       	nop
      d0:	2a c0       	rjmp	.+84     	; 0x126 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	28 c0       	rjmp	.+80     	; 0x126 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	26 c0       	rjmp	.+76     	; 0x126 <__bad_interrupt>
      da:	00 00       	nop
      dc:	24 c0       	rjmp	.+72     	; 0x126 <__bad_interrupt>
      de:	00 00       	nop
      e0:	22 c0       	rjmp	.+68     	; 0x126 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e8 ef       	ldi	r30, 0xF8	; 248
      fc:	f2 e2       	ldi	r31, 0x22	; 34
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 30       	cpi	r26, 0x04	; 4
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	23 e0       	ldi	r18, 0x03	; 3
     110:	a4 e0       	ldi	r26, 0x04	; 4
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a0 31       	cpi	r26, 0x10	; 16
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <main>
     122:	0c 94 7a 11 	jmp	0x22f4	; 0x22f4 <_exit>

00000126 <__bad_interrupt>:
     126:	6c cf       	rjmp	.-296    	; 0x0 <__vectors>

00000128 <buzzer_pin_config>:
void servo_2(unsigned char degrees)
{
 float PositionTiltServo = 0;
 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
 OCR1BH = 0x00;
 OCR1BL = (unsigned char) PositionTiltServo;
     128:	3b 9a       	sbi	0x07, 3	; 7
     12a:	43 98       	cbi	0x08, 3	; 8
     12c:	08 95       	ret

0000012e <uart2_init>:
     12e:	e1 ed       	ldi	r30, 0xD1	; 209
     130:	f0 e0       	ldi	r31, 0x00	; 0
     132:	10 82       	st	Z, r1
     134:	10 92 d0 00 	sts	0x00D0, r1
     138:	86 e0       	ldi	r24, 0x06	; 6
     13a:	80 93 d2 00 	sts	0x00D2, r24
     13e:	8f e5       	ldi	r24, 0x5F	; 95
     140:	80 93 d4 00 	sts	0x00D4, r24
     144:	10 92 d5 00 	sts	0x00D5, r1
     148:	88 e9       	ldi	r24, 0x98	; 152
     14a:	80 83       	st	Z, r24
     14c:	08 95       	ret

0000014e <interrupt_switch_config>:
     14e:	6f 98       	cbi	0x0d, 7	; 13
     150:	77 9a       	sbi	0x0e, 7	; 14
     152:	08 95       	ret

00000154 <adc_pin_config>:
     154:	10 ba       	out	0x10, r1	; 16
     156:	11 ba       	out	0x11, r1	; 17
     158:	08 95       	ret

0000015a <left_encoder_pin_config>:
     15a:	6c 98       	cbi	0x0d, 4	; 13
     15c:	74 9a       	sbi	0x0e, 4	; 14
     15e:	08 95       	ret

00000160 <right_encoder_pin_config>:
     160:	6d 98       	cbi	0x0d, 5	; 13
     162:	75 9a       	sbi	0x0e, 5	; 14
     164:	08 95       	ret

00000166 <adc_init>:
     166:	ea e7       	ldi	r30, 0x7A	; 122
     168:	f0 e0       	ldi	r31, 0x00	; 0
     16a:	10 82       	st	Z, r1
     16c:	10 92 7b 00 	sts	0x007B, r1
     170:	80 e2       	ldi	r24, 0x20	; 32
     172:	80 93 7c 00 	sts	0x007C, r24
     176:	80 e8       	ldi	r24, 0x80	; 128
     178:	80 bf       	out	0x30, r24	; 48
     17a:	86 e8       	ldi	r24, 0x86	; 134
     17c:	80 83       	st	Z, r24
     17e:	08 95       	ret

00000180 <adc_conv>:
     180:	88 30       	cpi	r24, 0x08	; 8
     182:	18 f0       	brcs	.+6      	; 0x18a <adc_conv+0xa>
     184:	98 e0       	ldi	r25, 0x08	; 8
     186:	90 93 7b 00 	sts	0x007B, r25
     18a:	87 70       	andi	r24, 0x07	; 7
     18c:	80 62       	ori	r24, 0x20	; 32
     18e:	80 93 7c 00 	sts	0x007C, r24
     192:	ea e7       	ldi	r30, 0x7A	; 122
     194:	f0 e0       	ldi	r31, 0x00	; 0
     196:	80 81       	ld	r24, Z
     198:	80 64       	ori	r24, 0x40	; 64
     19a:	80 83       	st	Z, r24
     19c:	80 81       	ld	r24, Z
     19e:	84 ff       	sbrs	r24, 4
     1a0:	fd cf       	rjmp	.-6      	; 0x19c <adc_conv+0x1c>
     1a2:	80 91 79 00 	lds	r24, 0x0079
     1a6:	ea e7       	ldi	r30, 0x7A	; 122
     1a8:	f0 e0       	ldi	r31, 0x00	; 0
     1aa:	90 81       	ld	r25, Z
     1ac:	90 61       	ori	r25, 0x10	; 16
     1ae:	90 83       	st	Z, r25
     1b0:	10 92 7b 00 	sts	0x007B, r1
     1b4:	08 95       	ret

000001b6 <motion_pin_config>:
     1b6:	81 b1       	in	r24, 0x01	; 1
     1b8:	8f 60       	ori	r24, 0x0F	; 15
     1ba:	81 b9       	out	0x01, r24	; 1
     1bc:	82 b1       	in	r24, 0x02	; 2
     1be:	80 7f       	andi	r24, 0xF0	; 240
     1c0:	82 b9       	out	0x02, r24	; 2
     1c2:	ea e0       	ldi	r30, 0x0A	; 10
     1c4:	f1 e0       	ldi	r31, 0x01	; 1
     1c6:	80 81       	ld	r24, Z
     1c8:	88 61       	ori	r24, 0x18	; 24
     1ca:	80 83       	st	Z, r24
     1cc:	eb e0       	ldi	r30, 0x0B	; 11
     1ce:	f1 e0       	ldi	r31, 0x01	; 1
     1d0:	80 81       	ld	r24, Z
     1d2:	88 61       	ori	r24, 0x18	; 24
     1d4:	80 83       	st	Z, r24
     1d6:	08 95       	ret

000001d8 <servo1_pin_config>:
     1d8:	25 9a       	sbi	0x04, 5	; 4
     1da:	2d 9a       	sbi	0x05, 5	; 5
     1dc:	08 95       	ret

000001de <servo2_pin_config>:
     1de:	26 9a       	sbi	0x04, 6	; 4
     1e0:	2e 9a       	sbi	0x05, 6	; 5
     1e2:	08 95       	ret

000001e4 <servo3_pin_config>:
     1e4:	27 9a       	sbi	0x04, 7	; 4
     1e6:	2f 9a       	sbi	0x05, 7	; 5
     1e8:	08 95       	ret

000001ea <timer1_init>:
     1ea:	e1 e8       	ldi	r30, 0x81	; 129
     1ec:	f0 e0       	ldi	r31, 0x00	; 0
     1ee:	10 82       	st	Z, r1
     1f0:	8c ef       	ldi	r24, 0xFC	; 252
     1f2:	80 93 85 00 	sts	0x0085, r24
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	80 93 84 00 	sts	0x0084, r24
     1fc:	93 e0       	ldi	r25, 0x03	; 3
     1fe:	90 93 89 00 	sts	0x0089, r25
     202:	8f ef       	ldi	r24, 0xFF	; 255
     204:	80 93 88 00 	sts	0x0088, r24
     208:	90 93 8b 00 	sts	0x008B, r25
     20c:	80 93 8a 00 	sts	0x008A, r24
     210:	90 93 8d 00 	sts	0x008D, r25
     214:	80 93 8c 00 	sts	0x008C, r24
     218:	90 93 87 00 	sts	0x0087, r25
     21c:	80 93 86 00 	sts	0x0086, r24
     220:	8b ea       	ldi	r24, 0xAB	; 171
     222:	80 93 80 00 	sts	0x0080, r24
     226:	10 92 82 00 	sts	0x0082, r1
     22a:	8c e0       	ldi	r24, 0x0C	; 12
     22c:	80 83       	st	Z, r24
     22e:	08 95       	ret

00000230 <timer5_init>:
     230:	e1 e2       	ldi	r30, 0x21	; 33
     232:	f1 e0       	ldi	r31, 0x01	; 1
     234:	10 82       	st	Z, r1
     236:	8f ef       	ldi	r24, 0xFF	; 255
     238:	80 93 25 01 	sts	0x0125, r24
     23c:	91 e0       	ldi	r25, 0x01	; 1
     23e:	90 93 24 01 	sts	0x0124, r25
     242:	10 92 29 01 	sts	0x0129, r1
     246:	80 93 28 01 	sts	0x0128, r24
     24a:	10 92 2b 01 	sts	0x012B, r1
     24e:	80 93 2a 01 	sts	0x012A, r24
     252:	10 92 2d 01 	sts	0x012D, r1
     256:	80 93 2c 01 	sts	0x012C, r24
     25a:	89 ea       	ldi	r24, 0xA9	; 169
     25c:	80 93 20 01 	sts	0x0120, r24
     260:	8b e0       	ldi	r24, 0x0B	; 11
     262:	80 83       	st	Z, r24
     264:	08 95       	ret

00000266 <port_init>:
     266:	73 df       	rcall	.-282    	; 0x14e <interrupt_switch_config>
     268:	a6 df       	rcall	.-180    	; 0x1b6 <motion_pin_config>
     26a:	74 df       	rcall	.-280    	; 0x154 <adc_pin_config>
     26c:	5d df       	rcall	.-326    	; 0x128 <buzzer_pin_config>
     26e:	75 df       	rcall	.-278    	; 0x15a <left_encoder_pin_config>
     270:	77 df       	rcall	.-274    	; 0x160 <right_encoder_pin_config>
     272:	b2 df       	rcall	.-156    	; 0x1d8 <servo1_pin_config>
     274:	b4 df       	rcall	.-152    	; 0x1de <servo2_pin_config>
     276:	b6 cf       	rjmp	.-148    	; 0x1e4 <servo3_pin_config>
     278:	08 95       	ret

0000027a <buzzer_on>:
     27a:	86 b1       	in	r24, 0x06	; 6
     27c:	88 60       	ori	r24, 0x08	; 8
     27e:	88 b9       	out	0x08, r24	; 8
     280:	08 95       	ret

00000282 <buzzer_off>:
     282:	86 b1       	in	r24, 0x06	; 6
     284:	87 7f       	andi	r24, 0xF7	; 247
     286:	88 b9       	out	0x08, r24	; 8
     288:	08 95       	ret

0000028a <motion_set>:
     28a:	92 b1       	in	r25, 0x02	; 2
     28c:	90 7f       	andi	r25, 0xF0	; 240
     28e:	8f 70       	andi	r24, 0x0F	; 15
     290:	98 2b       	or	r25, r24
     292:	92 b9       	out	0x02, r25	; 2
     294:	08 95       	ret

00000296 <left_position_encoder_interrupt_init>:
     296:	f8 94       	cli
     298:	ea e6       	ldi	r30, 0x6A	; 106
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	80 81       	ld	r24, Z
     29e:	82 60       	ori	r24, 0x02	; 2
     2a0:	80 83       	st	Z, r24
     2a2:	ec 9a       	sbi	0x1d, 4	; 29
     2a4:	78 94       	sei
     2a6:	08 95       	ret

000002a8 <right_position_encoder_interrupt_init>:
     2a8:	f8 94       	cli
     2aa:	ea e6       	ldi	r30, 0x6A	; 106
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	80 81       	ld	r24, Z
     2b0:	88 60       	ori	r24, 0x08	; 8
     2b2:	80 83       	st	Z, r24
     2b4:	ed 9a       	sbi	0x1d, 5	; 29
     2b6:	78 94       	sei
     2b8:	08 95       	ret

000002ba <__vector_6>:
     2ba:	1f 92       	push	r1
     2bc:	0f 92       	push	r0
     2be:	0f b6       	in	r0, 0x3f	; 63
     2c0:	0f 92       	push	r0
     2c2:	11 24       	eor	r1, r1
     2c4:	8f 93       	push	r24
     2c6:	9f 93       	push	r25
     2c8:	af 93       	push	r26
     2ca:	bf 93       	push	r27
     2cc:	80 91 06 02 	lds	r24, 0x0206
     2d0:	90 91 07 02 	lds	r25, 0x0207
     2d4:	a0 91 08 02 	lds	r26, 0x0208
     2d8:	b0 91 09 02 	lds	r27, 0x0209
     2dc:	01 96       	adiw	r24, 0x01	; 1
     2de:	a1 1d       	adc	r26, r1
     2e0:	b1 1d       	adc	r27, r1
     2e2:	80 93 06 02 	sts	0x0206, r24
     2e6:	90 93 07 02 	sts	0x0207, r25
     2ea:	a0 93 08 02 	sts	0x0208, r26
     2ee:	b0 93 09 02 	sts	0x0209, r27
     2f2:	bf 91       	pop	r27
     2f4:	af 91       	pop	r26
     2f6:	9f 91       	pop	r25
     2f8:	8f 91       	pop	r24
     2fa:	0f 90       	pop	r0
     2fc:	0f be       	out	0x3f, r0	; 63
     2fe:	0f 90       	pop	r0
     300:	1f 90       	pop	r1
     302:	18 95       	reti

00000304 <__vector_5>:
     304:	1f 92       	push	r1
     306:	0f 92       	push	r0
     308:	0f b6       	in	r0, 0x3f	; 63
     30a:	0f 92       	push	r0
     30c:	11 24       	eor	r1, r1
     30e:	8f 93       	push	r24
     310:	9f 93       	push	r25
     312:	af 93       	push	r26
     314:	bf 93       	push	r27
     316:	80 91 0a 02 	lds	r24, 0x020A
     31a:	90 91 0b 02 	lds	r25, 0x020B
     31e:	a0 91 0c 02 	lds	r26, 0x020C
     322:	b0 91 0d 02 	lds	r27, 0x020D
     326:	01 96       	adiw	r24, 0x01	; 1
     328:	a1 1d       	adc	r26, r1
     32a:	b1 1d       	adc	r27, r1
     32c:	80 93 0a 02 	sts	0x020A, r24
     330:	90 93 0b 02 	sts	0x020B, r25
     334:	a0 93 0c 02 	sts	0x020C, r26
     338:	b0 93 0d 02 	sts	0x020D, r27
     33c:	bf 91       	pop	r27
     33e:	af 91       	pop	r26
     340:	9f 91       	pop	r25
     342:	8f 91       	pop	r24
     344:	0f 90       	pop	r0
     346:	0f be       	out	0x3f, r0	; 63
     348:	0f 90       	pop	r0
     34a:	1f 90       	pop	r1
     34c:	18 95       	reti

0000034e <forward>:
     34e:	86 e0       	ldi	r24, 0x06	; 6
     350:	9c cf       	rjmp	.-200    	; 0x28a <motion_set>
     352:	08 95       	ret

00000354 <backward>:
     354:	89 e0       	ldi	r24, 0x09	; 9
     356:	99 cf       	rjmp	.-206    	; 0x28a <motion_set>
     358:	08 95       	ret

0000035a <stop>:
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	96 cf       	rjmp	.-212    	; 0x28a <motion_set>
     35e:	08 95       	ret

00000360 <left>:
     360:	85 e0       	ldi	r24, 0x05	; 5
     362:	93 cf       	rjmp	.-218    	; 0x28a <motion_set>
     364:	08 95       	ret

00000366 <right>:
     366:	8a e0       	ldi	r24, 0x0A	; 10
     368:	90 cf       	rjmp	.-224    	; 0x28a <motion_set>
     36a:	08 95       	ret

0000036c <soft_left>:
     36c:	84 e0       	ldi	r24, 0x04	; 4
     36e:	8d cf       	rjmp	.-230    	; 0x28a <motion_set>
     370:	08 95       	ret

00000372 <soft_right>:
     372:	82 e0       	ldi	r24, 0x02	; 2
     374:	8a cf       	rjmp	.-236    	; 0x28a <motion_set>
     376:	08 95       	ret

00000378 <angle_rotate>:
     378:	cf 92       	push	r12
     37a:	df 92       	push	r13
     37c:	ef 92       	push	r14
     37e:	ff 92       	push	r15
     380:	0f 93       	push	r16
     382:	1f 93       	push	r17
     384:	bc 01       	movw	r22, r24
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	0e 94 a7 10 	call	0x214e	; 0x214e <__floatunsisf>
     38e:	28 e4       	ldi	r18, 0x48	; 72
     390:	31 ee       	ldi	r19, 0xE1	; 225
     392:	42 e8       	ldi	r20, 0x82	; 130
     394:	50 e4       	ldi	r21, 0x40	; 64
     396:	0e 94 13 10 	call	0x2026	; 0x2026 <__divsf3>
     39a:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <__fixunssfsi>
     39e:	ab 01       	movw	r20, r22
     3a0:	60 e0       	ldi	r22, 0x00	; 0
     3a2:	70 e0       	ldi	r23, 0x00	; 0
     3a4:	10 92 06 02 	sts	0x0206, r1
     3a8:	10 92 07 02 	sts	0x0207, r1
     3ac:	10 92 08 02 	sts	0x0208, r1
     3b0:	10 92 09 02 	sts	0x0209, r1
     3b4:	10 92 0a 02 	sts	0x020A, r1
     3b8:	10 92 0b 02 	sts	0x020B, r1
     3bc:	10 92 0c 02 	sts	0x020C, r1
     3c0:	10 92 0d 02 	sts	0x020D, r1
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	e0 e0       	ldi	r30, 0x00	; 0
     3c8:	c0 90 06 02 	lds	r12, 0x0206
     3cc:	d0 90 07 02 	lds	r13, 0x0207
     3d0:	e0 90 08 02 	lds	r14, 0x0208
     3d4:	f0 90 09 02 	lds	r15, 0x0209
     3d8:	00 91 0a 02 	lds	r16, 0x020A
     3dc:	10 91 0b 02 	lds	r17, 0x020B
     3e0:	20 91 0c 02 	lds	r18, 0x020C
     3e4:	30 91 0d 02 	lds	r19, 0x020D
     3e8:	89 2f       	mov	r24, r25
     3ea:	04 17       	cp	r16, r20
     3ec:	15 07       	cpc	r17, r21
     3ee:	26 07       	cpc	r18, r22
     3f0:	37 07       	cpc	r19, r23
     3f2:	08 f4       	brcc	.+2      	; 0x3f6 <angle_rotate+0x7e>
     3f4:	8e 2f       	mov	r24, r30
     3f6:	81 11       	cpse	r24, r1
     3f8:	09 c0       	rjmp	.+18     	; 0x40c <angle_rotate+0x94>
     3fa:	89 2f       	mov	r24, r25
     3fc:	c4 16       	cp	r12, r20
     3fe:	d5 06       	cpc	r13, r21
     400:	e6 06       	cpc	r14, r22
     402:	f7 06       	cpc	r15, r23
     404:	08 f4       	brcc	.+2      	; 0x408 <angle_rotate+0x90>
     406:	8e 2f       	mov	r24, r30
     408:	88 23       	and	r24, r24
     40a:	f1 f2       	breq	.-68     	; 0x3c8 <angle_rotate+0x50>
     40c:	1f 91       	pop	r17
     40e:	0f 91       	pop	r16
     410:	ff 90       	pop	r15
     412:	ef 90       	pop	r14
     414:	df 90       	pop	r13
     416:	cf 90       	pop	r12
     418:	08 95       	ret

0000041a <linear_distance_mm>:
     41a:	bc 01       	movw	r22, r24
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	0e 94 a7 10 	call	0x214e	; 0x214e <__floatunsisf>
     424:	25 ee       	ldi	r18, 0xE5	; 229
     426:	30 ed       	ldi	r19, 0xD0	; 208
     428:	4a ea       	ldi	r20, 0xAA	; 170
     42a:	50 e4       	ldi	r21, 0x40	; 64
     42c:	0e 94 13 10 	call	0x2026	; 0x2026 <__divsf3>
     430:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <__fixunssfsi>
     434:	ab 01       	movw	r20, r22
     436:	bc 01       	movw	r22, r24
     438:	10 92 06 02 	sts	0x0206, r1
     43c:	10 92 07 02 	sts	0x0207, r1
     440:	10 92 08 02 	sts	0x0208, r1
     444:	10 92 09 02 	sts	0x0209, r1
     448:	80 91 06 02 	lds	r24, 0x0206
     44c:	90 91 07 02 	lds	r25, 0x0207
     450:	a0 91 08 02 	lds	r26, 0x0208
     454:	b0 91 09 02 	lds	r27, 0x0209
     458:	48 17       	cp	r20, r24
     45a:	59 07       	cpc	r21, r25
     45c:	6a 07       	cpc	r22, r26
     45e:	7b 07       	cpc	r23, r27
     460:	98 f7       	brcc	.-26     	; 0x448 <linear_distance_mm+0x2e>
     462:	7b cf       	rjmp	.-266    	; 0x35a <stop>
     464:	08 95       	ret

00000466 <forward_mm>:
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	ec 01       	movw	r28, r24
     46c:	70 df       	rcall	.-288    	; 0x34e <forward>
     46e:	ce 01       	movw	r24, r28
     470:	d4 df       	rcall	.-88     	; 0x41a <linear_distance_mm>
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	08 95       	ret

00000478 <backward_mm>:
     478:	cf 93       	push	r28
     47a:	df 93       	push	r29
     47c:	ec 01       	movw	r28, r24
     47e:	6a df       	rcall	.-300    	; 0x354 <backward>
     480:	ce 01       	movw	r24, r28
     482:	cb df       	rcall	.-106    	; 0x41a <linear_distance_mm>
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	08 95       	ret

0000048a <turn_off_ir_proxi_sensors>:
     48a:	e2 e0       	ldi	r30, 0x02	; 2
     48c:	f1 e0       	ldi	r31, 0x01	; 1
     48e:	80 81       	ld	r24, Z
     490:	88 60       	ori	r24, 0x08	; 8
     492:	80 83       	st	Z, r24
     494:	08 95       	ret

00000496 <init_devices>:
     496:	f8 94       	cli
     498:	e6 de       	rcall	.-564    	; 0x266 <port_init>
     49a:	49 de       	rcall	.-878    	; 0x12e <uart2_init>
     49c:	64 de       	rcall	.-824    	; 0x166 <adc_init>
     49e:	a5 de       	rcall	.-694    	; 0x1ea <timer1_init>
     4a0:	c7 de       	rcall	.-626    	; 0x230 <timer5_init>
     4a2:	f9 de       	rcall	.-526    	; 0x296 <left_position_encoder_interrupt_init>
     4a4:	01 df       	rcall	.-510    	; 0x2a8 <right_position_encoder_interrupt_init>
     4a6:	78 94       	sei
     4a8:	08 95       	ret

000004aa <__vector_51>:
     4aa:	1f 92       	push	r1
     4ac:	0f 92       	push	r0
     4ae:	0f b6       	in	r0, 0x3f	; 63
     4b0:	0f 92       	push	r0
     4b2:	11 24       	eor	r1, r1
     4b4:	0b b6       	in	r0, 0x3b	; 59
     4b6:	0f 92       	push	r0
     4b8:	2f 93       	push	r18
     4ba:	3f 93       	push	r19
     4bc:	4f 93       	push	r20
     4be:	5f 93       	push	r21
     4c0:	6f 93       	push	r22
     4c2:	7f 93       	push	r23
     4c4:	8f 93       	push	r24
     4c6:	9f 93       	push	r25
     4c8:	af 93       	push	r26
     4ca:	bf 93       	push	r27
     4cc:	ef 93       	push	r30
     4ce:	ff 93       	push	r31
     4d0:	e6 ed       	ldi	r30, 0xD6	; 214
     4d2:	f0 e0       	ldi	r31, 0x00	; 0
     4d4:	80 81       	ld	r24, Z
     4d6:	80 93 3d 02 	sts	0x023D, r24
     4da:	80 91 3d 02 	lds	r24, 0x023D
     4de:	80 83       	st	Z, r24
     4e0:	80 91 3d 02 	lds	r24, 0x023D
     4e4:	88 23       	and	r24, r24
     4e6:	09 f4       	brne	.+2      	; 0x4ea <__vector_51+0x40>
     4e8:	87 c0       	rjmp	.+270    	; 0x5f8 <__vector_51+0x14e>
     4ea:	80 91 3d 02 	lds	r24, 0x023D
     4ee:	80 33       	cpi	r24, 0x30	; 48
     4f0:	11 f4       	brne	.+4      	; 0x4f6 <__vector_51+0x4c>
     4f2:	10 92 3d 02 	sts	0x023D, r1
     4f6:	80 91 3d 02 	lds	r24, 0x023D
     4fa:	81 33       	cpi	r24, 0x31	; 49
     4fc:	19 f4       	brne	.+6      	; 0x504 <__vector_51+0x5a>
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	80 93 3d 02 	sts	0x023D, r24
     504:	80 91 3d 02 	lds	r24, 0x023D
     508:	82 33       	cpi	r24, 0x32	; 50
     50a:	19 f4       	brne	.+6      	; 0x512 <__vector_51+0x68>
     50c:	82 e0       	ldi	r24, 0x02	; 2
     50e:	80 93 3d 02 	sts	0x023D, r24
     512:	80 91 3d 02 	lds	r24, 0x023D
     516:	83 33       	cpi	r24, 0x33	; 51
     518:	19 f4       	brne	.+6      	; 0x520 <__vector_51+0x76>
     51a:	83 e0       	ldi	r24, 0x03	; 3
     51c:	80 93 3d 02 	sts	0x023D, r24
     520:	80 91 3d 02 	lds	r24, 0x023D
     524:	84 33       	cpi	r24, 0x34	; 52
     526:	19 f4       	brne	.+6      	; 0x52e <__vector_51+0x84>
     528:	84 e0       	ldi	r24, 0x04	; 4
     52a:	80 93 3d 02 	sts	0x023D, r24
     52e:	80 91 3d 02 	lds	r24, 0x023D
     532:	86 33       	cpi	r24, 0x36	; 54
     534:	19 f4       	brne	.+6      	; 0x53c <__vector_51+0x92>
     536:	86 e0       	ldi	r24, 0x06	; 6
     538:	80 93 3d 02 	sts	0x023D, r24
     53c:	80 91 3d 02 	lds	r24, 0x023D
     540:	85 33       	cpi	r24, 0x35	; 53
     542:	19 f4       	brne	.+6      	; 0x54a <__vector_51+0xa0>
     544:	85 e0       	ldi	r24, 0x05	; 5
     546:	80 93 3d 02 	sts	0x023D, r24
     54a:	80 91 3d 02 	lds	r24, 0x023D
     54e:	87 33       	cpi	r24, 0x37	; 55
     550:	19 f4       	brne	.+6      	; 0x558 <__vector_51+0xae>
     552:	87 e0       	ldi	r24, 0x07	; 7
     554:	80 93 3d 02 	sts	0x023D, r24
     558:	80 91 3d 02 	lds	r24, 0x023D
     55c:	88 33       	cpi	r24, 0x38	; 56
     55e:	19 f4       	brne	.+6      	; 0x566 <__vector_51+0xbc>
     560:	88 e0       	ldi	r24, 0x08	; 8
     562:	80 93 3d 02 	sts	0x023D, r24
     566:	80 91 3d 02 	lds	r24, 0x023D
     56a:	89 33       	cpi	r24, 0x39	; 57
     56c:	19 f4       	brne	.+6      	; 0x574 <__vector_51+0xca>
     56e:	89 e0       	ldi	r24, 0x09	; 9
     570:	80 93 3d 02 	sts	0x023D, r24
     574:	80 91 3d 02 	lds	r24, 0x023D
     578:	81 36       	cpi	r24, 0x61	; 97
     57a:	11 f4       	brne	.+4      	; 0x580 <__vector_51+0xd6>
     57c:	80 93 3d 02 	sts	0x023D, r24
     580:	80 91 3d 02 	lds	r24, 0x023D
     584:	82 36       	cpi	r24, 0x62	; 98
     586:	11 f4       	brne	.+4      	; 0x58c <__vector_51+0xe2>
     588:	80 93 3d 02 	sts	0x023D, r24
     58c:	80 91 3d 02 	lds	r24, 0x023D
     590:	83 36       	cpi	r24, 0x63	; 99
     592:	11 f4       	brne	.+4      	; 0x598 <__vector_51+0xee>
     594:	80 93 3d 02 	sts	0x023D, r24
     598:	80 91 3d 02 	lds	r24, 0x023D
     59c:	83 36       	cpi	r24, 0x63	; 99
     59e:	11 f4       	brne	.+4      	; 0x5a4 <__vector_51+0xfa>
     5a0:	10 92 3d 02 	sts	0x023D, r1
     5a4:	60 91 3d 02 	lds	r22, 0x023D
     5a8:	70 e0       	ldi	r23, 0x00	; 0
     5aa:	80 91 04 02 	lds	r24, 0x0204
     5ae:	90 91 05 02 	lds	r25, 0x0205
     5b2:	8e 96       	adiw	r24, 0x2e	; 46
     5b4:	0e 94 64 11 	call	0x22c8	; 0x22c8 <eeprom_update_word>
     5b8:	80 91 3d 02 	lds	r24, 0x023D
     5bc:	82 36       	cpi	r24, 0x62	; 98
     5be:	59 f4       	brne	.+22     	; 0x5d6 <__vector_51+0x12c>
     5c0:	5c de       	rcall	.-840    	; 0x27a <buzzer_on>
     5c2:	2f ef       	ldi	r18, 0xFF	; 255
     5c4:	8f ef       	ldi	r24, 0xFF	; 255
     5c6:	9c e2       	ldi	r25, 0x2C	; 44
     5c8:	21 50       	subi	r18, 0x01	; 1
     5ca:	80 40       	sbci	r24, 0x00	; 0
     5cc:	90 40       	sbci	r25, 0x00	; 0
     5ce:	e1 f7       	brne	.-8      	; 0x5c8 <__vector_51+0x11e>
     5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <__vector_51+0x128>
     5d2:	00 00       	nop
     5d4:	56 de       	rcall	.-852    	; 0x282 <buzzer_off>
     5d6:	80 91 04 02 	lds	r24, 0x0204
     5da:	90 91 05 02 	lds	r25, 0x0205
     5de:	9c 01       	movw	r18, r24
     5e0:	2f 5f       	subi	r18, 0xFF	; 255
     5e2:	3f 4f       	sbci	r19, 0xFF	; 255
     5e4:	30 93 05 02 	sts	0x0205, r19
     5e8:	20 93 04 02 	sts	0x0204, r18
     5ec:	20 91 3d 02 	lds	r18, 0x023D
     5f0:	fc 01       	movw	r30, r24
     5f2:	ee 5b       	subi	r30, 0xBE	; 190
     5f4:	fd 4f       	sbci	r31, 0xFD	; 253
     5f6:	20 83       	st	Z, r18
     5f8:	ff 91       	pop	r31
     5fa:	ef 91       	pop	r30
     5fc:	bf 91       	pop	r27
     5fe:	af 91       	pop	r26
     600:	9f 91       	pop	r25
     602:	8f 91       	pop	r24
     604:	7f 91       	pop	r23
     606:	6f 91       	pop	r22
     608:	5f 91       	pop	r21
     60a:	4f 91       	pop	r20
     60c:	3f 91       	pop	r19
     60e:	2f 91       	pop	r18
     610:	0f 90       	pop	r0
     612:	0b be       	out	0x3b, r0	; 59
     614:	0f 90       	pop	r0
     616:	0f be       	out	0x3f, r0	; 63
     618:	0f 90       	pop	r0
     61a:	1f 90       	pop	r1
     61c:	18 95       	reti

0000061e <serial_read>:
     61e:	2f 92       	push	r2
     620:	3f 92       	push	r3
     622:	4f 92       	push	r4
     624:	5f 92       	push	r5
     626:	6f 92       	push	r6
     628:	7f 92       	push	r7
     62a:	8f 92       	push	r8
     62c:	9f 92       	push	r9
     62e:	af 92       	push	r10
     630:	bf 92       	push	r11
     632:	cf 92       	push	r12
     634:	df 92       	push	r13
     636:	ef 92       	push	r14
     638:	ff 92       	push	r15
     63a:	0f 93       	push	r16
     63c:	1f 93       	push	r17
     63e:	cf 93       	push	r28
     640:	df 93       	push	r29
     642:	cd b7       	in	r28, 0x3d	; 61
     644:	de b7       	in	r29, 0x3e	; 62
     646:	28 97       	sbiw	r28, 0x08	; 8
     648:	0f b6       	in	r0, 0x3f	; 63
     64a:	f8 94       	cli
     64c:	de bf       	out	0x3e, r29	; 62
     64e:	0f be       	out	0x3f, r0	; 63
     650:	cd bf       	out	0x3d, r28	; 61
     652:	c1 2c       	mov	r12, r1
     654:	d1 2c       	mov	r13, r1
     656:	0f 2e       	mov	r0, r31
     658:	fe e2       	ldi	r31, 0x2E	; 46
     65a:	af 2e       	mov	r10, r31
     65c:	b1 2c       	mov	r11, r1
     65e:	f0 2d       	mov	r31, r0
     660:	02 c0       	rjmp	.+4      	; 0x666 <serial_read+0x48>
     662:	68 01       	movw	r12, r16
     664:	57 01       	movw	r10, r14
     666:	c5 01       	movw	r24, r10
     668:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <eeprom_read_byte>
     66c:	08 2f       	mov	r16, r24
     66e:	10 e0       	ldi	r17, 0x00	; 0
     670:	75 01       	movw	r14, r10
     672:	2f ef       	ldi	r18, 0xFF	; 255
     674:	e2 1a       	sub	r14, r18
     676:	f2 0a       	sbc	r15, r18
     678:	c7 01       	movw	r24, r14
     67a:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <eeprom_read_byte>
     67e:	81 36       	cpi	r24, 0x61	; 97
     680:	81 f7       	brne	.-32     	; 0x662 <serial_read+0x44>
     682:	c5 01       	movw	r24, r10
     684:	02 96       	adiw	r24, 0x02	; 2
     686:	9c 83       	std	Y+4, r25	; 0x04
     688:	8b 83       	std	Y+3, r24	; 0x03
     68a:	46 01       	movw	r8, r12
     68c:	88 0c       	add	r8, r8
     68e:	99 1c       	adc	r9, r9
     690:	cc 0c       	add	r12, r12
     692:	dd 1c       	adc	r13, r13
     694:	cc 0c       	add	r12, r12
     696:	dd 1c       	adc	r13, r13
     698:	cc 0c       	add	r12, r12
     69a:	dd 1c       	adc	r13, r13
     69c:	8c 0c       	add	r8, r12
     69e:	9d 1c       	adc	r9, r13
     6a0:	80 0e       	add	r8, r16
     6a2:	91 1e       	adc	r9, r17
     6a4:	18 14       	cp	r1, r8
     6a6:	19 04       	cpc	r1, r9
     6a8:	0c f4       	brge	.+2      	; 0x6ac <serial_read+0x8e>
     6aa:	56 c0       	rjmp	.+172    	; 0x758 <serial_read+0x13a>
     6ac:	60 c0       	rjmp	.+192    	; 0x76e <serial_read+0x150>
     6ae:	8b 81       	ldd	r24, Y+3	; 0x03
     6b0:	9c 81       	ldd	r25, Y+4	; 0x04
     6b2:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <eeprom_read_byte>
     6b6:	08 2f       	mov	r16, r24
     6b8:	10 e0       	ldi	r17, 0x00	; 0
     6ba:	eb 80       	ldd	r14, Y+3	; 0x03
     6bc:	fc 80       	ldd	r15, Y+4	; 0x04
     6be:	9f ef       	ldi	r25, 0xFF	; 255
     6c0:	e9 1a       	sub	r14, r25
     6c2:	f9 0a       	sbc	r15, r25
     6c4:	c7 01       	movw	r24, r14
     6c6:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <eeprom_read_byte>
     6ca:	81 36       	cpi	r24, 0x61	; 97
     6cc:	41 f0       	breq	.+16     	; 0x6de <serial_read+0xc0>
     6ce:	ef ef       	ldi	r30, 0xFF	; 255
     6d0:	ce 1a       	sub	r12, r30
     6d2:	de 0a       	sbc	r13, r30
     6d4:	fc 82       	std	Y+4, r15	; 0x04
     6d6:	eb 82       	std	Y+3, r14	; 0x03
     6d8:	40 2e       	mov	r4, r16
     6da:	51 2e       	mov	r5, r17
     6dc:	e8 cf       	rjmp	.-48     	; 0x6ae <serial_read+0x90>
     6de:	84 2d       	mov	r24, r4
     6e0:	95 2d       	mov	r25, r5
     6e2:	2b 81       	ldd	r18, Y+3	; 0x03
     6e4:	3c 81       	ldd	r19, Y+4	; 0x04
     6e6:	2e 5f       	subi	r18, 0xFE	; 254
     6e8:	3f 4f       	sbci	r19, 0xFF	; 255
     6ea:	3c 83       	std	Y+4, r19	; 0x04
     6ec:	2b 83       	std	Y+3, r18	; 0x03
     6ee:	3f ef       	ldi	r19, 0xFF	; 255
     6f0:	c3 1a       	sub	r12, r19
     6f2:	d3 0a       	sbc	r13, r19
     6f4:	e1 e0       	ldi	r30, 0x01	; 1
     6f6:	ce 16       	cp	r12, r30
     6f8:	d1 04       	cpc	r13, r1
     6fa:	61 f4       	brne	.+24     	; 0x714 <serial_read+0xf6>
     6fc:	f3 01       	movw	r30, r6
     6fe:	ee 0f       	add	r30, r30
     700:	ff 1f       	adc	r31, r31
     702:	e8 55       	subi	r30, 0x58	; 88
     704:	fd 4f       	sbci	r31, 0xFD	; 253
     706:	11 83       	std	Z+1, r17	; 0x01
     708:	00 83       	st	Z, r16
     70a:	93 01       	movw	r18, r6
     70c:	2f 5f       	subi	r18, 0xFF	; 255
     70e:	3f 4f       	sbci	r19, 0xFF	; 255
     710:	39 01       	movw	r6, r18
     712:	1b c0       	rjmp	.+54     	; 0x74a <serial_read+0x12c>
     714:	32 e0       	ldi	r19, 0x02	; 2
     716:	c3 16       	cp	r12, r19
     718:	d1 04       	cpc	r13, r1
     71a:	b9 f4       	brne	.+46     	; 0x74a <serial_read+0x12c>
     71c:	f3 01       	movw	r30, r6
     71e:	ee 0f       	add	r30, r30
     720:	ff 1f       	adc	r31, r31
     722:	e8 55       	subi	r30, 0x58	; 88
     724:	fd 4f       	sbci	r31, 0xFD	; 253
     726:	9c 01       	movw	r18, r24
     728:	22 0f       	add	r18, r18
     72a:	33 1f       	adc	r19, r19
     72c:	88 0f       	add	r24, r24
     72e:	99 1f       	adc	r25, r25
     730:	88 0f       	add	r24, r24
     732:	99 1f       	adc	r25, r25
     734:	88 0f       	add	r24, r24
     736:	99 1f       	adc	r25, r25
     738:	82 0f       	add	r24, r18
     73a:	93 1f       	adc	r25, r19
     73c:	08 0f       	add	r16, r24
     73e:	19 1f       	adc	r17, r25
     740:	11 83       	std	Z+1, r17	; 0x01
     742:	00 83       	st	Z, r16
     744:	c3 01       	movw	r24, r6
     746:	01 96       	adiw	r24, 0x01	; 1
     748:	3c 01       	movw	r6, r24
     74a:	92 e0       	ldi	r25, 0x02	; 2
     74c:	a9 0e       	add	r10, r25
     74e:	b1 1c       	adc	r11, r1
     750:	a8 14       	cp	r10, r8
     752:	b9 04       	cpc	r11, r9
     754:	4c f0       	brlt	.+18     	; 0x768 <serial_read+0x14a>
     756:	0b c0       	rjmp	.+22     	; 0x76e <serial_read+0x150>
     758:	a1 2c       	mov	r10, r1
     75a:	b1 2c       	mov	r11, r1
     75c:	61 2c       	mov	r6, r1
     75e:	71 2c       	mov	r7, r1
     760:	41 2c       	mov	r4, r1
     762:	51 2c       	mov	r5, r1
     764:	21 2c       	mov	r2, r1
     766:	31 2c       	mov	r3, r1
     768:	c2 2c       	mov	r12, r2
     76a:	d3 2c       	mov	r13, r3
     76c:	a0 cf       	rjmp	.-192    	; 0x6ae <serial_read+0x90>
     76e:	c1 2c       	mov	r12, r1
     770:	d1 2c       	mov	r13, r1
     772:	03 c0       	rjmp	.+6      	; 0x77a <serial_read+0x15c>
     774:	68 01       	movw	r12, r16
     776:	fc 82       	std	Y+4, r15	; 0x04
     778:	eb 82       	std	Y+3, r14	; 0x03
     77a:	8b 81       	ldd	r24, Y+3	; 0x03
     77c:	9c 81       	ldd	r25, Y+4	; 0x04
     77e:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <eeprom_read_byte>
     782:	08 2f       	mov	r16, r24
     784:	10 e0       	ldi	r17, 0x00	; 0
     786:	eb 80       	ldd	r14, Y+3	; 0x03
     788:	fc 80       	ldd	r15, Y+4	; 0x04
     78a:	ef ef       	ldi	r30, 0xFF	; 255
     78c:	ee 1a       	sub	r14, r30
     78e:	fe 0a       	sbc	r15, r30
     790:	c7 01       	movw	r24, r14
     792:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <eeprom_read_byte>
     796:	81 36       	cpi	r24, 0x61	; 97
     798:	69 f7       	brne	.-38     	; 0x774 <serial_read+0x156>
     79a:	2b 81       	ldd	r18, Y+3	; 0x03
     79c:	3c 81       	ldd	r19, Y+4	; 0x04
     79e:	2e 5f       	subi	r18, 0xFE	; 254
     7a0:	3f 4f       	sbci	r19, 0xFF	; 255
     7a2:	3c 83       	std	Y+4, r19	; 0x04
     7a4:	2b 83       	std	Y+3, r18	; 0x03
     7a6:	46 01       	movw	r8, r12
     7a8:	88 0c       	add	r8, r8
     7aa:	99 1c       	adc	r9, r9
     7ac:	cc 0c       	add	r12, r12
     7ae:	dd 1c       	adc	r13, r13
     7b0:	cc 0c       	add	r12, r12
     7b2:	dd 1c       	adc	r13, r13
     7b4:	cc 0c       	add	r12, r12
     7b6:	dd 1c       	adc	r13, r13
     7b8:	8c 0c       	add	r8, r12
     7ba:	9d 1c       	adc	r9, r13
     7bc:	80 0e       	add	r8, r16
     7be:	91 1e       	adc	r9, r17
     7c0:	18 14       	cp	r1, r8
     7c2:	19 04       	cpc	r1, r9
     7c4:	0c f4       	brge	.+2      	; 0x7c8 <serial_read+0x1aa>
     7c6:	55 c0       	rjmp	.+170    	; 0x872 <serial_read+0x254>
     7c8:	5f c0       	rjmp	.+190    	; 0x888 <serial_read+0x26a>
     7ca:	8b 81       	ldd	r24, Y+3	; 0x03
     7cc:	9c 81       	ldd	r25, Y+4	; 0x04
     7ce:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <eeprom_read_byte>
     7d2:	08 2f       	mov	r16, r24
     7d4:	10 e0       	ldi	r17, 0x00	; 0
     7d6:	eb 80       	ldd	r14, Y+3	; 0x03
     7d8:	fc 80       	ldd	r15, Y+4	; 0x04
     7da:	3f ef       	ldi	r19, 0xFF	; 255
     7dc:	e3 1a       	sub	r14, r19
     7de:	f3 0a       	sbc	r15, r19
     7e0:	c7 01       	movw	r24, r14
     7e2:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <eeprom_read_byte>
     7e6:	81 36       	cpi	r24, 0x61	; 97
     7e8:	41 f0       	breq	.+16     	; 0x7fa <serial_read+0x1dc>
     7ea:	8f ef       	ldi	r24, 0xFF	; 255
     7ec:	c8 1a       	sub	r12, r24
     7ee:	d8 0a       	sbc	r13, r24
     7f0:	fc 82       	std	Y+4, r15	; 0x04
     7f2:	eb 82       	std	Y+3, r14	; 0x03
     7f4:	40 2e       	mov	r4, r16
     7f6:	51 2e       	mov	r5, r17
     7f8:	e8 cf       	rjmp	.-48     	; 0x7ca <serial_read+0x1ac>
     7fa:	84 2d       	mov	r24, r4
     7fc:	95 2d       	mov	r25, r5
     7fe:	eb 81       	ldd	r30, Y+3	; 0x03
     800:	fc 81       	ldd	r31, Y+4	; 0x04
     802:	32 96       	adiw	r30, 0x02	; 2
     804:	fc 83       	std	Y+4, r31	; 0x04
     806:	eb 83       	std	Y+3, r30	; 0x03
     808:	ff ef       	ldi	r31, 0xFF	; 255
     80a:	cf 1a       	sub	r12, r31
     80c:	df 0a       	sbc	r13, r31
     80e:	21 e0       	ldi	r18, 0x01	; 1
     810:	c2 16       	cp	r12, r18
     812:	d1 04       	cpc	r13, r1
     814:	59 f4       	brne	.+22     	; 0x82c <serial_read+0x20e>
     816:	f3 01       	movw	r30, r6
     818:	ee 0f       	add	r30, r30
     81a:	ff 1f       	adc	r31, r31
     81c:	e7 5d       	subi	r30, 0xD7	; 215
     81e:	fd 4f       	sbci	r31, 0xFD	; 253
     820:	11 83       	std	Z+1, r17	; 0x01
     822:	00 83       	st	Z, r16
     824:	c3 01       	movw	r24, r6
     826:	01 96       	adiw	r24, 0x01	; 1
     828:	3c 01       	movw	r6, r24
     82a:	1c c0       	rjmp	.+56     	; 0x864 <serial_read+0x246>
     82c:	e2 e0       	ldi	r30, 0x02	; 2
     82e:	ce 16       	cp	r12, r30
     830:	d1 04       	cpc	r13, r1
     832:	c1 f4       	brne	.+48     	; 0x864 <serial_read+0x246>
     834:	f3 01       	movw	r30, r6
     836:	ee 0f       	add	r30, r30
     838:	ff 1f       	adc	r31, r31
     83a:	e7 5d       	subi	r30, 0xD7	; 215
     83c:	fd 4f       	sbci	r31, 0xFD	; 253
     83e:	9c 01       	movw	r18, r24
     840:	22 0f       	add	r18, r18
     842:	33 1f       	adc	r19, r19
     844:	88 0f       	add	r24, r24
     846:	99 1f       	adc	r25, r25
     848:	88 0f       	add	r24, r24
     84a:	99 1f       	adc	r25, r25
     84c:	88 0f       	add	r24, r24
     84e:	99 1f       	adc	r25, r25
     850:	82 0f       	add	r24, r18
     852:	93 1f       	adc	r25, r19
     854:	08 0f       	add	r16, r24
     856:	19 1f       	adc	r17, r25
     858:	11 83       	std	Z+1, r17	; 0x01
     85a:	00 83       	st	Z, r16
     85c:	93 01       	movw	r18, r6
     85e:	2f 5f       	subi	r18, 0xFF	; 255
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	39 01       	movw	r6, r18
     864:	32 e0       	ldi	r19, 0x02	; 2
     866:	a3 0e       	add	r10, r19
     868:	b1 1c       	adc	r11, r1
     86a:	a8 14       	cp	r10, r8
     86c:	b9 04       	cpc	r11, r9
     86e:	4c f0       	brlt	.+18     	; 0x882 <serial_read+0x264>
     870:	0b c0       	rjmp	.+22     	; 0x888 <serial_read+0x26a>
     872:	a1 2c       	mov	r10, r1
     874:	b1 2c       	mov	r11, r1
     876:	61 2c       	mov	r6, r1
     878:	71 2c       	mov	r7, r1
     87a:	41 2c       	mov	r4, r1
     87c:	51 2c       	mov	r5, r1
     87e:	21 2c       	mov	r2, r1
     880:	31 2c       	mov	r3, r1
     882:	c2 2c       	mov	r12, r2
     884:	d3 2c       	mov	r13, r3
     886:	a1 cf       	rjmp	.-190    	; 0x7ca <serial_read+0x1ac>
     888:	c1 2c       	mov	r12, r1
     88a:	d1 2c       	mov	r13, r1
     88c:	03 c0       	rjmp	.+6      	; 0x894 <serial_read+0x276>
     88e:	68 01       	movw	r12, r16
     890:	fc 82       	std	Y+4, r15	; 0x04
     892:	eb 82       	std	Y+3, r14	; 0x03
     894:	8b 81       	ldd	r24, Y+3	; 0x03
     896:	9c 81       	ldd	r25, Y+4	; 0x04
     898:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <eeprom_read_byte>
     89c:	08 2f       	mov	r16, r24
     89e:	10 e0       	ldi	r17, 0x00	; 0
     8a0:	eb 80       	ldd	r14, Y+3	; 0x03
     8a2:	fc 80       	ldd	r15, Y+4	; 0x04
     8a4:	8f ef       	ldi	r24, 0xFF	; 255
     8a6:	e8 1a       	sub	r14, r24
     8a8:	f8 0a       	sbc	r15, r24
     8aa:	c7 01       	movw	r24, r14
     8ac:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <eeprom_read_byte>
     8b0:	81 36       	cpi	r24, 0x61	; 97
     8b2:	69 f7       	brne	.-38     	; 0x88e <serial_read+0x270>
     8b4:	eb 81       	ldd	r30, Y+3	; 0x03
     8b6:	fc 81       	ldd	r31, Y+4	; 0x04
     8b8:	32 96       	adiw	r30, 0x02	; 2
     8ba:	f8 87       	std	Y+8, r31	; 0x08
     8bc:	ef 83       	std	Y+7, r30	; 0x07
     8be:	c6 01       	movw	r24, r12
     8c0:	88 0f       	add	r24, r24
     8c2:	99 1f       	adc	r25, r25
     8c4:	cc 0c       	add	r12, r12
     8c6:	dd 1c       	adc	r13, r13
     8c8:	cc 0c       	add	r12, r12
     8ca:	dd 1c       	adc	r13, r13
     8cc:	cc 0c       	add	r12, r12
     8ce:	dd 1c       	adc	r13, r13
     8d0:	8c 0d       	add	r24, r12
     8d2:	9d 1d       	adc	r25, r13
     8d4:	9c 01       	movw	r18, r24
     8d6:	20 0f       	add	r18, r16
     8d8:	31 1f       	adc	r19, r17
     8da:	3e 83       	std	Y+6, r19	; 0x06
     8dc:	2d 83       	std	Y+5, r18	; 0x05
     8de:	12 16       	cp	r1, r18
     8e0:	13 06       	cpc	r1, r19
     8e2:	0c f0       	brlt	.+2      	; 0x8e6 <serial_read+0x2c8>
     8e4:	a9 c0       	rjmp	.+338    	; 0xa38 <serial_read+0x41a>
     8e6:	1c 82       	std	Y+4, r1	; 0x04
     8e8:	1b 82       	std	Y+3, r1	; 0x03
     8ea:	19 82       	std	Y+1, r1	; 0x01
     8ec:	1a 82       	std	Y+2, r1	; 0x02
     8ee:	a1 2c       	mov	r10, r1
     8f0:	b1 2c       	mov	r11, r1
     8f2:	03 c0       	rjmp	.+6      	; 0x8fa <serial_read+0x2dc>
     8f4:	58 01       	movw	r10, r16
     8f6:	f8 86       	std	Y+8, r15	; 0x08
     8f8:	ef 82       	std	Y+7, r14	; 0x07
     8fa:	8f 81       	ldd	r24, Y+7	; 0x07
     8fc:	98 85       	ldd	r25, Y+8	; 0x08
     8fe:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <eeprom_read_byte>
     902:	08 2f       	mov	r16, r24
     904:	10 e0       	ldi	r17, 0x00	; 0
     906:	ef 80       	ldd	r14, Y+7	; 0x07
     908:	f8 84       	ldd	r15, Y+8	; 0x08
     90a:	3f ef       	ldi	r19, 0xFF	; 255
     90c:	e3 1a       	sub	r14, r19
     90e:	f3 0a       	sbc	r15, r19
     910:	c7 01       	movw	r24, r14
     912:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <eeprom_read_byte>
     916:	81 36       	cpi	r24, 0x61	; 97
     918:	69 f7       	brne	.-38     	; 0x8f4 <serial_read+0x2d6>
     91a:	8f 81       	ldd	r24, Y+7	; 0x07
     91c:	98 85       	ldd	r25, Y+8	; 0x08
     91e:	02 96       	adiw	r24, 0x02	; 2
     920:	98 87       	std	Y+8, r25	; 0x08
     922:	8f 83       	std	Y+7, r24	; 0x07
     924:	c5 01       	movw	r24, r10
     926:	88 0f       	add	r24, r24
     928:	99 1f       	adc	r25, r25
     92a:	88 0f       	add	r24, r24
     92c:	99 1f       	adc	r25, r25
     92e:	88 0f       	add	r24, r24
     930:	99 1f       	adc	r25, r25
     932:	25 01       	movw	r4, r10
     934:	44 0c       	add	r4, r4
     936:	55 1c       	adc	r5, r5
     938:	48 0e       	add	r4, r24
     93a:	59 1e       	adc	r5, r25
     93c:	40 0e       	add	r4, r16
     93e:	51 1e       	adc	r5, r17
     940:	14 14       	cp	r1, r4
     942:	15 04       	cpc	r1, r5
     944:	0c f4       	brge	.+2      	; 0x948 <serial_read+0x32a>
     946:	58 c0       	rjmp	.+176    	; 0x9f8 <serial_read+0x3da>
     948:	6c c0       	rjmp	.+216    	; 0xa22 <serial_read+0x404>
     94a:	8f 81       	ldd	r24, Y+7	; 0x07
     94c:	98 85       	ldd	r25, Y+8	; 0x08
     94e:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <eeprom_read_byte>
     952:	08 2f       	mov	r16, r24
     954:	10 e0       	ldi	r17, 0x00	; 0
     956:	ef 80       	ldd	r14, Y+7	; 0x07
     958:	f8 84       	ldd	r15, Y+8	; 0x08
     95a:	9f ef       	ldi	r25, 0xFF	; 255
     95c:	e9 1a       	sub	r14, r25
     95e:	f9 0a       	sbc	r15, r25
     960:	c7 01       	movw	r24, r14
     962:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <eeprom_read_byte>
     966:	81 36       	cpi	r24, 0x61	; 97
     968:	39 f0       	breq	.+14     	; 0x978 <serial_read+0x35a>
     96a:	ef ef       	ldi	r30, 0xFF	; 255
     96c:	ce 1a       	sub	r12, r30
     96e:	de 0a       	sbc	r13, r30
     970:	f8 86       	std	Y+8, r15	; 0x08
     972:	ef 82       	std	Y+7, r14	; 0x07
     974:	58 01       	movw	r10, r16
     976:	e9 cf       	rjmp	.-46     	; 0x94a <serial_read+0x32c>
     978:	c5 01       	movw	r24, r10
     97a:	2f 81       	ldd	r18, Y+7	; 0x07
     97c:	38 85       	ldd	r19, Y+8	; 0x08
     97e:	2e 5f       	subi	r18, 0xFE	; 254
     980:	3f 4f       	sbci	r19, 0xFF	; 255
     982:	38 87       	std	Y+8, r19	; 0x08
     984:	2f 83       	std	Y+7, r18	; 0x07
     986:	3f ef       	ldi	r19, 0xFF	; 255
     988:	c3 1a       	sub	r12, r19
     98a:	d3 0a       	sbc	r13, r19
     98c:	e1 e0       	ldi	r30, 0x01	; 1
     98e:	ce 16       	cp	r12, r30
     990:	d1 04       	cpc	r13, r1
     992:	71 f4       	brne	.+28     	; 0x9b0 <serial_read+0x392>
     994:	f1 01       	movw	r30, r2
     996:	e6 0d       	add	r30, r6
     998:	f7 1d       	adc	r31, r7
     99a:	ee 0f       	add	r30, r30
     99c:	ff 1f       	adc	r31, r31
     99e:	e0 54       	subi	r30, 0x40	; 64
     9a0:	fd 4f       	sbci	r31, 0xFD	; 253
     9a2:	11 83       	std	Z+1, r17	; 0x01
     9a4:	00 83       	st	Z, r16
     9a6:	93 01       	movw	r18, r6
     9a8:	2f 5f       	subi	r18, 0xFF	; 255
     9aa:	3f 4f       	sbci	r19, 0xFF	; 255
     9ac:	39 01       	movw	r6, r18
     9ae:	1d c0       	rjmp	.+58     	; 0x9ea <serial_read+0x3cc>
     9b0:	32 e0       	ldi	r19, 0x02	; 2
     9b2:	c3 16       	cp	r12, r19
     9b4:	d1 04       	cpc	r13, r1
     9b6:	c9 f4       	brne	.+50     	; 0x9ea <serial_read+0x3cc>
     9b8:	f1 01       	movw	r30, r2
     9ba:	e6 0d       	add	r30, r6
     9bc:	f7 1d       	adc	r31, r7
     9be:	ee 0f       	add	r30, r30
     9c0:	ff 1f       	adc	r31, r31
     9c2:	e0 54       	subi	r30, 0x40	; 64
     9c4:	fd 4f       	sbci	r31, 0xFD	; 253
     9c6:	95 01       	movw	r18, r10
     9c8:	22 0f       	add	r18, r18
     9ca:	33 1f       	adc	r19, r19
     9cc:	88 0f       	add	r24, r24
     9ce:	99 1f       	adc	r25, r25
     9d0:	88 0f       	add	r24, r24
     9d2:	99 1f       	adc	r25, r25
     9d4:	88 0f       	add	r24, r24
     9d6:	99 1f       	adc	r25, r25
     9d8:	82 0f       	add	r24, r18
     9da:	93 1f       	adc	r25, r19
     9dc:	08 0f       	add	r16, r24
     9de:	19 1f       	adc	r17, r25
     9e0:	11 83       	std	Z+1, r17	; 0x01
     9e2:	00 83       	st	Z, r16
     9e4:	c3 01       	movw	r24, r6
     9e6:	01 96       	adiw	r24, 0x01	; 1
     9e8:	3c 01       	movw	r6, r24
     9ea:	92 e0       	ldi	r25, 0x02	; 2
     9ec:	89 0e       	add	r8, r25
     9ee:	91 1c       	adc	r9, r1
     9f0:	84 14       	cp	r8, r4
     9f2:	95 04       	cpc	r9, r5
     9f4:	9c f0       	brlt	.+38     	; 0xa1c <serial_read+0x3fe>
     9f6:	15 c0       	rjmp	.+42     	; 0xa22 <serial_read+0x404>
     9f8:	81 2c       	mov	r8, r1
     9fa:	91 2c       	mov	r9, r1
     9fc:	61 2c       	mov	r6, r1
     9fe:	71 2c       	mov	r7, r1
     a00:	2b 80       	ldd	r2, Y+3	; 0x03
     a02:	3c 80       	ldd	r3, Y+4	; 0x04
     a04:	22 0c       	add	r2, r2
     a06:	33 1c       	adc	r3, r3
     a08:	22 0c       	add	r2, r2
     a0a:	33 1c       	adc	r3, r3
     a0c:	22 0c       	add	r2, r2
     a0e:	33 1c       	adc	r3, r3
     a10:	8b 81       	ldd	r24, Y+3	; 0x03
     a12:	9c 81       	ldd	r25, Y+4	; 0x04
     a14:	88 0f       	add	r24, r24
     a16:	99 1f       	adc	r25, r25
     a18:	28 0e       	add	r2, r24
     a1a:	39 1e       	adc	r3, r25
     a1c:	c9 80       	ldd	r12, Y+1	; 0x01
     a1e:	da 80       	ldd	r13, Y+2	; 0x02
     a20:	94 cf       	rjmp	.-216    	; 0x94a <serial_read+0x32c>
     a22:	eb 81       	ldd	r30, Y+3	; 0x03
     a24:	fc 81       	ldd	r31, Y+4	; 0x04
     a26:	31 96       	adiw	r30, 0x01	; 1
     a28:	fc 83       	std	Y+4, r31	; 0x04
     a2a:	eb 83       	std	Y+3, r30	; 0x03
     a2c:	2d 81       	ldd	r18, Y+5	; 0x05
     a2e:	3e 81       	ldd	r19, Y+6	; 0x06
     a30:	e2 17       	cp	r30, r18
     a32:	f3 07       	cpc	r31, r19
     a34:	09 f0       	breq	.+2      	; 0xa38 <serial_read+0x41a>
     a36:	5b cf       	rjmp	.-330    	; 0x8ee <serial_read+0x2d0>
     a38:	28 96       	adiw	r28, 0x08	; 8
     a3a:	0f b6       	in	r0, 0x3f	; 63
     a3c:	f8 94       	cli
     a3e:	de bf       	out	0x3e, r29	; 62
     a40:	0f be       	out	0x3f, r0	; 63
     a42:	cd bf       	out	0x3d, r28	; 61
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	1f 91       	pop	r17
     a4a:	0f 91       	pop	r16
     a4c:	ff 90       	pop	r15
     a4e:	ef 90       	pop	r14
     a50:	df 90       	pop	r13
     a52:	cf 90       	pop	r12
     a54:	bf 90       	pop	r11
     a56:	af 90       	pop	r10
     a58:	9f 90       	pop	r9
     a5a:	8f 90       	pop	r8
     a5c:	7f 90       	pop	r7
     a5e:	6f 90       	pop	r6
     a60:	5f 90       	pop	r5
     a62:	4f 90       	pop	r4
     a64:	3f 90       	pop	r3
     a66:	2f 90       	pop	r2
     a68:	08 95       	ret

00000a6a <travel>:
     a6a:	6f 92       	push	r6
     a6c:	7f 92       	push	r7
     a6e:	8f 92       	push	r8
     a70:	9f 92       	push	r9
     a72:	af 92       	push	r10
     a74:	bf 92       	push	r11
     a76:	cf 92       	push	r12
     a78:	df 92       	push	r13
     a7a:	ef 92       	push	r14
     a7c:	ff 92       	push	r15
     a7e:	0f 93       	push	r16
     a80:	1f 93       	push	r17
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	5c 01       	movw	r10, r24
     a88:	8c 01       	movw	r16, r24
     a8a:	0f 5f       	subi	r16, 0xFF	; 255
     a8c:	1f 4f       	sbci	r17, 0xFF	; 255
     a8e:	16 95       	lsr	r17
     a90:	07 95       	ror	r16
     a92:	c0 e0       	ldi	r28, 0x00	; 0
     a94:	d0 e0       	ldi	r29, 0x00	; 0
     a96:	0f 2e       	mov	r0, r31
     a98:	f8 e2       	ldi	r31, 0x28	; 40
     a9a:	cf 2e       	mov	r12, r31
     a9c:	dd 24       	eor	r13, r13
     a9e:	d3 94       	inc	r13
     aa0:	f0 2d       	mov	r31, r0
     aa2:	0f 2e       	mov	r0, r31
     aa4:	fa ef       	ldi	r31, 0xFA	; 250
     aa6:	8f 2e       	mov	r8, r31
     aa8:	f0 2d       	mov	r31, r0
     aaa:	0f 2e       	mov	r0, r31
     aac:	fa e2       	ldi	r31, 0x2A	; 42
     aae:	ef 2e       	mov	r14, r31
     ab0:	ff 24       	eor	r15, r15
     ab2:	f3 94       	inc	r15
     ab4:	f0 2d       	mov	r31, r0
     ab6:	99 24       	eor	r9, r9
     ab8:	9a 94       	dec	r9
     aba:	0f 2e       	mov	r0, r31
     abc:	f1 ee       	ldi	r31, 0xE1	; 225
     abe:	6f 2e       	mov	r6, r31
     ac0:	f0 2d       	mov	r31, r0
     ac2:	0f 2e       	mov	r0, r31
     ac4:	f4 ed       	ldi	r31, 0xD4	; 212
     ac6:	7f 2e       	mov	r7, r31
     ac8:	f0 2d       	mov	r31, r0
     aca:	83 e0       	ldi	r24, 0x03	; 3
     acc:	59 db       	rcall	.-2382   	; 0x180 <adc_conv>
     ace:	80 93 15 02 	sts	0x0215, r24
     ad2:	82 e0       	ldi	r24, 0x02	; 2
     ad4:	55 db       	rcall	.-2390   	; 0x180 <adc_conv>
     ad6:	80 93 13 02 	sts	0x0213, r24
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	51 db       	rcall	.-2398   	; 0x180 <adc_conv>
     ade:	80 93 14 02 	sts	0x0214, r24
     ae2:	90 91 13 02 	lds	r25, 0x0213
     ae6:	9b 30       	cpi	r25, 0x0B	; 11
     ae8:	98 f0       	brcs	.+38     	; 0xb10 <travel+0xa6>
     aea:	20 91 15 02 	lds	r18, 0x0215
     aee:	30 e0       	ldi	r19, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a9 01       	movw	r20, r18
     af4:	48 1b       	sub	r20, r24
     af6:	59 0b       	sbc	r21, r25
     af8:	4b 30       	cpi	r20, 0x0B	; 11
     afa:	51 05       	cpc	r21, r1
     afc:	4c f4       	brge	.+18     	; 0xb10 <travel+0xa6>
     afe:	82 1b       	sub	r24, r18
     b00:	93 0b       	sbc	r25, r19
     b02:	0b 97       	sbiw	r24, 0x0b	; 11
     b04:	2c f4       	brge	.+10     	; 0xb10 <travel+0xa6>
     b06:	f6 01       	movw	r30, r12
     b08:	80 82       	st	Z, r8
     b0a:	f7 01       	movw	r30, r14
     b0c:	90 82       	st	Z, r9
     b0e:	1f dc       	rcall	.-1986   	; 0x34e <forward>
     b10:	90 91 15 02 	lds	r25, 0x0215
     b14:	9d 30       	cpi	r25, 0x0D	; 13
     b16:	88 f0       	brcs	.+34     	; 0xb3a <travel+0xd0>
     b18:	80 91 14 02 	lds	r24, 0x0214
     b1c:	8d 30       	cpi	r24, 0x0D	; 13
     b1e:	28 f0       	brcs	.+10     	; 0xb2a <travel+0xc0>
     b20:	20 91 13 02 	lds	r18, 0x0213
     b24:	2d 30       	cpi	r18, 0x0D	; 13
     b26:	b0 f4       	brcc	.+44     	; 0xb54 <travel+0xea>
     b28:	76 c0       	rjmp	.+236    	; 0xc16 <travel+0x1ac>
     b2a:	20 91 13 02 	lds	r18, 0x0213
     b2e:	2d 30       	cpi	r18, 0x0D	; 13
     b30:	08 f4       	brcc	.+2      	; 0xb34 <travel+0xca>
     b32:	71 c0       	rjmp	.+226    	; 0xc16 <travel+0x1ac>
     b34:	8c 30       	cpi	r24, 0x0C	; 12
     b36:	70 f0       	brcs	.+28     	; 0xb54 <travel+0xea>
     b38:	b0 c0       	rjmp	.+352    	; 0xc9a <travel+0x230>
     b3a:	80 91 14 02 	lds	r24, 0x0214
     b3e:	8d 30       	cpi	r24, 0x0D	; 13
     b40:	08 f4       	brcc	.+2      	; 0xb44 <travel+0xda>
     b42:	69 c0       	rjmp	.+210    	; 0xc16 <travel+0x1ac>
     b44:	20 91 13 02 	lds	r18, 0x0213
     b48:	2d 30       	cpi	r18, 0x0D	; 13
     b4a:	08 f4       	brcc	.+2      	; 0xb4e <travel+0xe4>
     b4c:	64 c0       	rjmp	.+200    	; 0xc16 <travel+0x1ac>
     b4e:	9c 30       	cpi	r25, 0x0C	; 12
     b50:	08 f0       	brcs	.+2      	; 0xb54 <travel+0xea>
     b52:	ac c0       	rjmp	.+344    	; 0xcac <travel+0x242>
     b54:	21 96       	adiw	r28, 0x01	; 1
     b56:	c0 17       	cp	r28, r16
     b58:	d1 07       	cpc	r29, r17
     b5a:	60 f0       	brcs	.+24     	; 0xb74 <travel+0x10a>
     b5c:	8a ef       	ldi	r24, 0xFA	; 250
     b5e:	80 93 28 01 	sts	0x0128, r24
     b62:	8f ef       	ldi	r24, 0xFF	; 255
     b64:	80 93 2a 01 	sts	0x012A, r24
     b68:	f2 db       	rcall	.-2076   	; 0x34e <forward>
     b6a:	80 e5       	ldi	r24, 0x50	; 80
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	7b dc       	rcall	.-1802   	; 0x466 <forward_mm>
     b70:	f4 db       	rcall	.-2072   	; 0x35a <stop>
     b72:	a6 c0       	rjmp	.+332    	; 0xcc0 <travel+0x256>
     b74:	ca 15       	cp	r28, r10
     b76:	db 05       	cpc	r29, r11
     b78:	49 f0       	breq	.+18     	; 0xb8c <travel+0x122>
     b7a:	f6 01       	movw	r30, r12
     b7c:	80 82       	st	Z, r8
     b7e:	f7 01       	movw	r30, r14
     b80:	90 82       	st	Z, r9
     b82:	e5 db       	rcall	.-2102   	; 0x34e <forward>
     b84:	80 e5       	ldi	r24, 0x50	; 80
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	6e dc       	rcall	.-1828   	; 0x466 <forward_mm>
     b8a:	9f cf       	rjmp	.-194    	; 0xaca <travel+0x60>
     b8c:	80 91 13 02 	lds	r24, 0x0213
     b90:	8a 30       	cpi	r24, 0x0A	; 10
     b92:	28 f5       	brcc	.+74     	; 0xbde <travel+0x174>
     b94:	20 91 14 02 	lds	r18, 0x0214
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	49 2f       	mov	r20, r25
     b9c:	50 e0       	ldi	r21, 0x00	; 0
     b9e:	b9 01       	movw	r22, r18
     ba0:	64 1b       	sub	r22, r20
     ba2:	75 0b       	sbc	r23, r21
     ba4:	6a 30       	cpi	r22, 0x0A	; 10
     ba6:	71 05       	cpc	r23, r1
     ba8:	64 f0       	brlt	.+24     	; 0xbc2 <travel+0x158>
     baa:	42 1b       	sub	r20, r18
     bac:	53 0b       	sbc	r21, r19
     bae:	4b 30       	cpi	r20, 0x0B	; 11
     bb0:	51 05       	cpc	r21, r1
     bb2:	0c f0       	brlt	.+2      	; 0xbb6 <travel+0x14c>
     bb4:	76 c0       	rjmp	.+236    	; 0xca2 <travel+0x238>
     bb6:	f6 01       	movw	r30, r12
     bb8:	60 82       	st	Z, r6
     bba:	f7 01       	movw	r30, r14
     bbc:	70 82       	st	Z, r7
     bbe:	d9 db       	rcall	.-2126   	; 0x372 <soft_right>
     bc0:	84 cf       	rjmp	.-248    	; 0xaca <travel+0x60>
     bc2:	6b 30       	cpi	r22, 0x0B	; 11
     bc4:	71 05       	cpc	r23, r1
     bc6:	5c f4       	brge	.+22     	; 0xbde <travel+0x174>
     bc8:	42 1b       	sub	r20, r18
     bca:	53 0b       	sbc	r21, r19
     bcc:	4b 30       	cpi	r20, 0x0B	; 11
     bce:	51 05       	cpc	r21, r1
     bd0:	34 f0       	brlt	.+12     	; 0xbde <travel+0x174>
     bd2:	f6 01       	movw	r30, r12
     bd4:	60 82       	st	Z, r6
     bd6:	f7 01       	movw	r30, r14
     bd8:	70 82       	st	Z, r7
     bda:	c8 db       	rcall	.-2160   	; 0x36c <soft_left>
     bdc:	76 cf       	rjmp	.-276    	; 0xaca <travel+0x60>
     bde:	9a 30       	cpi	r25, 0x0A	; 10
     be0:	08 f0       	brcs	.+2      	; 0xbe4 <travel+0x17a>
     be2:	73 cf       	rjmp	.-282    	; 0xaca <travel+0x60>
     be4:	20 91 14 02 	lds	r18, 0x0214
     be8:	2a 30       	cpi	r18, 0x0A	; 10
     bea:	08 f0       	brcs	.+2      	; 0xbee <travel+0x184>
     bec:	6e cf       	rjmp	.-292    	; 0xaca <travel+0x60>
     bee:	8a 30       	cpi	r24, 0x0A	; 10
     bf0:	08 f0       	brcs	.+2      	; 0xbf4 <travel+0x18a>
     bf2:	6b cf       	rjmp	.-298    	; 0xaca <travel+0x60>
     bf4:	92 17       	cp	r25, r18
     bf6:	30 f4       	brcc	.+12     	; 0xc04 <travel+0x19a>
     bf8:	f6 01       	movw	r30, r12
     bfa:	60 82       	st	Z, r6
     bfc:	f7 01       	movw	r30, r14
     bfe:	70 82       	st	Z, r7
     c00:	b8 db       	rcall	.-2192   	; 0x372 <soft_right>
     c02:	63 cf       	rjmp	.-314    	; 0xaca <travel+0x60>
     c04:	29 17       	cp	r18, r25
     c06:	08 f0       	brcs	.+2      	; 0xc0a <travel+0x1a0>
     c08:	60 cf       	rjmp	.-320    	; 0xaca <travel+0x60>
     c0a:	f6 01       	movw	r30, r12
     c0c:	60 82       	st	Z, r6
     c0e:	f7 01       	movw	r30, r14
     c10:	70 82       	st	Z, r7
     c12:	ac db       	rcall	.-2216   	; 0x36c <soft_left>
     c14:	5a cf       	rjmp	.-332    	; 0xaca <travel+0x60>
     c16:	e0 91 13 02 	lds	r30, 0x0213
     c1a:	ea 30       	cpi	r30, 0x0A	; 10
     c1c:	20 f5       	brcc	.+72     	; 0xc66 <travel+0x1fc>
     c1e:	68 2f       	mov	r22, r24
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	29 2f       	mov	r18, r25
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	ab 01       	movw	r20, r22
     c28:	42 1b       	sub	r20, r18
     c2a:	53 0b       	sbc	r21, r19
     c2c:	4a 30       	cpi	r20, 0x0A	; 10
     c2e:	51 05       	cpc	r21, r1
     c30:	64 f0       	brlt	.+24     	; 0xc4a <travel+0x1e0>
     c32:	26 1b       	sub	r18, r22
     c34:	37 0b       	sbc	r19, r23
     c36:	2b 30       	cpi	r18, 0x0B	; 11
     c38:	31 05       	cpc	r19, r1
     c3a:	0c f0       	brlt	.+2      	; 0xc3e <travel+0x1d4>
     c3c:	3d c0       	rjmp	.+122    	; 0xcb8 <travel+0x24e>
     c3e:	f6 01       	movw	r30, r12
     c40:	60 82       	st	Z, r6
     c42:	f7 01       	movw	r30, r14
     c44:	70 82       	st	Z, r7
     c46:	95 db       	rcall	.-2262   	; 0x372 <soft_right>
     c48:	40 cf       	rjmp	.-384    	; 0xaca <travel+0x60>
     c4a:	4b 30       	cpi	r20, 0x0B	; 11
     c4c:	51 05       	cpc	r21, r1
     c4e:	5c f4       	brge	.+22     	; 0xc66 <travel+0x1fc>
     c50:	26 1b       	sub	r18, r22
     c52:	37 0b       	sbc	r19, r23
     c54:	2b 30       	cpi	r18, 0x0B	; 11
     c56:	31 05       	cpc	r19, r1
     c58:	34 f0       	brlt	.+12     	; 0xc66 <travel+0x1fc>
     c5a:	f6 01       	movw	r30, r12
     c5c:	60 82       	st	Z, r6
     c5e:	f7 01       	movw	r30, r14
     c60:	70 82       	st	Z, r7
     c62:	84 db       	rcall	.-2296   	; 0x36c <soft_left>
     c64:	32 cf       	rjmp	.-412    	; 0xaca <travel+0x60>
     c66:	9c 30       	cpi	r25, 0x0C	; 12
     c68:	08 f0       	brcs	.+2      	; 0xc6c <travel+0x202>
     c6a:	2f cf       	rjmp	.-418    	; 0xaca <travel+0x60>
     c6c:	8c 30       	cpi	r24, 0x0C	; 12
     c6e:	08 f0       	brcs	.+2      	; 0xc72 <travel+0x208>
     c70:	2c cf       	rjmp	.-424    	; 0xaca <travel+0x60>
     c72:	ec 30       	cpi	r30, 0x0C	; 12
     c74:	08 f0       	brcs	.+2      	; 0xc78 <travel+0x20e>
     c76:	29 cf       	rjmp	.-430    	; 0xaca <travel+0x60>
     c78:	98 17       	cp	r25, r24
     c7a:	30 f4       	brcc	.+12     	; 0xc88 <travel+0x21e>
     c7c:	f6 01       	movw	r30, r12
     c7e:	60 82       	st	Z, r6
     c80:	f7 01       	movw	r30, r14
     c82:	70 82       	st	Z, r7
     c84:	76 db       	rcall	.-2324   	; 0x372 <soft_right>
     c86:	21 cf       	rjmp	.-446    	; 0xaca <travel+0x60>
     c88:	89 17       	cp	r24, r25
     c8a:	08 f0       	brcs	.+2      	; 0xc8e <travel+0x224>
     c8c:	1e cf       	rjmp	.-452    	; 0xaca <travel+0x60>
     c8e:	f6 01       	movw	r30, r12
     c90:	60 82       	st	Z, r6
     c92:	f7 01       	movw	r30, r14
     c94:	70 82       	st	Z, r7
     c96:	6a db       	rcall	.-2348   	; 0x36c <soft_left>
     c98:	18 cf       	rjmp	.-464    	; 0xaca <travel+0x60>
     c9a:	8d 30       	cpi	r24, 0x0D	; 13
     c9c:	08 f0       	brcs	.+2      	; 0xca0 <travel+0x236>
     c9e:	57 cf       	rjmp	.-338    	; 0xb4e <travel+0xe4>
     ca0:	ba cf       	rjmp	.-140    	; 0xc16 <travel+0x1ac>
     ca2:	6b 30       	cpi	r22, 0x0B	; 11
     ca4:	71 05       	cpc	r23, r1
     ca6:	0c f4       	brge	.+2      	; 0xcaa <travel+0x240>
     ca8:	94 cf       	rjmp	.-216    	; 0xbd2 <travel+0x168>
     caa:	99 cf       	rjmp	.-206    	; 0xbde <travel+0x174>
     cac:	e0 91 13 02 	lds	r30, 0x0213
     cb0:	ea 30       	cpi	r30, 0x0A	; 10
     cb2:	08 f4       	brcc	.+2      	; 0xcb6 <travel+0x24c>
     cb4:	b4 cf       	rjmp	.-152    	; 0xc1e <travel+0x1b4>
     cb6:	09 cf       	rjmp	.-494    	; 0xaca <travel+0x60>
     cb8:	4b 30       	cpi	r20, 0x0B	; 11
     cba:	51 05       	cpc	r21, r1
     cbc:	74 f2       	brlt	.-100    	; 0xc5a <travel+0x1f0>
     cbe:	d3 cf       	rjmp	.-90     	; 0xc66 <travel+0x1fc>
     cc0:	df 91       	pop	r29
     cc2:	cf 91       	pop	r28
     cc4:	1f 91       	pop	r17
     cc6:	0f 91       	pop	r16
     cc8:	ff 90       	pop	r15
     cca:	ef 90       	pop	r14
     ccc:	df 90       	pop	r13
     cce:	cf 90       	pop	r12
     cd0:	bf 90       	pop	r11
     cd2:	af 90       	pop	r10
     cd4:	9f 90       	pop	r9
     cd6:	8f 90       	pop	r8
     cd8:	7f 90       	pop	r7
     cda:	6f 90       	pop	r6
     cdc:	08 95       	ret

00000cde <turn>:
     cde:	0f 93       	push	r16
     ce0:	1f 93       	push	r17
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	ec 01       	movw	r28, r24
     ce8:	8b 01       	movw	r16, r22
     cea:	d5 db       	rcall	.-2134   	; 0x496 <init_devices>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	48 da       	rcall	.-2928   	; 0x180 <adc_conv>
     cf0:	80 93 15 02 	sts	0x0215, r24
     cf4:	82 e0       	ldi	r24, 0x02	; 2
     cf6:	44 da       	rcall	.-2936   	; 0x180 <adc_conv>
     cf8:	80 93 13 02 	sts	0x0213, r24
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	40 da       	rcall	.-2944   	; 0x180 <adc_conv>
     d00:	80 93 14 02 	sts	0x0214, r24
     d04:	80 91 01 02 	lds	r24, 0x0201
     d08:	80 fd       	sbrc	r24, 0
     d0a:	6c c0       	rjmp	.+216    	; 0xde4 <turn+0x106>
     d0c:	80 91 10 02 	lds	r24, 0x0210
     d10:	80 fd       	sbrc	r24, 0
     d12:	68 c0       	rjmp	.+208    	; 0xde4 <turn+0x106>
     d14:	c2 30       	cpi	r28, 0x02	; 2
     d16:	d1 05       	cpc	r29, r1
     d18:	f8 f4       	brcc	.+62     	; 0xd58 <turn+0x7a>
     d1a:	01 30       	cpi	r16, 0x01	; 1
     d1c:	11 05       	cpc	r17, r1
     d1e:	e1 f4       	brne	.+56     	; 0xd58 <turn+0x7a>
     d20:	8a ef       	ldi	r24, 0xFA	; 250
     d22:	80 93 28 01 	sts	0x0128, r24
     d26:	8f ef       	ldi	r24, 0xFF	; 255
     d28:	80 93 2a 01 	sts	0x012A, r24
     d2c:	19 db       	rcall	.-2510   	; 0x360 <left>
     d2e:	86 e9       	ldi	r24, 0x96	; 150
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	22 db       	rcall	.-2492   	; 0x378 <angle_rotate>
     d34:	83 e0       	ldi	r24, 0x03	; 3
     d36:	24 da       	rcall	.-3000   	; 0x180 <adc_conv>
     d38:	80 93 15 02 	sts	0x0215, r24
     d3c:	82 e0       	ldi	r24, 0x02	; 2
     d3e:	20 da       	rcall	.-3008   	; 0x180 <adc_conv>
     d40:	80 93 13 02 	sts	0x0213, r24
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	1c da       	rcall	.-3016   	; 0x180 <adc_conv>
     d48:	80 93 14 02 	sts	0x0214, r24
     d4c:	80 91 13 02 	lds	r24, 0x0213
     d50:	8b 30       	cpi	r24, 0x0B	; 11
     d52:	80 f3       	brcs	.-32     	; 0xd34 <turn+0x56>
     d54:	02 db       	rcall	.-2556   	; 0x35a <stop>
     d56:	61 c0       	rjmp	.+194    	; 0xe1a <turn+0x13c>
     d58:	c1 30       	cpi	r28, 0x01	; 1
     d5a:	d1 05       	cpc	r29, r1
     d5c:	01 f5       	brne	.+64     	; 0xd9e <turn+0xc0>
     d5e:	01 15       	cp	r16, r1
     d60:	11 05       	cpc	r17, r1
     d62:	09 f0       	breq	.+2      	; 0xd66 <turn+0x88>
     d64:	c3 cf       	rjmp	.-122    	; 0xcec <turn+0xe>
     d66:	8a ef       	ldi	r24, 0xFA	; 250
     d68:	80 93 28 01 	sts	0x0128, r24
     d6c:	8f ef       	ldi	r24, 0xFF	; 255
     d6e:	80 93 2a 01 	sts	0x012A, r24
     d72:	f6 da       	rcall	.-2580   	; 0x360 <left>
     d74:	8c e3       	ldi	r24, 0x3C	; 60
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	ff da       	rcall	.-2562   	; 0x378 <angle_rotate>
     d7a:	83 e0       	ldi	r24, 0x03	; 3
     d7c:	01 da       	rcall	.-3070   	; 0x180 <adc_conv>
     d7e:	80 93 15 02 	sts	0x0215, r24
     d82:	82 e0       	ldi	r24, 0x02	; 2
     d84:	fd d9       	rcall	.-3078   	; 0x180 <adc_conv>
     d86:	80 93 13 02 	sts	0x0213, r24
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	f9 d9       	rcall	.-3086   	; 0x180 <adc_conv>
     d8e:	80 93 14 02 	sts	0x0214, r24
     d92:	80 91 13 02 	lds	r24, 0x0213
     d96:	8b 30       	cpi	r24, 0x0B	; 11
     d98:	80 f3       	brcs	.-32     	; 0xd7a <turn+0x9c>
     d9a:	df da       	rcall	.-2626   	; 0x35a <stop>
     d9c:	3e c0       	rjmp	.+124    	; 0xe1a <turn+0x13c>
     d9e:	20 97       	sbiw	r28, 0x00	; 0
     da0:	09 f0       	breq	.+2      	; 0xda4 <turn+0xc6>
     da2:	a4 cf       	rjmp	.-184    	; 0xcec <turn+0xe>
     da4:	01 15       	cp	r16, r1
     da6:	11 05       	cpc	r17, r1
     da8:	09 f0       	breq	.+2      	; 0xdac <turn+0xce>
     daa:	a0 cf       	rjmp	.-192    	; 0xcec <turn+0xe>
     dac:	8a ef       	ldi	r24, 0xFA	; 250
     dae:	80 93 28 01 	sts	0x0128, r24
     db2:	8f ef       	ldi	r24, 0xFF	; 255
     db4:	80 93 2a 01 	sts	0x012A, r24
     db8:	d6 da       	rcall	.-2644   	; 0x366 <right>
     dba:	8c e3       	ldi	r24, 0x3C	; 60
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	dc da       	rcall	.-2632   	; 0x378 <angle_rotate>
     dc0:	83 e0       	ldi	r24, 0x03	; 3
     dc2:	de d9       	rcall	.-3140   	; 0x180 <adc_conv>
     dc4:	80 93 15 02 	sts	0x0215, r24
     dc8:	82 e0       	ldi	r24, 0x02	; 2
     dca:	da d9       	rcall	.-3148   	; 0x180 <adc_conv>
     dcc:	80 93 13 02 	sts	0x0213, r24
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	d6 d9       	rcall	.-3156   	; 0x180 <adc_conv>
     dd4:	80 93 14 02 	sts	0x0214, r24
     dd8:	80 91 13 02 	lds	r24, 0x0213
     ddc:	8b 30       	cpi	r24, 0x0B	; 11
     dde:	80 f3       	brcs	.-32     	; 0xdc0 <turn+0xe2>
     de0:	bc da       	rcall	.-2696   	; 0x35a <stop>
     de2:	1b c0       	rjmp	.+54     	; 0xe1a <turn+0x13c>
     de4:	8a ef       	ldi	r24, 0xFA	; 250
     de6:	80 93 28 01 	sts	0x0128, r24
     dea:	8f ef       	ldi	r24, 0xFF	; 255
     dec:	80 93 2a 01 	sts	0x012A, r24
     df0:	b7 da       	rcall	.-2706   	; 0x360 <left>
     df2:	86 e9       	ldi	r24, 0x96	; 150
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	c0 da       	rcall	.-2688   	; 0x378 <angle_rotate>
     df8:	83 e0       	ldi	r24, 0x03	; 3
     dfa:	c2 d9       	rcall	.-3196   	; 0x180 <adc_conv>
     dfc:	80 93 15 02 	sts	0x0215, r24
     e00:	82 e0       	ldi	r24, 0x02	; 2
     e02:	be d9       	rcall	.-3204   	; 0x180 <adc_conv>
     e04:	80 93 13 02 	sts	0x0213, r24
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	ba d9       	rcall	.-3212   	; 0x180 <adc_conv>
     e0c:	80 93 14 02 	sts	0x0214, r24
     e10:	80 91 13 02 	lds	r24, 0x0213
     e14:	8b 30       	cpi	r24, 0x0B	; 11
     e16:	80 f3       	brcs	.-32     	; 0xdf8 <turn+0x11a>
     e18:	a0 da       	rcall	.-2752   	; 0x35a <stop>
     e1a:	df 91       	pop	r29
     e1c:	cf 91       	pop	r28
     e1e:	1f 91       	pop	r17
     e20:	0f 91       	pop	r16
     e22:	08 95       	ret

00000e24 <travel_till_block>:
     e24:	af 92       	push	r10
     e26:	bf 92       	push	r11
     e28:	cf 92       	push	r12
     e2a:	df 92       	push	r13
     e2c:	ef 92       	push	r14
     e2e:	ff 92       	push	r15
     e30:	0f 93       	push	r16
     e32:	1f 93       	push	r17
     e34:	cf 93       	push	r28
     e36:	df 93       	push	r29
     e38:	ec 01       	movw	r28, r24
     e3a:	82 30       	cpi	r24, 0x02	; 2
     e3c:	91 05       	cpc	r25, r1
     e3e:	10 f0       	brcs	.+4      	; 0xe44 <travel_till_block+0x20>
     e40:	01 97       	sbiw	r24, 0x01	; 1
     e42:	13 de       	rcall	.-986    	; 0xa6a <travel>
     e44:	8a ef       	ldi	r24, 0xFA	; 250
     e46:	80 93 28 01 	sts	0x0128, r24
     e4a:	8f ef       	ldi	r24, 0xFF	; 255
     e4c:	80 93 2a 01 	sts	0x012A, r24
     e50:	7e da       	rcall	.-2820   	; 0x34e <forward>
     e52:	81 e4       	ldi	r24, 0x41	; 65
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	07 db       	rcall	.-2546   	; 0x466 <forward_mm>
     e58:	0f 2e       	mov	r0, r31
     e5a:	f8 e2       	ldi	r31, 0x28	; 40
     e5c:	ef 2e       	mov	r14, r31
     e5e:	ff 24       	eor	r15, r15
     e60:	f3 94       	inc	r15
     e62:	f0 2d       	mov	r31, r0
     e64:	0f 2e       	mov	r0, r31
     e66:	f1 ee       	ldi	r31, 0xE1	; 225
     e68:	cf 2e       	mov	r12, r31
     e6a:	f0 2d       	mov	r31, r0
     e6c:	0a e2       	ldi	r16, 0x2A	; 42
     e6e:	11 e0       	ldi	r17, 0x01	; 1
     e70:	0f 2e       	mov	r0, r31
     e72:	f4 ed       	ldi	r31, 0xD4	; 212
     e74:	df 2e       	mov	r13, r31
     e76:	f0 2d       	mov	r31, r0
     e78:	0f 2e       	mov	r0, r31
     e7a:	fa ef       	ldi	r31, 0xFA	; 250
     e7c:	af 2e       	mov	r10, r31
     e7e:	f0 2d       	mov	r31, r0
     e80:	bb 24       	eor	r11, r11
     e82:	ba 94       	dec	r11
     e84:	83 e0       	ldi	r24, 0x03	; 3
     e86:	7c d9       	rcall	.-3336   	; 0x180 <adc_conv>
     e88:	80 93 15 02 	sts	0x0215, r24
     e8c:	82 e0       	ldi	r24, 0x02	; 2
     e8e:	78 d9       	rcall	.-3344   	; 0x180 <adc_conv>
     e90:	80 93 13 02 	sts	0x0213, r24
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	74 d9       	rcall	.-3352   	; 0x180 <adc_conv>
     e98:	80 93 14 02 	sts	0x0214, r24
     e9c:	84 e0       	ldi	r24, 0x04	; 4
     e9e:	70 d9       	rcall	.-3360   	; 0x180 <adc_conv>
     ea0:	80 93 12 02 	sts	0x0212, r24
     ea4:	8c 38       	cpi	r24, 0x8C	; 140
     ea6:	f0 f4       	brcc	.+60     	; 0xee4 <travel_till_block+0xc0>
     ea8:	21 97       	sbiw	r28, 0x01	; 1
     eaa:	79 f4       	brne	.+30     	; 0xeca <travel_till_block+0xa6>
     eac:	8a ef       	ldi	r24, 0xFA	; 250
     eae:	80 93 28 01 	sts	0x0128, r24
     eb2:	8f ef       	ldi	r24, 0xFF	; 255
     eb4:	80 93 2a 01 	sts	0x012A, r24
     eb8:	4a da       	rcall	.-2924   	; 0x34e <forward>
     eba:	84 e1       	ldi	r24, 0x14	; 20
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	d3 da       	rcall	.-2650   	; 0x466 <forward_mm>
     ec0:	49 da       	rcall	.-2926   	; 0x354 <backward>
     ec2:	82 e3       	ldi	r24, 0x32	; 50
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	d8 da       	rcall	.-2640   	; 0x478 <backward_mm>
     ec8:	71 c0       	rjmp	.+226    	; 0xfac <travel_till_block+0x188>
     eca:	8a ef       	ldi	r24, 0xFA	; 250
     ecc:	80 93 28 01 	sts	0x0128, r24
     ed0:	8f ef       	ldi	r24, 0xFF	; 255
     ed2:	80 93 2a 01 	sts	0x012A, r24
     ed6:	41 da       	rcall	.-2942   	; 0x35a <stop>
     ed8:	3d da       	rcall	.-2950   	; 0x354 <backward>
     eda:	84 e1       	ldi	r24, 0x14	; 20
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	cc da       	rcall	.-2664   	; 0x478 <backward_mm>
     ee0:	d4 da       	rcall	.-2648   	; 0x48a <turn_off_ir_proxi_sensors>
     ee2:	64 c0       	rjmp	.+200    	; 0xfac <travel_till_block+0x188>
     ee4:	80 91 13 02 	lds	r24, 0x0213
     ee8:	8b 30       	cpi	r24, 0x0B	; 11
     eea:	b8 f0       	brcs	.+46     	; 0xf1a <travel_till_block+0xf6>
     eec:	40 91 15 02 	lds	r20, 0x0215
     ef0:	50 e0       	ldi	r21, 0x00	; 0
     ef2:	20 91 14 02 	lds	r18, 0x0214
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	ba 01       	movw	r22, r20
     efa:	62 1b       	sub	r22, r18
     efc:	73 0b       	sbc	r23, r19
     efe:	6b 30       	cpi	r22, 0x0B	; 11
     f00:	71 05       	cpc	r23, r1
     f02:	5c f4       	brge	.+22     	; 0xf1a <travel_till_block+0xf6>
     f04:	24 1b       	sub	r18, r20
     f06:	35 0b       	sbc	r19, r21
     f08:	2b 30       	cpi	r18, 0x0B	; 11
     f0a:	31 05       	cpc	r19, r1
     f0c:	34 f4       	brge	.+12     	; 0xf1a <travel_till_block+0xf6>
     f0e:	f7 01       	movw	r30, r14
     f10:	a0 82       	st	Z, r10
     f12:	f8 01       	movw	r30, r16
     f14:	b0 82       	st	Z, r11
     f16:	1b da       	rcall	.-3018   	; 0x34e <forward>
     f18:	b5 cf       	rjmp	.-150    	; 0xe84 <travel_till_block+0x60>
     f1a:	8a 30       	cpi	r24, 0x0A	; 10
     f1c:	28 f5       	brcc	.+74     	; 0xf68 <travel_till_block+0x144>
     f1e:	40 91 14 02 	lds	r20, 0x0214
     f22:	50 e0       	ldi	r21, 0x00	; 0
     f24:	20 91 15 02 	lds	r18, 0x0215
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	ba 01       	movw	r22, r20
     f2c:	62 1b       	sub	r22, r18
     f2e:	73 0b       	sbc	r23, r19
     f30:	6a 30       	cpi	r22, 0x0A	; 10
     f32:	71 05       	cpc	r23, r1
     f34:	5c f0       	brlt	.+22     	; 0xf4c <travel_till_block+0x128>
     f36:	24 1b       	sub	r18, r20
     f38:	35 0b       	sbc	r19, r21
     f3a:	2b 30       	cpi	r18, 0x0B	; 11
     f3c:	31 05       	cpc	r19, r1
     f3e:	94 f5       	brge	.+100    	; 0xfa4 <travel_till_block+0x180>
     f40:	f7 01       	movw	r30, r14
     f42:	c0 82       	st	Z, r12
     f44:	f8 01       	movw	r30, r16
     f46:	d0 82       	st	Z, r13
     f48:	14 da       	rcall	.-3032   	; 0x372 <soft_right>
     f4a:	9c cf       	rjmp	.-200    	; 0xe84 <travel_till_block+0x60>
     f4c:	6b 30       	cpi	r22, 0x0B	; 11
     f4e:	71 05       	cpc	r23, r1
     f50:	5c f4       	brge	.+22     	; 0xf68 <travel_till_block+0x144>
     f52:	24 1b       	sub	r18, r20
     f54:	35 0b       	sbc	r19, r21
     f56:	2b 30       	cpi	r18, 0x0B	; 11
     f58:	31 05       	cpc	r19, r1
     f5a:	34 f0       	brlt	.+12     	; 0xf68 <travel_till_block+0x144>
     f5c:	f7 01       	movw	r30, r14
     f5e:	c0 82       	st	Z, r12
     f60:	f8 01       	movw	r30, r16
     f62:	d0 82       	st	Z, r13
     f64:	03 da       	rcall	.-3066   	; 0x36c <soft_left>
     f66:	8e cf       	rjmp	.-228    	; 0xe84 <travel_till_block+0x60>
     f68:	90 91 15 02 	lds	r25, 0x0215
     f6c:	9c 30       	cpi	r25, 0x0C	; 12
     f6e:	08 f0       	brcs	.+2      	; 0xf72 <travel_till_block+0x14e>
     f70:	89 cf       	rjmp	.-238    	; 0xe84 <travel_till_block+0x60>
     f72:	20 91 14 02 	lds	r18, 0x0214
     f76:	2c 30       	cpi	r18, 0x0C	; 12
     f78:	08 f0       	brcs	.+2      	; 0xf7c <travel_till_block+0x158>
     f7a:	84 cf       	rjmp	.-248    	; 0xe84 <travel_till_block+0x60>
     f7c:	8c 30       	cpi	r24, 0x0C	; 12
     f7e:	08 f0       	brcs	.+2      	; 0xf82 <travel_till_block+0x15e>
     f80:	81 cf       	rjmp	.-254    	; 0xe84 <travel_till_block+0x60>
     f82:	92 17       	cp	r25, r18
     f84:	30 f4       	brcc	.+12     	; 0xf92 <travel_till_block+0x16e>
     f86:	f7 01       	movw	r30, r14
     f88:	c0 82       	st	Z, r12
     f8a:	f8 01       	movw	r30, r16
     f8c:	d0 82       	st	Z, r13
     f8e:	f1 d9       	rcall	.-3102   	; 0x372 <soft_right>
     f90:	79 cf       	rjmp	.-270    	; 0xe84 <travel_till_block+0x60>
     f92:	29 17       	cp	r18, r25
     f94:	08 f0       	brcs	.+2      	; 0xf98 <travel_till_block+0x174>
     f96:	76 cf       	rjmp	.-276    	; 0xe84 <travel_till_block+0x60>
     f98:	f7 01       	movw	r30, r14
     f9a:	c0 82       	st	Z, r12
     f9c:	f8 01       	movw	r30, r16
     f9e:	d0 82       	st	Z, r13
     fa0:	e5 d9       	rcall	.-3126   	; 0x36c <soft_left>
     fa2:	70 cf       	rjmp	.-288    	; 0xe84 <travel_till_block+0x60>
     fa4:	6b 30       	cpi	r22, 0x0B	; 11
     fa6:	71 05       	cpc	r23, r1
     fa8:	cc f2       	brlt	.-78     	; 0xf5c <travel_till_block+0x138>
     faa:	de cf       	rjmp	.-68     	; 0xf68 <travel_till_block+0x144>
     fac:	df 91       	pop	r29
     fae:	cf 91       	pop	r28
     fb0:	1f 91       	pop	r17
     fb2:	0f 91       	pop	r16
     fb4:	ff 90       	pop	r15
     fb6:	ef 90       	pop	r14
     fb8:	df 90       	pop	r13
     fba:	cf 90       	pop	r12
     fbc:	bf 90       	pop	r11
     fbe:	af 90       	pop	r10
     fc0:	08 95       	ret

00000fc2 <servo_3>:
 */
void servo_3(unsigned char degrees)
{
 float PositionServo = 0;
 PositionServo = ((float)degrees / 1.86) + 35.0;
 OCR1CH = 0x00;
     fc2:	10 92 8d 00 	sts	0x008D, r1
 * Example Call:  servo_3(50)
 */
void servo_3(unsigned char degrees)
{
 float PositionServo = 0;
 PositionServo = ((float)degrees / 1.86) + 35.0;
     fc6:	68 2f       	mov	r22, r24
     fc8:	70 e0       	ldi	r23, 0x00	; 0
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	0e 94 a7 10 	call	0x214e	; 0x214e <__floatunsisf>
     fd2:	2b e7       	ldi	r18, 0x7B	; 123
     fd4:	34 e1       	ldi	r19, 0x14	; 20
     fd6:	4e ee       	ldi	r20, 0xEE	; 238
     fd8:	5f e3       	ldi	r21, 0x3F	; 63
     fda:	0e 94 13 10 	call	0x2026	; 0x2026 <__divsf3>
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	4c e0       	ldi	r20, 0x0C	; 12
     fe4:	52 e4       	ldi	r21, 0x42	; 66
     fe6:	bb d7       	rcall	.+3958   	; 0x1f5e <__addsf3>
 OCR1CH = 0x00;
 OCR1CL = (unsigned char) PositionServo;
     fe8:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <__fixunssfsi>
     fec:	60 93 8c 00 	sts	0x008C, r22
     ff0:	08 95       	ret

00000ff2 <servo_1_free>:
//and make them free by giving 100% duty cycle at the PWM. This function can be used to 
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) //makes servo 1 free rotating
{
 OCR1AH = 0x03; 
     ff2:	83 e0       	ldi	r24, 0x03	; 3
     ff4:	80 93 89 00 	sts	0x0089, r24
 OCR1AL = 0xFF; //Servo 1 off
     ff8:	8f ef       	ldi	r24, 0xFF	; 255
     ffa:	80 93 88 00 	sts	0x0088, r24
     ffe:	08 95       	ret

00001000 <servo_2_free>:
}

void servo_2_free (void) //makes servo 2 free rotating
{
 OCR1BH = 0x03;
    1000:	83 e0       	ldi	r24, 0x03	; 3
    1002:	80 93 8b 00 	sts	0x008B, r24
 OCR1BL = 0xFF; //Servo 2 off
    1006:	8f ef       	ldi	r24, 0xFF	; 255
    1008:	80 93 8a 00 	sts	0x008A, r24
    100c:	08 95       	ret

0000100e <servo_3_free>:
}

void servo_3_free (void) //makes servo 3 free rotating
{
 OCR1CH = 0x03;
    100e:	83 e0       	ldi	r24, 0x03	; 3
    1010:	80 93 8d 00 	sts	0x008D, r24
 OCR1CL = 0xFF; //Servo 3 off
    1014:	8f ef       	ldi	r24, 0xFF	; 255
    1016:	80 93 8c 00 	sts	0x008C, r24
    101a:	08 95       	ret

0000101c <pick_block>:
 * Output :       NONE
 * Logic:         Function to pick the block & drop it in the bucket 
 * Example Call:  pick_block ()
 */
void pick_block (void)
{
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
 */
void servo_2(unsigned char degrees)
{
 float PositionTiltServo = 0;
 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
 OCR1BH = 0x00;
    1020:	8b e8       	ldi	r24, 0x8B	; 139
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	fc 01       	movw	r30, r24
    1026:	10 82       	st	Z, r1
 OCR1BL = (unsigned char) PositionTiltServo;
    1028:	ca e8       	ldi	r28, 0x8A	; 138
    102a:	d0 e0       	ldi	r29, 0x00	; 0
    102c:	2e e8       	ldi	r18, 0x8E	; 142
    102e:	28 83       	st	Y, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1030:	ff ef       	ldi	r31, 0xFF	; 255
    1032:	2f ef       	ldi	r18, 0xFF	; 255
    1034:	3c e2       	ldi	r19, 0x2C	; 44
    1036:	f1 50       	subi	r31, 0x01	; 1
    1038:	20 40       	sbci	r18, 0x00	; 0
    103a:	30 40       	sbci	r19, 0x00	; 0
    103c:	e1 f7       	brne	.-8      	; 0x1036 <pick_block+0x1a>
    103e:	00 c0       	rjmp	.+0      	; 0x1040 <pick_block+0x24>
    1040:	00 00       	nop

void servo_1(unsigned char degrees)  
{
  float PositionPanServo = 0;
  PositionPanServo = ((float)degrees / 1.86) + 35.0;
  OCR1AH = 0x00;
    1042:	a9 e8       	ldi	r26, 0x89	; 137
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	1c 92       	st	X, r1
  OCR1AL = (unsigned char) PositionPanServo;
    1048:	68 e8       	ldi	r22, 0x88	; 136
    104a:	70 e0       	ldi	r23, 0x00	; 0
    104c:	20 e3       	ldi	r18, 0x30	; 48
    104e:	fb 01       	movw	r30, r22
    1050:	20 83       	st	Z, r18
    1052:	ff ef       	ldi	r31, 0xFF	; 255
    1054:	2f ef       	ldi	r18, 0xFF	; 255
    1056:	3c e2       	ldi	r19, 0x2C	; 44
    1058:	f1 50       	subi	r31, 0x01	; 1
    105a:	20 40       	sbci	r18, 0x00	; 0
    105c:	30 40       	sbci	r19, 0x00	; 0
    105e:	e1 f7       	brne	.-8      	; 0x1058 <pick_block+0x3c>
    1060:	00 c0       	rjmp	.+0      	; 0x1062 <pick_block+0x46>
    1062:	00 00       	nop
 */
void servo_2(unsigned char degrees)
{
 float PositionTiltServo = 0;
 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
 OCR1BH = 0x00;
    1064:	fc 01       	movw	r30, r24
    1066:	10 82       	st	Z, r1
 OCR1BL = (unsigned char) PositionTiltServo;
    1068:	83 e2       	ldi	r24, 0x23	; 35
    106a:	88 83       	st	Y, r24
    106c:	ff ef       	ldi	r31, 0xFF	; 255
    106e:	2f ef       	ldi	r18, 0xFF	; 255
    1070:	3c e2       	ldi	r19, 0x2C	; 44
    1072:	f1 50       	subi	r31, 0x01	; 1
    1074:	20 40       	sbci	r18, 0x00	; 0
    1076:	30 40       	sbci	r19, 0x00	; 0
    1078:	e1 f7       	brne	.-8      	; 0x1072 <pick_block+0x56>
    107a:	00 c0       	rjmp	.+0      	; 0x107c <pick_block+0x60>
    107c:	00 00       	nop

void servo_1(unsigned char degrees)  
{
  float PositionPanServo = 0;
  PositionPanServo = ((float)degrees / 1.86) + 35.0;
  OCR1AH = 0x00;
    107e:	1c 92       	st	X, r1
  OCR1AL = (unsigned char) PositionPanServo;
    1080:	88 e4       	ldi	r24, 0x48	; 72
    1082:	fb 01       	movw	r30, r22
    1084:	80 83       	st	Z, r24
    1086:	ff ef       	ldi	r31, 0xFF	; 255
    1088:	2f e7       	ldi	r18, 0x7F	; 127
    108a:	36 e1       	ldi	r19, 0x16	; 22
    108c:	f1 50       	subi	r31, 0x01	; 1
    108e:	20 40       	sbci	r18, 0x00	; 0
    1090:	30 40       	sbci	r19, 0x00	; 0
    1092:	e1 f7       	brne	.-8      	; 0x108c <pick_block+0x70>
    1094:	00 c0       	rjmp	.+0      	; 0x1096 <pick_block+0x7a>
    1096:	00 00       	nop
	_delay_ms(1000);
	servo_2(0);
	_delay_ms(1000);
	servo_1(70);
	_delay_ms(500);
	servo_1_free();
    1098:	ac df       	rcall	.-168    	; 0xff2 <servo_1_free>
	servo_2_free();
    109a:	b2 df       	rcall	.-156    	; 0x1000 <servo_2_free>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    109c:	8a ef       	ldi	r24, 0xFA	; 250
    109e:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    10a2:	8f ef       	ldi	r24, 0xFF	; 255
    10a4:	80 93 2a 01 	sts	0x012A, r24
	velocity(250,255);
	//travel(1);
	//if(dx ==0 && dy ==0)
	forward();
    10a8:	52 d9       	rcall	.-3420   	; 0x34e <forward>
	forward_mm(100);      // bot is moved in forward direction by 10 cm so that it doesn't displace any block while taking a 180 degree turn.
    10aa:	84 e6       	ldi	r24, 0x64	; 100
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	db d9       	rcall	.-3146   	; 0x466 <forward_mm>
}
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	08 95       	ret

000010b6 <drop_bucket>:
 * Logic:         Function to open the bucket & to place the blocks in the required D2 cell.
 * Example Call:  drop_bucket ()
 */

void drop_bucket (void)
{ 
    10b6:	cf 93       	push	r28
    10b8:	c8 e7       	ldi	r28, 0x78	; 120
	 for (int i=120;i>=0;i-=30)
	{
		servo_3(i);
    10ba:	8c 2f       	mov	r24, r28
    10bc:	82 df       	rcall	.-252    	; 0xfc2 <servo_3>
    10be:	2f ef       	ldi	r18, 0xFF	; 255
    10c0:	8f eb       	ldi	r24, 0xBF	; 191
    10c2:	96 e0       	ldi	r25, 0x06	; 6
    10c4:	21 50       	subi	r18, 0x01	; 1
    10c6:	80 40       	sbci	r24, 0x00	; 0
    10c8:	90 40       	sbci	r25, 0x00	; 0
    10ca:	e1 f7       	brne	.-8      	; 0x10c4 <drop_bucket+0xe>
    10cc:	00 c0       	rjmp	.+0      	; 0x10ce <drop_bucket+0x18>
    10ce:	00 00       	nop
    10d0:	ce 51       	subi	r28, 0x1E	; 30
 * Example Call:  drop_bucket ()
 */

void drop_bucket (void)
{ 
	 for (int i=120;i>=0;i-=30)
    10d2:	c2 3e       	cpi	r28, 0xE2	; 226
    10d4:	91 f7       	brne	.-28     	; 0x10ba <drop_bucket+0x4>
	{
		servo_3(i);
		_delay_ms(150);
	}
	servo_3(0);
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	74 df       	rcall	.-280    	; 0xfc2 <servo_3>
    10da:	2f ef       	ldi	r18, 0xFF	; 255
    10dc:	8f ef       	ldi	r24, 0xFF	; 255
    10de:	9c e2       	ldi	r25, 0x2C	; 44
    10e0:	21 50       	subi	r18, 0x01	; 1
    10e2:	80 40       	sbci	r24, 0x00	; 0
    10e4:	90 40       	sbci	r25, 0x00	; 0
    10e6:	e1 f7       	brne	.-8      	; 0x10e0 <drop_bucket+0x2a>
    10e8:	00 c0       	rjmp	.+0      	; 0x10ea <drop_bucket+0x34>
    10ea:	00 00       	nop
	_delay_ms(1000);
}
    10ec:	cf 91       	pop	r28
    10ee:	08 95       	ret

000010f0 <up_bucket>:
 * Logic:         Function to close the bucket after placing the blocks in the required D2 cell.
 * Example Call:  up_bucket ()
 */
void up_bucket(void)
{    
	servo_3(140);
    10f0:	8c e8       	ldi	r24, 0x8C	; 140
    10f2:	67 df       	rcall	.-306    	; 0xfc2 <servo_3>
    10f4:	2f ef       	ldi	r18, 0xFF	; 255
    10f6:	8f ef       	ldi	r24, 0xFF	; 255
    10f8:	91 e1       	ldi	r25, 0x11	; 17
    10fa:	21 50       	subi	r18, 0x01	; 1
    10fc:	80 40       	sbci	r24, 0x00	; 0
    10fe:	90 40       	sbci	r25, 0x00	; 0
    1100:	e1 f7       	brne	.-8      	; 0x10fa <up_bucket+0xa>
    1102:	00 c0       	rjmp	.+0      	; 0x1104 <up_bucket+0x14>
    1104:	00 00       	nop
	_delay_ms(400);
	servo_3_free();
    1106:	83 df       	rcall	.-250    	; 0x100e <servo_3_free>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1108:	8a ef       	ldi	r24, 0xFA	; 250
    110a:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    110e:	8f ef       	ldi	r24, 0xFF	; 255
    1110:	80 93 2a 01 	sts	0x012A, r24
	velocity(250,255);
	left();
    1114:	25 d9       	rcall	.-3510   	; 0x360 <left>
	angle_rotate(150);
    1116:	86 e9       	ldi	r24, 0x96	; 150
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	2e d9       	rcall	.-3492   	; 0x378 <angle_rotate>
	while (1)
	{
		Left_white_line = adc_conv(3);         //Getting data of Left WL Sensor
    111c:	83 e0       	ldi	r24, 0x03	; 3
    111e:	30 d8       	rcall	.-4000   	; 0x180 <adc_conv>
    1120:	80 93 15 02 	sts	0x0215, r24
		Center_white_line = adc_conv(2);       //getting data of Center WL Sensor
    1124:	82 e0       	ldi	r24, 0x02	; 2
    1126:	2c d8       	rcall	.-4008   	; 0x180 <adc_conv>
    1128:	80 93 13 02 	sts	0x0213, r24
		Right_white_line = adc_conv(1);        //geting data of Right WL Sensor
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	28 d8       	rcall	.-4016   	; 0x180 <adc_conv>
    1130:	80 93 14 02 	sts	0x0214, r24
		if(Center_white_line>10)
    1134:	80 91 13 02 	lds	r24, 0x0213
    1138:	8b 30       	cpi	r24, 0x0B	; 11
    113a:	80 f3       	brcs	.-32     	; 0x111c <up_bucket+0x2c>
		{
			stop();
    113c:	0e d9       	rcall	.-3556   	; 0x35a <stop>
			break;
		}
	}
	//forward();
	//forward_mm(100);
	if(head=='W')
    113e:	80 91 00 02 	lds	r24, 0x0200
    1142:	87 35       	cpi	r24, 0x57	; 87
    1144:	11 f0       	breq	.+4      	; 0x114a <up_bucket+0x5a>
		head='E';	
	if(head=='E')
    1146:	85 34       	cpi	r24, 0x45	; 69
    1148:	21 f4       	brne	.+8      	; 0x1152 <up_bucket+0x62>
		head='W';
    114a:	87 e5       	ldi	r24, 0x57	; 87
    114c:	80 93 00 02 	sts	0x0200, r24
    1150:	08 95       	ret
	if(head=='S')
    1152:	83 35       	cpi	r24, 0x53	; 83
    1154:	21 f0       	breq	.+8      	; 0x115e <up_bucket+0x6e>
		head='N';
	if(head=='N')
    1156:	80 91 00 02 	lds	r24, 0x0200
    115a:	8e 34       	cpi	r24, 0x4E	; 78
    115c:	19 f4       	brne	.+6      	; 0x1164 <up_bucket+0x74>
		head='S';		
    115e:	83 e5       	ldi	r24, 0x53	; 83
    1160:	80 93 00 02 	sts	0x0200, r24
    1164:	08 95       	ret

00001166 <travel_till_bucket>:
 * Logic:         This function is used for traversing the bot till it get reached to the required node of D2 cell where all the blocks are to be placed.
 * Example Call:  travel_till_bucket(2)
 */
void travel_till_bucket(unsigned int b)
{
	if(b>1)
    1166:	82 30       	cpi	r24, 0x02	; 2
    1168:	91 05       	cpc	r25, r1
    116a:	10 f0       	brcs	.+4      	; 0x1170 <travel_till_bucket+0xa>
	travel(b-1);
    116c:	01 97       	sbiw	r24, 0x01	; 1
    116e:	7d dc       	rcall	.-1798   	; 0xa6a <travel>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1170:	85 ef       	ldi	r24, 0xF5	; 245
    1172:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    1176:	8a ef       	ldi	r24, 0xFA	; 250
    1178:	80 93 2a 01 	sts	0x012A, r24
	velocity(245,250);
	forward();
    117c:	e8 d8       	rcall	.-3632   	; 0x34e <forward>
	forward_mm(140);  // After reaching at the required node of D2 cell in which blocks are to be placed, bot is moved 14cm forward so that when blocks fall out of bucket,it                        doesn't fall out of the respective D2 cell
    117e:	8c e8       	ldi	r24, 0x8C	; 140
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	71 d9       	rcall	.-3358   	; 0x466 <forward_mm>
	stop();
    1184:	ea d8       	rcall	.-3628   	; 0x35a <stop>
	drop_bucket();
    1186:	97 df       	rcall	.-210    	; 0x10b6 <drop_bucket>
	//forward();
	//forward_mm(170);   // bot is moved in forward direction by 17 cm in order to ensure that when bucket get closed ,it donot take the block again in the bucket & ensures the                       proper placement of blocks
	travel(1);
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	6e dc       	rcall	.-1828   	; 0xa6a <travel>
	forward();
    118e:	df d8       	rcall	.-3650   	; 0x34e <forward>
	forward_mm(40);	
    1190:	88 e2       	ldi	r24, 0x28	; 40
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	68 d9       	rcall	.-3376   	; 0x466 <forward_mm>
	up_bucket();
    1196:	ac cf       	rjmp	.-168    	; 0x10f0 <up_bucket>
    1198:	08 95       	ret

0000119a <Calculate_dx_dy>:
*/
/*function define*/
void Calculate_dx_dy()
{
 int side_x=0,side_y=0;
 if(C_N_D1_x==STx && C_N_D1_y-STy==1)
    119a:	80 91 40 02 	lds	r24, 0x0240
    119e:	90 91 41 02 	lds	r25, 0x0241
    11a2:	40 91 01 02 	lds	r20, 0x0201
    11a6:	50 91 02 02 	lds	r21, 0x0202
    11aa:	84 17       	cp	r24, r20
    11ac:	95 07       	cpc	r25, r21
    11ae:	81 f4       	brne	.+32     	; 0x11d0 <Calculate_dx_dy+0x36>
    11b0:	20 91 23 02 	lds	r18, 0x0223
    11b4:	30 91 24 02 	lds	r19, 0x0224
    11b8:	60 91 10 02 	lds	r22, 0x0210
    11bc:	70 91 11 02 	lds	r23, 0x0211
    11c0:	f9 01       	movw	r30, r18
    11c2:	e6 1b       	sub	r30, r22
    11c4:	f7 0b       	sbc	r31, r23
    11c6:	31 97       	sbiw	r30, 0x01	; 1
    11c8:	f1 f5       	brne	.+124    	; 0x1246 <Calculate_dx_dy+0xac>
 {
	 side_x=C_N_D1_x;
	 side_y=(C_N_D1_y-1);
    11ca:	21 50       	subi	r18, 0x01	; 1
    11cc:	31 09       	sbc	r19, r1
    11ce:	2a c0       	rjmp	.+84     	; 0x1224 <Calculate_dx_dy+0x8a>
 }
 else if(C_N_D1_y==STy && C_N_D1_x-STx==1)
    11d0:	20 91 23 02 	lds	r18, 0x0223
    11d4:	30 91 24 02 	lds	r19, 0x0224
    11d8:	60 91 10 02 	lds	r22, 0x0210
    11dc:	70 91 11 02 	lds	r23, 0x0211
    11e0:	26 17       	cp	r18, r22
    11e2:	37 07       	cpc	r19, r23
    11e4:	41 f4       	brne	.+16     	; 0x11f6 <Calculate_dx_dy+0x5c>
    11e6:	bc 01       	movw	r22, r24
    11e8:	64 1b       	sub	r22, r20
    11ea:	75 0b       	sbc	r23, r21
    11ec:	61 30       	cpi	r22, 0x01	; 1
    11ee:	71 05       	cpc	r23, r1
    11f0:	71 f5       	brne	.+92     	; 0x124e <Calculate_dx_dy+0xb4>
 {
	 side_x=(C_N_D1_x-1);
    11f2:	01 97       	sbiw	r24, 0x01	; 1
	 side_y=C_N_D1_y;
    11f4:	17 c0       	rjmp	.+46     	; 0x1224 <Calculate_dx_dy+0x8a>
 }
 else if (C_N_D1_x<=STx)
    11f6:	48 17       	cp	r20, r24
    11f8:	59 07       	cpc	r21, r25
    11fa:	44 f0       	brlt	.+16     	; 0x120c <Calculate_dx_dy+0x72>
 {
	  if (C_N_D1_y>STy)
    11fc:	62 17       	cp	r22, r18
    11fe:	73 07       	cpc	r23, r19
    1200:	14 f4       	brge	.+4      	; 0x1206 <Calculate_dx_dy+0x6c>
	  {
	   side_x=(C_N_D1_x+1);
    1202:	01 96       	adiw	r24, 0x01	; 1
    1204:	0f c0       	rjmp	.+30     	; 0x1224 <Calculate_dx_dy+0x8a>
	   side_y=C_N_D1_y;
	  }
	  else
	  {
	   side_x=C_N_D1_x;
	   side_y=(C_N_D1_y)+1;   
    1206:	2f 5f       	subi	r18, 0xFF	; 255
    1208:	3f 4f       	sbci	r19, 0xFF	; 255
    120a:	0c c0       	rjmp	.+24     	; 0x1224 <Calculate_dx_dy+0x8a>
	  }
 }
 else
 {
	  if (C_N_D1_x<2)
    120c:	82 30       	cpi	r24, 0x02	; 2
    120e:	91 05       	cpc	r25, r1
    1210:	14 f4       	brge	.+4      	; 0x1216 <Calculate_dx_dy+0x7c>
	  {
	   side_x=(C_N_D1_x+1);
    1212:	01 96       	adiw	r24, 0x01	; 1
    1214:	07 c0       	rjmp	.+14     	; 0x1224 <Calculate_dx_dy+0x8a>
	   side_y=C_N_D1_y;
	  }
	  else if(C_N_D1_y<=STy)
    1216:	62 17       	cp	r22, r18
    1218:	73 07       	cpc	r23, r19
    121a:	14 f0       	brlt	.+4      	; 0x1220 <Calculate_dx_dy+0x86>
	  {
		  side_x=(C_N_D1_x-1);
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <Calculate_dx_dy+0x8a>
		  side_y=C_N_D1_y;
	  }	  
	  else
	  {
	   side_x=C_N_D1_x;
       side_y=(C_N_D1_y)-1;
    1220:	21 50       	subi	r18, 0x01	; 1
    1222:	31 09       	sbc	r19, r1
	  }
 }
 dx=side_x-STx;
    1224:	84 1b       	sub	r24, r20
    1226:	95 0b       	sbc	r25, r21
    1228:	90 93 28 02 	sts	0x0228, r25
    122c:	80 93 27 02 	sts	0x0227, r24
 dy=side_y-STy;
    1230:	80 91 10 02 	lds	r24, 0x0210
    1234:	90 91 11 02 	lds	r25, 0x0211
    1238:	28 1b       	sub	r18, r24
    123a:	39 0b       	sbc	r19, r25
    123c:	30 93 3f 02 	sts	0x023F, r19
    1240:	20 93 3e 02 	sts	0x023E, r18
    1244:	08 95       	ret
 if(C_N_D1_x==STx && C_N_D1_y-STy==1)
 {
	 side_x=C_N_D1_x;
	 side_y=(C_N_D1_y-1);
 }
 else if(C_N_D1_y==STy && C_N_D1_x-STx==1)
    1246:	26 17       	cp	r18, r22
    1248:	37 07       	cpc	r19, r23
    124a:	c1 f6       	brne	.-80     	; 0x11fc <Calculate_dx_dy+0x62>
    124c:	dc cf       	rjmp	.-72     	; 0x1206 <Calculate_dx_dy+0x6c>
 {
	 side_x=(C_N_D1_x-1);
	 side_y=C_N_D1_y;
 }
 else if (C_N_D1_x<=STx)
    124e:	48 17       	cp	r20, r24
    1250:	59 07       	cpc	r21, r25
    1252:	cc f6       	brge	.-78     	; 0x1206 <Calculate_dx_dy+0x6c>
	   side_y=(C_N_D1_y)+1;   
	  }
 }
 else
 {
	  if (C_N_D1_x<2)
    1254:	82 30       	cpi	r24, 0x02	; 2
    1256:	91 05       	cpc	r25, r1
    1258:	0c f7       	brge	.-62     	; 0x121c <Calculate_dx_dy+0x82>
    125a:	db cf       	rjmp	.-74     	; 0x1212 <Calculate_dx_dy+0x78>

0000125c <check_head_turn>:
* Output : < NONE>
* Logic: < find the turn to be taken by the bot by compairing the input value to the dx and dy and also by less or greater than zero and setting the vallue of head accordingly >
* Example Call: <check_head_turn(TF);>
*/
void check_head_turn(int a)
{
    125c:	cf 93       	push	r28
    125e:	df 93       	push	r29
    1260:	ec 01       	movw	r28, r24
char ans;
if(a==dx&&a<0)
    1262:	80 91 27 02 	lds	r24, 0x0227
    1266:	90 91 28 02 	lds	r25, 0x0228
    126a:	c8 17       	cp	r28, r24
    126c:	d9 07       	cpc	r29, r25
    126e:	09 f0       	breq	.+2      	; 0x1272 <check_head_turn+0x16>
    1270:	61 c0       	rjmp	.+194    	; 0x1334 <check_head_turn+0xd8>
    1272:	dd 23       	and	r29, r29
    1274:	84 f5       	brge	.+96     	; 0x12d6 <check_head_turn+0x7a>
 {
	 ans='ndx';
	 
	 if(head=='N')
    1276:	80 91 00 02 	lds	r24, 0x0200
    127a:	8e 34       	cpi	r24, 0x4E	; 78
    127c:	29 f4       	brne	.+10     	; 0x1288 <check_head_turn+0x2c>
		 turn(1,0);
    127e:	60 e0       	ldi	r22, 0x00	; 0
    1280:	70 e0       	ldi	r23, 0x00	; 0
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	2b dd       	rcall	.-1450   	; 0xcde <turn>
	 if(head=='S')
    1288:	80 91 00 02 	lds	r24, 0x0200
    128c:	83 35       	cpi	r24, 0x53	; 83
    128e:	29 f4       	brne	.+10     	; 0x129a <check_head_turn+0x3e>
		 turn(0,0);
    1290:	60 e0       	ldi	r22, 0x00	; 0
    1292:	70 e0       	ldi	r23, 0x00	; 0
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	22 dd       	rcall	.-1468   	; 0xcde <turn>
	 /*if(head=='W')
		 cout<<"no turn\n";*/
     if(head=='E')
    129a:	80 91 00 02 	lds	r24, 0x0200
    129e:	85 34       	cpi	r24, 0x45	; 69
    12a0:	29 f4       	brne	.+10     	; 0x12ac <check_head_turn+0x50>
		 turn(1,1);
    12a2:	61 e0       	ldi	r22, 0x01	; 1
    12a4:	70 e0       	ldi	r23, 0x00	; 0
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	19 dd       	rcall	.-1486   	; 0xcde <turn>
	 head='W';
    12ac:	87 e5       	ldi	r24, 0x57	; 87
    12ae:	80 93 00 02 	sts	0x0200, r24
	 STx=STx+dx;
    12b2:	80 91 01 02 	lds	r24, 0x0201
    12b6:	90 91 02 02 	lds	r25, 0x0202
    12ba:	20 91 27 02 	lds	r18, 0x0227
    12be:	30 91 28 02 	lds	r19, 0x0228
    12c2:	82 0f       	add	r24, r18
    12c4:	93 1f       	adc	r25, r19
    12c6:	90 93 02 02 	sts	0x0202, r25
    12ca:	80 93 01 02 	sts	0x0201, r24
 }
if(a==dx&&a>0)
    12ce:	c2 17       	cp	r28, r18
    12d0:	d3 07       	cpc	r29, r19
    12d2:	09 f0       	breq	.+2      	; 0x12d6 <check_head_turn+0x7a>
    12d4:	98 c0       	rjmp	.+304    	; 0x1406 <check_head_turn+0x1aa>
    12d6:	1c 16       	cp	r1, r28
    12d8:	1d 06       	cpc	r1, r29
    12da:	64 f5       	brge	.+88     	; 0x1334 <check_head_turn+0xd8>
 {
	 ans='pdx';
	 
	 if(head=='N')
    12dc:	80 91 00 02 	lds	r24, 0x0200
    12e0:	8e 34       	cpi	r24, 0x4E	; 78
    12e2:	29 f4       	brne	.+10     	; 0x12ee <check_head_turn+0x92>
		 turn(0,0);
    12e4:	60 e0       	ldi	r22, 0x00	; 0
    12e6:	70 e0       	ldi	r23, 0x00	; 0
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	f8 dc       	rcall	.-1552   	; 0xcde <turn>
	 if(head=='S')
    12ee:	80 91 00 02 	lds	r24, 0x0200
    12f2:	83 35       	cpi	r24, 0x53	; 83
    12f4:	29 f4       	brne	.+10     	; 0x1300 <check_head_turn+0xa4>
		 turn(1,0);
    12f6:	60 e0       	ldi	r22, 0x00	; 0
    12f8:	70 e0       	ldi	r23, 0x00	; 0
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	ef dc       	rcall	.-1570   	; 0xcde <turn>
	 if(head=='W')
    1300:	80 91 00 02 	lds	r24, 0x0200
    1304:	87 35       	cpi	r24, 0x57	; 87
    1306:	29 f4       	brne	.+10     	; 0x1312 <check_head_turn+0xb6>
		 turn(1,1);
    1308:	61 e0       	ldi	r22, 0x01	; 1
    130a:	70 e0       	ldi	r23, 0x00	; 0
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	e6 dc       	rcall	.-1588   	; 0xcde <turn>
     /*if(head=='E')
		 cout<<"no_turn\n";*/
	 head='E';
    1312:	85 e4       	ldi	r24, 0x45	; 69
    1314:	80 93 00 02 	sts	0x0200, r24
	 STx=STx+dx;
    1318:	20 91 01 02 	lds	r18, 0x0201
    131c:	30 91 02 02 	lds	r19, 0x0202
    1320:	80 91 27 02 	lds	r24, 0x0227
    1324:	90 91 28 02 	lds	r25, 0x0228
    1328:	82 0f       	add	r24, r18
    132a:	93 1f       	adc	r25, r19
    132c:	90 93 02 02 	sts	0x0202, r25
    1330:	80 93 01 02 	sts	0x0201, r24
 }
if(a==dy&&a<0)
    1334:	80 91 3e 02 	lds	r24, 0x023E
    1338:	90 91 3f 02 	lds	r25, 0x023F
    133c:	c8 17       	cp	r28, r24
    133e:	d9 07       	cpc	r29, r25
    1340:	09 f0       	breq	.+2      	; 0x1344 <check_head_turn+0xe8>
    1342:	69 c0       	rjmp	.+210    	; 0x1416 <check_head_turn+0x1ba>
    1344:	dd 23       	and	r29, r29
    1346:	7c f5       	brge	.+94     	; 0x13a6 <check_head_turn+0x14a>
 {
	 ans='ndy';
	 
	 if(head=='N')
    1348:	80 91 00 02 	lds	r24, 0x0200
    134c:	8e 34       	cpi	r24, 0x4E	; 78
    134e:	29 f4       	brne	.+10     	; 0x135a <check_head_turn+0xfe>
		 turn(1,1);
    1350:	61 e0       	ldi	r22, 0x01	; 1
    1352:	70 e0       	ldi	r23, 0x00	; 0
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	c2 dc       	rcall	.-1660   	; 0xcde <turn>
	 /*if(head=='S')
		 cout<<"no_turn\n";*/
	 if(head=='W')
    135a:	80 91 00 02 	lds	r24, 0x0200
    135e:	87 35       	cpi	r24, 0x57	; 87
    1360:	29 f4       	brne	.+10     	; 0x136c <check_head_turn+0x110>
		 turn(1,0);
    1362:	60 e0       	ldi	r22, 0x00	; 0
    1364:	70 e0       	ldi	r23, 0x00	; 0
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	b9 dc       	rcall	.-1678   	; 0xcde <turn>
     if(head=='E')
    136c:	80 91 00 02 	lds	r24, 0x0200
    1370:	85 34       	cpi	r24, 0x45	; 69
    1372:	29 f4       	brne	.+10     	; 0x137e <check_head_turn+0x122>
		 turn(0,0);
    1374:	60 e0       	ldi	r22, 0x00	; 0
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	b0 dc       	rcall	.-1696   	; 0xcde <turn>
	 head='S';
    137e:	83 e5       	ldi	r24, 0x53	; 83
    1380:	80 93 00 02 	sts	0x0200, r24
	 STy=STy+dy;
    1384:	80 91 10 02 	lds	r24, 0x0210
    1388:	90 91 11 02 	lds	r25, 0x0211
    138c:	20 91 3e 02 	lds	r18, 0x023E
    1390:	30 91 3f 02 	lds	r19, 0x023F
    1394:	82 0f       	add	r24, r18
    1396:	93 1f       	adc	r25, r19
    1398:	90 93 11 02 	sts	0x0211, r25
    139c:	80 93 10 02 	sts	0x0210, r24
 }
if(a==dy&&a>0)
    13a0:	c2 17       	cp	r28, r18
    13a2:	d3 07       	cpc	r29, r19
    13a4:	c1 f5       	brne	.+112    	; 0x1416 <check_head_turn+0x1ba>
    13a6:	1c 16       	cp	r1, r28
    13a8:	1d 06       	cpc	r1, r29
    13aa:	ac f5       	brge	.+106    	; 0x1416 <check_head_turn+0x1ba>
 {
	 ans='pdy';
	 
	 /*if(head=='N')
		 cout<<"no_turn\n";*/
	 if(head=='S')
    13ac:	80 91 00 02 	lds	r24, 0x0200
    13b0:	83 35       	cpi	r24, 0x53	; 83
    13b2:	29 f4       	brne	.+10     	; 0x13be <check_head_turn+0x162>
		 turn(1,1);
    13b4:	61 e0       	ldi	r22, 0x01	; 1
    13b6:	70 e0       	ldi	r23, 0x00	; 0
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	90 dc       	rcall	.-1760   	; 0xcde <turn>
	 if(head=='W')
    13be:	80 91 00 02 	lds	r24, 0x0200
    13c2:	87 35       	cpi	r24, 0x57	; 87
    13c4:	29 f4       	brne	.+10     	; 0x13d0 <check_head_turn+0x174>
		 turn(0,0);
    13c6:	60 e0       	ldi	r22, 0x00	; 0
    13c8:	70 e0       	ldi	r23, 0x00	; 0
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	87 dc       	rcall	.-1778   	; 0xcde <turn>
     if(head=='E')
    13d0:	80 91 00 02 	lds	r24, 0x0200
    13d4:	85 34       	cpi	r24, 0x45	; 69
    13d6:	29 f4       	brne	.+10     	; 0x13e2 <check_head_turn+0x186>
		 turn(1,0);
    13d8:	60 e0       	ldi	r22, 0x00	; 0
    13da:	70 e0       	ldi	r23, 0x00	; 0
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	7e dc       	rcall	.-1796   	; 0xcde <turn>
	 head='N';
    13e2:	8e e4       	ldi	r24, 0x4E	; 78
    13e4:	80 93 00 02 	sts	0x0200, r24
	 STy=STy+dy;
    13e8:	20 91 10 02 	lds	r18, 0x0210
    13ec:	30 91 11 02 	lds	r19, 0x0211
    13f0:	80 91 3e 02 	lds	r24, 0x023E
    13f4:	90 91 3f 02 	lds	r25, 0x023F
    13f8:	82 0f       	add	r24, r18
    13fa:	93 1f       	adc	r25, r19
    13fc:	90 93 11 02 	sts	0x0211, r25
    1400:	80 93 10 02 	sts	0x0210, r24
    1404:	08 c0       	rjmp	.+16     	; 0x1416 <check_head_turn+0x1ba>
     /*if(head=='E')
		 cout<<"no_turn\n";*/
	 head='E';
	 STx=STx+dx;
 }
if(a==dy&&a<0)
    1406:	80 91 3e 02 	lds	r24, 0x023E
    140a:	90 91 3f 02 	lds	r25, 0x023F
    140e:	c8 17       	cp	r28, r24
    1410:	d9 07       	cpc	r29, r25
    1412:	09 f4       	brne	.+2      	; 0x1416 <check_head_turn+0x1ba>
    1414:	99 cf       	rjmp	.-206    	; 0x1348 <check_head_turn+0xec>
     if(head=='E')
		 turn(1,0);
	 head='N';
	 STy=STy+dy;
 }
}
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	08 95       	ret

0000141c <path>:
* Output : < NONE>
* Logic: < tells the bot where to go by going through series of processe of travelling straight ,turning, travel till block,etc >
* Example Call: <path(dx, dy);>
*/
void path(int a, int b)
{
    141c:	0f 93       	push	r16
    141e:	1f 93       	push	r17
    1420:	cf 93       	push	r28
    1422:	df 93       	push	r29
	int TF=0, TS=0;
	int odd,even;
	if(dx==0 && dy==0)
    1424:	c0 91 27 02 	lds	r28, 0x0227
    1428:	d0 91 28 02 	lds	r29, 0x0228
    142c:	20 97       	sbiw	r28, 0x00	; 0
    142e:	91 f5       	brne	.+100    	; 0x1494 <path+0x78>
    1430:	80 91 3e 02 	lds	r24, 0x023E
    1434:	90 91 3f 02 	lds	r25, 0x023F
    1438:	00 97       	sbiw	r24, 0x00	; 0
    143a:	09 f0       	breq	.+2      	; 0x143e <path+0x22>
    143c:	19 c2       	rjmp	.+1074   	; 0x1870 <path+0x454>
		//travel(1);
		//key_forward=1;
		//velocity(250,255);
		//forward();
		//forward_mm(120);		
		turn(1,1);//turn 180
    143e:	61 e0       	ldi	r22, 0x01	; 1
    1440:	70 e0       	ldi	r23, 0x00	; 0
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	4b dc       	rcall	.-1898   	; 0xcde <turn>
		if(head=='S')
    1448:	80 91 00 02 	lds	r24, 0x0200
    144c:	83 35       	cpi	r24, 0x53	; 83
    144e:	21 f4       	brne	.+8      	; 0x1458 <path+0x3c>
		head='N';
    1450:	8e e4       	ldi	r24, 0x4E	; 78
    1452:	80 93 00 02 	sts	0x0200, r24
    1456:	11 c0       	rjmp	.+34     	; 0x147a <path+0x5e>
		else if (head=='N')
    1458:	8e 34       	cpi	r24, 0x4E	; 78
    145a:	21 f4       	brne	.+8      	; 0x1464 <path+0x48>
		head='S';
    145c:	83 e5       	ldi	r24, 0x53	; 83
    145e:	80 93 00 02 	sts	0x0200, r24
    1462:	0b c0       	rjmp	.+22     	; 0x147a <path+0x5e>
		else if (head=='E')
    1464:	85 34       	cpi	r24, 0x45	; 69
    1466:	21 f4       	brne	.+8      	; 0x1470 <path+0x54>
		head='W';
    1468:	87 e5       	ldi	r24, 0x57	; 87
    146a:	80 93 00 02 	sts	0x0200, r24
    146e:	05 c0       	rjmp	.+10     	; 0x147a <path+0x5e>
		else if(head=='W')
    1470:	87 35       	cpi	r24, 0x57	; 87
    1472:	19 f4       	brne	.+6      	; 0x147a <path+0x5e>
		head='E';
    1474:	85 e4       	ldi	r24, 0x45	; 69
    1476:	80 93 00 02 	sts	0x0200, r24
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    147a:	85 ef       	ldi	r24, 0xF5	; 245
    147c:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    1480:	8a ef       	ldi	r24, 0xFA	; 250
    1482:	80 93 2a 01 	sts	0x012A, r24
		velocity(245,250);
		//travel_till_block(1);
		backward();
    1486:	0e 94 aa 01 	call	0x354	; 0x354 <backward>
		backward_mm(60);
    148a:	8c e3       	ldi	r24, 0x3C	; 60
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	0e 94 3c 02 	call	0x478	; 0x478 <backward_mm>
    1492:	18 c3       	rjmp	.+1584   	; 0x1ac4 <path+0x6a8>

	}	
	else if (dx!=0 && dy!=0)
    1494:	00 91 3e 02 	lds	r16, 0x023E
    1498:	10 91 3f 02 	lds	r17, 0x023F
    149c:	01 15       	cp	r16, r1
    149e:	11 05       	cpc	r17, r1
    14a0:	09 f4       	brne	.+2      	; 0x14a4 <path+0x88>
    14a2:	73 c2       	rjmp	.+1254   	; 0x198a <path+0x56e>
	{/*both non zero*/
		if(dx%2!=0 && dy%2!=0)
    14a4:	ce 01       	movw	r24, r28
    14a6:	2c 2f       	mov	r18, r28
    14a8:	c0 ff       	sbrs	r28, 0
    14aa:	fc c2       	rjmp	.+1528   	; 0x1aa4 <path+0x688>
    14ac:	00 ff       	sbrs	r16, 0
    14ae:	00 c3       	rjmp	.+1536   	; 0x1ab0 <path+0x694>
		{
			/*both odd*/
			if (STx%2!=0)
    14b0:	80 91 01 02 	lds	r24, 0x0201
    14b4:	80 ff       	sbrs	r24, 0
    14b6:	0b c0       	rjmp	.+22     	; 0x14ce <path+0xb2>
			{
				TF=dx;
				TS=dy;
				aise=dy;
    14b8:	10 93 1e 02 	sts	0x021E, r17
    14bc:	00 93 1d 02 	sts	0x021D, r16
				dy=dx+1;
    14c0:	ce 01       	movw	r24, r28
    14c2:	01 96       	adiw	r24, 0x01	; 1
    14c4:	90 93 3f 02 	sts	0x023F, r25
    14c8:	80 93 3e 02 	sts	0x023E, r24
    14cc:	0e c0       	rjmp	.+28     	; 0x14ea <path+0xce>
			}
			else
			{
				TF=dy;
				TS=dx;
				aise=dx;
    14ce:	d0 93 1e 02 	sts	0x021E, r29
    14d2:	c0 93 1d 02 	sts	0x021D, r28
				dx=dy+1;
    14d6:	c8 01       	movw	r24, r16
    14d8:	01 96       	adiw	r24, 0x01	; 1
    14da:	90 93 28 02 	sts	0x0228, r25
    14de:	80 93 27 02 	sts	0x0227, r24
    14e2:	8d 2f       	mov	r24, r29
				aise=dy;
				dy=dx+1;
			}
			else
			{
				TF=dy;
    14e4:	e8 01       	movw	r28, r16
				TS=dx;
    14e6:	02 2f       	mov	r16, r18
    14e8:	18 2f       	mov	r17, r24
				aise=dx;
				dx=dy+1;
			}
			check_head_turn(TF);
    14ea:	ce 01       	movw	r24, r28
    14ec:	b7 de       	rcall	.-658    	; 0x125c <check_head_turn>
			if(TF==dx)
    14ee:	80 91 27 02 	lds	r24, 0x0227
    14f2:	90 91 28 02 	lds	r25, 0x0228
    14f6:	c8 17       	cp	r28, r24
    14f8:	d9 07       	cpc	r29, r25
    14fa:	91 f4       	brne	.+36     	; 0x1520 <path+0x104>
			{
			dy=aise;
    14fc:	80 91 1d 02 	lds	r24, 0x021D
    1500:	90 91 1e 02 	lds	r25, 0x021E
    1504:	90 93 3f 02 	sts	0x023F, r25
    1508:	80 93 3e 02 	sts	0x023E, r24
			aise=dx;
    150c:	d0 93 1e 02 	sts	0x021E, r29
    1510:	c0 93 1d 02 	sts	0x021D, r28
			dx=dy+1;
    1514:	01 96       	adiw	r24, 0x01	; 1
    1516:	90 93 28 02 	sts	0x0228, r25
    151a:	80 93 27 02 	sts	0x0227, r24
    151e:	15 c0       	rjmp	.+42     	; 0x154a <path+0x12e>
			}
			else
			{
				dx=aise;
    1520:	80 91 1d 02 	lds	r24, 0x021D
    1524:	90 91 1e 02 	lds	r25, 0x021E
    1528:	90 93 28 02 	sts	0x0228, r25
    152c:	80 93 27 02 	sts	0x0227, r24
				aise=dy;
    1530:	20 91 3e 02 	lds	r18, 0x023E
    1534:	30 91 3f 02 	lds	r19, 0x023F
    1538:	30 93 1e 02 	sts	0x021E, r19
    153c:	20 93 1d 02 	sts	0x021D, r18
				dy=dx+1;
    1540:	01 96       	adiw	r24, 0x01	; 1
    1542:	90 93 3f 02 	sts	0x023F, r25
    1546:	80 93 3e 02 	sts	0x023E, r24
			}
			travel(abs(TF));
    154a:	ce 01       	movw	r24, r28
    154c:	dd 23       	and	r29, r29
    154e:	24 f4       	brge	.+8      	; 0x1558 <path+0x13c>
    1550:	88 27       	eor	r24, r24
    1552:	99 27       	eor	r25, r25
    1554:	8c 1b       	sub	r24, r28
    1556:	9d 0b       	sbc	r25, r29
    1558:	88 da       	rcall	.-2800   	; 0xa6a <travel>
			check_head_turn(TS);
    155a:	c8 01       	movw	r24, r16
    155c:	7f de       	rcall	.-770    	; 0x125c <check_head_turn>
			if(TS==dx)
    155e:	80 91 27 02 	lds	r24, 0x0227
    1562:	90 91 28 02 	lds	r25, 0x0228
    1566:	08 17       	cp	r16, r24
    1568:	19 07       	cpc	r17, r25
    156a:	49 f4       	brne	.+18     	; 0x157e <path+0x162>
				dy=aise;
    156c:	80 91 1d 02 	lds	r24, 0x021D
    1570:	90 91 1e 02 	lds	r25, 0x021E
    1574:	90 93 3f 02 	sts	0x023F, r25
    1578:	80 93 3e 02 	sts	0x023E, r24
    157c:	08 c0       	rjmp	.+16     	; 0x158e <path+0x172>
			else
				dx=aise;
    157e:	80 91 1d 02 	lds	r24, 0x021D
    1582:	90 91 1e 02 	lds	r25, 0x021E
    1586:	90 93 28 02 	sts	0x0228, r25
    158a:	80 93 27 02 	sts	0x0227, r24
				
	        if(z!=0 && z<20)
    158e:	80 91 25 02 	lds	r24, 0x0225
    1592:	90 91 26 02 	lds	r25, 0x0226
    1596:	00 97       	sbiw	r24, 0x00	; 0
    1598:	59 f0       	breq	.+22     	; 0x15b0 <path+0x194>
    159a:	44 97       	sbiw	r24, 0x14	; 20
    159c:	94 f4       	brge	.+36     	; 0x15c2 <path+0x1a6>
	        travel_till_block(abs(TS));
    159e:	c8 01       	movw	r24, r16
    15a0:	99 23       	and	r25, r25
    15a2:	24 f4       	brge	.+8      	; 0x15ac <path+0x190>
    15a4:	88 27       	eor	r24, r24
    15a6:	99 27       	eor	r25, r25
    15a8:	80 1b       	sub	r24, r16
    15aa:	91 0b       	sbc	r25, r17
    15ac:	3b dc       	rcall	.-1930   	; 0xe24 <travel_till_block>
    15ae:	8a c2       	rjmp	.+1300   	; 0x1ac4 <path+0x6a8>
	        else if(z==0)
	        travel(abs(TS));
    15b0:	c8 01       	movw	r24, r16
    15b2:	99 23       	and	r25, r25
    15b4:	24 f4       	brge	.+8      	; 0x15be <path+0x1a2>
    15b6:	88 27       	eor	r24, r24
    15b8:	99 27       	eor	r25, r25
    15ba:	80 1b       	sub	r24, r16
    15bc:	91 0b       	sbc	r25, r17
    15be:	55 da       	rcall	.-2902   	; 0xa6a <travel>
    15c0:	81 c2       	rjmp	.+1282   	; 0x1ac4 <path+0x6a8>
	        else
	        travel_till_bucket(abs(TS));
    15c2:	c8 01       	movw	r24, r16
    15c4:	99 23       	and	r25, r25
    15c6:	24 f4       	brge	.+8      	; 0x15d0 <path+0x1b4>
    15c8:	88 27       	eor	r24, r24
    15ca:	99 27       	eor	r25, r25
    15cc:	80 1b       	sub	r24, r16
    15ce:	91 0b       	sbc	r25, r17
    15d0:	ca dd       	rcall	.-1132   	; 0x1166 <travel_till_bucket>
    15d2:	78 c2       	rjmp	.+1264   	; 0x1ac4 <path+0x6a8>
		}
		else if(dx%2==0 && dy%2==0)
		{
			/*both even*/
			if(STx%2!=0)
    15d4:	80 91 01 02 	lds	r24, 0x0201
    15d8:	80 ff       	sbrs	r24, 0
    15da:	0b c0       	rjmp	.+22     	; 0x15f2 <path+0x1d6>
			{
				  TF=dx;
				  TS=dy;
				  aise=dy;
    15dc:	10 93 1e 02 	sts	0x021E, r17
    15e0:	00 93 1d 02 	sts	0x021D, r16
				  dy=dx+1;
    15e4:	ce 01       	movw	r24, r28
    15e6:	01 96       	adiw	r24, 0x01	; 1
    15e8:	90 93 3f 02 	sts	0x023F, r25
    15ec:	80 93 3e 02 	sts	0x023E, r24
    15f0:	0f c0       	rjmp	.+30     	; 0x1610 <path+0x1f4>
			}
			else
			{
				  TF=dy;
				  TS=dx;
				  aise=dx;
    15f2:	d0 93 1e 02 	sts	0x021E, r29
    15f6:	c0 93 1d 02 	sts	0x021D, r28
				  dx=dy+1;
    15fa:	c8 01       	movw	r24, r16
    15fc:	01 96       	adiw	r24, 0x01	; 1
    15fe:	90 93 28 02 	sts	0x0228, r25
    1602:	80 93 27 02 	sts	0x0227, r24
    1606:	9c 2f       	mov	r25, r28
    1608:	8d 2f       	mov	r24, r29
				  aise=dy;
				  dy=dx+1;
			}
			else
			{
				  TF=dy;
    160a:	e8 01       	movw	r28, r16
				  TS=dx;
    160c:	09 2f       	mov	r16, r25
    160e:	18 2f       	mov	r17, r24
				  aise=dx;
				  dx=dy+1;
			}
			check_head_turn(TF);
    1610:	ce 01       	movw	r24, r28
    1612:	24 de       	rcall	.-952    	; 0x125c <check_head_turn>
			if(TF==dx)
    1614:	80 91 27 02 	lds	r24, 0x0227
    1618:	90 91 28 02 	lds	r25, 0x0228
    161c:	c8 17       	cp	r28, r24
    161e:	d9 07       	cpc	r29, r25
    1620:	61 f4       	brne	.+24     	; 0x163a <path+0x21e>
				STx=STx-dx+1;
    1622:	80 91 01 02 	lds	r24, 0x0201
    1626:	90 91 02 02 	lds	r25, 0x0202
    162a:	8c 1b       	sub	r24, r28
    162c:	9d 0b       	sbc	r25, r29
    162e:	01 96       	adiw	r24, 0x01	; 1
    1630:	90 93 02 02 	sts	0x0202, r25
    1634:	80 93 01 02 	sts	0x0201, r24
    1638:	0f c0       	rjmp	.+30     	; 0x1658 <path+0x23c>
			else
			    STy=STy-dy+1;	
    163a:	80 91 10 02 	lds	r24, 0x0210
    163e:	90 91 11 02 	lds	r25, 0x0211
    1642:	20 91 3e 02 	lds	r18, 0x023E
    1646:	30 91 3f 02 	lds	r19, 0x023F
    164a:	82 1b       	sub	r24, r18
    164c:	93 0b       	sbc	r25, r19
    164e:	01 96       	adiw	r24, 0x01	; 1
    1650:	90 93 11 02 	sts	0x0211, r25
    1654:	80 93 10 02 	sts	0x0210, r24
			travel(1);
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	06 da       	rcall	.-3060   	; 0xa6a <travel>
			if(TF==dx){
    165e:	80 91 27 02 	lds	r24, 0x0227
    1662:	90 91 28 02 	lds	r25, 0x0228
    1666:	c8 17       	cp	r28, r24
    1668:	d9 07       	cpc	r29, r25
    166a:	91 f4       	brne	.+36     	; 0x1690 <path+0x274>
				  dy=aise;
    166c:	80 91 1d 02 	lds	r24, 0x021D
    1670:	90 91 1e 02 	lds	r25, 0x021E
    1674:	90 93 3f 02 	sts	0x023F, r25
    1678:	80 93 3e 02 	sts	0x023E, r24
				  aise=dx;
    167c:	d0 93 1e 02 	sts	0x021E, r29
    1680:	c0 93 1d 02 	sts	0x021D, r28
			      dx=dy+1;}
    1684:	01 96       	adiw	r24, 0x01	; 1
    1686:	90 93 28 02 	sts	0x0228, r25
    168a:	80 93 27 02 	sts	0x0227, r24
    168e:	15 c0       	rjmp	.+42     	; 0x16ba <path+0x29e>
			else{
				  dx=aise;
    1690:	80 91 1d 02 	lds	r24, 0x021D
    1694:	90 91 1e 02 	lds	r25, 0x021E
    1698:	90 93 28 02 	sts	0x0228, r25
    169c:	80 93 27 02 	sts	0x0227, r24
				  aise=dy;
    16a0:	20 91 3e 02 	lds	r18, 0x023E
    16a4:	30 91 3f 02 	lds	r19, 0x023F
    16a8:	30 93 1e 02 	sts	0x021E, r19
    16ac:	20 93 1d 02 	sts	0x021D, r18
			      dy=dx+1;}			
    16b0:	01 96       	adiw	r24, 0x01	; 1
    16b2:	90 93 3f 02 	sts	0x023F, r25
    16b6:	80 93 3e 02 	sts	0x023E, r24
			check_head_turn(TS);
    16ba:	c8 01       	movw	r24, r16
    16bc:	cf dd       	rcall	.-1122   	; 0x125c <check_head_turn>
			travel(abs(TS));
    16be:	c8 01       	movw	r24, r16
    16c0:	11 23       	and	r17, r17
    16c2:	24 f4       	brge	.+8      	; 0x16cc <path+0x2b0>
    16c4:	88 27       	eor	r24, r24
    16c6:	99 27       	eor	r25, r25
    16c8:	80 1b       	sub	r24, r16
    16ca:	91 0b       	sbc	r25, r17
    16cc:	ce d9       	rcall	.-3172   	; 0xa6a <travel>
			if(TS==dy){
    16ce:	80 91 3e 02 	lds	r24, 0x023E
    16d2:	90 91 3f 02 	lds	r25, 0x023F
    16d6:	08 17       	cp	r16, r24
    16d8:	19 07       	cpc	r17, r25
    16da:	91 f4       	brne	.+36     	; 0x1700 <path+0x2e4>
				  dx=aise;
    16dc:	80 91 1d 02 	lds	r24, 0x021D
    16e0:	90 91 1e 02 	lds	r25, 0x021E
    16e4:	90 93 28 02 	sts	0x0228, r25
    16e8:	80 93 27 02 	sts	0x0227, r24
				  aise=dy;
    16ec:	10 93 1e 02 	sts	0x021E, r17
    16f0:	00 93 1d 02 	sts	0x021D, r16
			      dy=dx+1;}
    16f4:	01 96       	adiw	r24, 0x01	; 1
    16f6:	90 93 3f 02 	sts	0x023F, r25
    16fa:	80 93 3e 02 	sts	0x023E, r24
    16fe:	15 c0       	rjmp	.+42     	; 0x172a <path+0x30e>
			else{
				  dy=aise;
    1700:	80 91 1d 02 	lds	r24, 0x021D
    1704:	90 91 1e 02 	lds	r25, 0x021E
    1708:	90 93 3f 02 	sts	0x023F, r25
    170c:	80 93 3e 02 	sts	0x023E, r24
				  aise=dx;
    1710:	20 91 27 02 	lds	r18, 0x0227
    1714:	30 91 28 02 	lds	r19, 0x0228
    1718:	30 93 1e 02 	sts	0x021E, r19
    171c:	20 93 1d 02 	sts	0x021D, r18
			      dx=dy+1;}			
    1720:	01 96       	adiw	r24, 0x01	; 1
    1722:	90 93 28 02 	sts	0x0228, r25
    1726:	80 93 27 02 	sts	0x0227, r24
			check_head_turn(TF);
    172a:	ce 01       	movw	r24, r28
    172c:	97 dd       	rcall	.-1234   	; 0x125c <check_head_turn>
			if(TS==dx)
    172e:	80 91 27 02 	lds	r24, 0x0227
    1732:	90 91 28 02 	lds	r25, 0x0228
    1736:	08 17       	cp	r16, r24
    1738:	19 07       	cpc	r17, r25
    173a:	49 f4       	brne	.+18     	; 0x174e <path+0x332>
			  dx=aise;
    173c:	80 91 1d 02 	lds	r24, 0x021D
    1740:	90 91 1e 02 	lds	r25, 0x021E
    1744:	90 93 28 02 	sts	0x0228, r25
    1748:	80 93 27 02 	sts	0x0227, r24
    174c:	08 c0       	rjmp	.+16     	; 0x175e <path+0x342>
			else
			  dy=aise;			
    174e:	80 91 1d 02 	lds	r24, 0x021D
    1752:	90 91 1e 02 	lds	r25, 0x021E
    1756:	90 93 3f 02 	sts	0x023F, r25
    175a:	80 93 3e 02 	sts	0x023E, r24
			if(TF==dx)
    175e:	80 91 27 02 	lds	r24, 0x0227
    1762:	90 91 28 02 	lds	r25, 0x0228
    1766:	c8 17       	cp	r28, r24
    1768:	d9 07       	cpc	r29, r25
    176a:	51 f4       	brne	.+20     	; 0x1780 <path+0x364>
				STx=STx-1;
    176c:	80 91 01 02 	lds	r24, 0x0201
    1770:	90 91 02 02 	lds	r25, 0x0202
    1774:	01 97       	sbiw	r24, 0x01	; 1
    1776:	90 93 02 02 	sts	0x0202, r25
    177a:	80 93 01 02 	sts	0x0201, r24
    177e:	09 c0       	rjmp	.+18     	; 0x1792 <path+0x376>
			else
				STy=STy-1;
    1780:	80 91 10 02 	lds	r24, 0x0210
    1784:	90 91 11 02 	lds	r25, 0x0211
    1788:	01 97       	sbiw	r24, 0x01	; 1
    178a:	90 93 11 02 	sts	0x0211, r25
    178e:	80 93 10 02 	sts	0x0210, r24
			if(TF<0){
    1792:	dd 23       	and	r29, r29
    1794:	6c f4       	brge	.+26     	; 0x17b0 <path+0x394>
			  TF=abs(TF)-1;
    1796:	ce 01       	movw	r24, r28
    1798:	dd 23       	and	r29, r29
    179a:	24 f4       	brge	.+8      	; 0x17a4 <path+0x388>
    179c:	88 27       	eor	r24, r24
    179e:	99 27       	eor	r25, r25
    17a0:	8c 1b       	sub	r24, r28
    17a2:	9d 0b       	sbc	r25, r29
    17a4:	01 97       	sbiw	r24, 0x01	; 1
			  TF=TF*-1;}
    17a6:	cc 27       	eor	r28, r28
    17a8:	dd 27       	eor	r29, r29
    17aa:	c8 1b       	sub	r28, r24
    17ac:	d9 0b       	sbc	r29, r25
    17ae:	01 c0       	rjmp	.+2      	; 0x17b2 <path+0x396>
			else
			  TF=TF-1;
    17b0:	21 97       	sbiw	r28, 0x01	; 1
	        if(z!=0 && z<20)
    17b2:	80 91 25 02 	lds	r24, 0x0225
    17b6:	90 91 26 02 	lds	r25, 0x0226
    17ba:	00 97       	sbiw	r24, 0x00	; 0
    17bc:	59 f0       	breq	.+22     	; 0x17d4 <path+0x3b8>
    17be:	44 97       	sbiw	r24, 0x14	; 20
    17c0:	94 f4       	brge	.+36     	; 0x17e6 <path+0x3ca>
	        travel_till_block(abs(TF));
    17c2:	ce 01       	movw	r24, r28
    17c4:	dd 23       	and	r29, r29
    17c6:	24 f4       	brge	.+8      	; 0x17d0 <path+0x3b4>
    17c8:	88 27       	eor	r24, r24
    17ca:	99 27       	eor	r25, r25
    17cc:	8c 1b       	sub	r24, r28
    17ce:	9d 0b       	sbc	r25, r29
    17d0:	29 db       	rcall	.-2478   	; 0xe24 <travel_till_block>
    17d2:	78 c1       	rjmp	.+752    	; 0x1ac4 <path+0x6a8>
	        else if(z==0)
	        travel(abs(TF));
    17d4:	ce 01       	movw	r24, r28
    17d6:	dd 23       	and	r29, r29
    17d8:	24 f4       	brge	.+8      	; 0x17e2 <path+0x3c6>
    17da:	88 27       	eor	r24, r24
    17dc:	99 27       	eor	r25, r25
    17de:	8c 1b       	sub	r24, r28
    17e0:	9d 0b       	sbc	r25, r29
    17e2:	43 d9       	rcall	.-3450   	; 0xa6a <travel>
    17e4:	6f c1       	rjmp	.+734    	; 0x1ac4 <path+0x6a8>
	        else
	        travel_till_bucket(abs(TF));
    17e6:	ce 01       	movw	r24, r28
    17e8:	dd 23       	and	r29, r29
    17ea:	24 f4       	brge	.+8      	; 0x17f4 <path+0x3d8>
    17ec:	88 27       	eor	r24, r24
    17ee:	99 27       	eor	r25, r25
    17f0:	8c 1b       	sub	r24, r28
    17f2:	9d 0b       	sbc	r25, r29
    17f4:	b8 dc       	rcall	.-1680   	; 0x1166 <travel_till_bucket>
    17f6:	66 c1       	rjmp	.+716    	; 0x1ac4 <path+0x6a8>
			else
			{
				odd=dy;
				even=dx;
			}
			if (STx%2==0 && STy%2==0)
    17f8:	80 91 01 02 	lds	r24, 0x0201
    17fc:	80 fd       	sbrc	r24, 0
    17fe:	09 c0       	rjmp	.+18     	; 0x1812 <path+0x3f6>
    1800:	80 91 10 02 	lds	r24, 0x0210
    1804:	80 fd       	sbrc	r24, 0
    1806:	05 c0       	rjmp	.+10     	; 0x1812 <path+0x3f6>
    1808:	90 2f       	mov	r25, r16
    180a:	81 2f       	mov	r24, r17
			{
				TF=even;
    180c:	8e 01       	movw	r16, r28
				TS=odd;
    180e:	c9 2f       	mov	r28, r25
    1810:	d8 2f       	mov	r29, r24
			else
			{
				TF=odd;
				TS=even;
			}
			check_head_turn(TF);
    1812:	c8 01       	movw	r24, r16
    1814:	23 dd       	rcall	.-1466   	; 0x125c <check_head_turn>
			travel(abs(TF));
    1816:	c8 01       	movw	r24, r16
    1818:	99 23       	and	r25, r25
    181a:	24 f4       	brge	.+8      	; 0x1824 <path+0x408>
    181c:	88 27       	eor	r24, r24
    181e:	99 27       	eor	r25, r25
    1820:	80 1b       	sub	r24, r16
    1822:	91 0b       	sbc	r25, r17
    1824:	22 d9       	rcall	.-3516   	; 0xa6a <travel>
			check_head_turn(TS);
    1826:	ce 01       	movw	r24, r28
    1828:	19 dd       	rcall	.-1486   	; 0x125c <check_head_turn>
	        if(z!=0 && z<20)
    182a:	80 91 25 02 	lds	r24, 0x0225
    182e:	90 91 26 02 	lds	r25, 0x0226
    1832:	00 97       	sbiw	r24, 0x00	; 0
    1834:	59 f0       	breq	.+22     	; 0x184c <path+0x430>
    1836:	44 97       	sbiw	r24, 0x14	; 20
    1838:	94 f4       	brge	.+36     	; 0x185e <path+0x442>
	        travel_till_block(abs(TS));
    183a:	ce 01       	movw	r24, r28
    183c:	dd 23       	and	r29, r29
    183e:	24 f4       	brge	.+8      	; 0x1848 <path+0x42c>
    1840:	88 27       	eor	r24, r24
    1842:	99 27       	eor	r25, r25
    1844:	8c 1b       	sub	r24, r28
    1846:	9d 0b       	sbc	r25, r29
    1848:	ed da       	rcall	.-2598   	; 0xe24 <travel_till_block>
    184a:	3c c1       	rjmp	.+632    	; 0x1ac4 <path+0x6a8>
	        else if(z==0)
	        travel(abs(TS));
    184c:	ce 01       	movw	r24, r28
    184e:	dd 23       	and	r29, r29
    1850:	24 f4       	brge	.+8      	; 0x185a <path+0x43e>
    1852:	88 27       	eor	r24, r24
    1854:	99 27       	eor	r25, r25
    1856:	8c 1b       	sub	r24, r28
    1858:	9d 0b       	sbc	r25, r29
    185a:	07 d9       	rcall	.-3570   	; 0xa6a <travel>
    185c:	33 c1       	rjmp	.+614    	; 0x1ac4 <path+0x6a8>
	        else
	        travel_till_bucket(abs(TS));
    185e:	ce 01       	movw	r24, r28
    1860:	dd 23       	and	r29, r29
    1862:	24 f4       	brge	.+8      	; 0x186c <path+0x450>
    1864:	88 27       	eor	r24, r24
    1866:	99 27       	eor	r25, r25
    1868:	8c 1b       	sub	r24, r28
    186a:	9d 0b       	sbc	r25, r29
    186c:	7c dc       	rcall	.-1800   	; 0x1166 <travel_till_bucket>
    186e:	2a c1       	rjmp	.+596    	; 0x1ac4 <path+0x6a8>
	}
	else
	{/*one is zero*/
		if (dx==0)
		{
			if(STx%2!=0)
    1870:	20 91 01 02 	lds	r18, 0x0201
    1874:	30 91 02 02 	lds	r19, 0x0202
    1878:	20 ff       	sbrs	r18, 0
    187a:	5d c0       	rjmp	.+186    	; 0x1936 <path+0x51a>
			{
				if(head=='E')
    187c:	80 91 00 02 	lds	r24, 0x0200
    1880:	85 34       	cpi	r24, 0x45	; 69
    1882:	39 f4       	brne	.+14     	; 0x1892 <path+0x476>
					STx=STx+1;
    1884:	2f 5f       	subi	r18, 0xFF	; 255
    1886:	3f 4f       	sbci	r19, 0xFF	; 255
    1888:	30 93 02 02 	sts	0x0202, r19
    188c:	20 93 01 02 	sts	0x0201, r18
    1890:	08 c0       	rjmp	.+16     	; 0x18a2 <path+0x486>
				else if(head=='W')
    1892:	87 35       	cpi	r24, 0x57	; 87
    1894:	31 f4       	brne	.+12     	; 0x18a2 <path+0x486>
				    STx=STx-1;
    1896:	21 50       	subi	r18, 0x01	; 1
    1898:	31 09       	sbc	r19, r1
    189a:	30 93 02 02 	sts	0x0202, r19
    189e:	20 93 01 02 	sts	0x0201, r18
				travel(1);
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	e1 d8       	rcall	.-3646   	; 0xa6a <travel>
				check_head_turn(dy);
    18a8:	80 91 3e 02 	lds	r24, 0x023E
    18ac:	90 91 3f 02 	lds	r25, 0x023F
    18b0:	d5 dc       	rcall	.-1622   	; 0x125c <check_head_turn>
				travel(abs(dy));
    18b2:	80 91 3e 02 	lds	r24, 0x023E
    18b6:	90 91 3f 02 	lds	r25, 0x023F
    18ba:	99 23       	and	r25, r25
    18bc:	1c f4       	brge	.+6      	; 0x18c4 <path+0x4a8>
    18be:	91 95       	neg	r25
    18c0:	81 95       	neg	r24
    18c2:	91 09       	sbc	r25, r1
    18c4:	d2 d8       	rcall	.-3676   	; 0xa6a <travel>
				dx=C_N_D1_x-STx;
    18c6:	80 91 40 02 	lds	r24, 0x0240
    18ca:	90 91 41 02 	lds	r25, 0x0241
    18ce:	20 91 01 02 	lds	r18, 0x0201
    18d2:	30 91 02 02 	lds	r19, 0x0202
    18d6:	82 1b       	sub	r24, r18
    18d8:	93 0b       	sbc	r25, r19
    18da:	90 93 28 02 	sts	0x0228, r25
    18de:	80 93 27 02 	sts	0x0227, r24
				check_head_turn(dx);
    18e2:	bc dc       	rcall	.-1672   	; 0x125c <check_head_turn>
	            if(z!=0 && z<20)
    18e4:	80 91 25 02 	lds	r24, 0x0225
    18e8:	90 91 26 02 	lds	r25, 0x0226
    18ec:	00 97       	sbiw	r24, 0x00	; 0
    18ee:	69 f0       	breq	.+26     	; 0x190a <path+0x4ee>
    18f0:	44 97       	sbiw	r24, 0x14	; 20
    18f2:	b4 f4       	brge	.+44     	; 0x1920 <path+0x504>
				travel_till_block(abs(dx));
    18f4:	80 91 27 02 	lds	r24, 0x0227
    18f8:	90 91 28 02 	lds	r25, 0x0228
    18fc:	99 23       	and	r25, r25
    18fe:	1c f4       	brge	.+6      	; 0x1906 <path+0x4ea>
    1900:	91 95       	neg	r25
    1902:	81 95       	neg	r24
    1904:	91 09       	sbc	r25, r1
    1906:	8e da       	rcall	.-2788   	; 0xe24 <travel_till_block>
    1908:	dd c0       	rjmp	.+442    	; 0x1ac4 <path+0x6a8>
				else if(z==0)
				travel(abs(dx));
    190a:	80 91 27 02 	lds	r24, 0x0227
    190e:	90 91 28 02 	lds	r25, 0x0228
    1912:	99 23       	and	r25, r25
    1914:	1c f4       	brge	.+6      	; 0x191c <path+0x500>
    1916:	91 95       	neg	r25
    1918:	81 95       	neg	r24
    191a:	91 09       	sbc	r25, r1
    191c:	a6 d8       	rcall	.-3764   	; 0xa6a <travel>
    191e:	d2 c0       	rjmp	.+420    	; 0x1ac4 <path+0x6a8>
				else
				travel_till_bucket(abs(dx));
    1920:	80 91 27 02 	lds	r24, 0x0227
    1924:	90 91 28 02 	lds	r25, 0x0228
    1928:	99 23       	and	r25, r25
    192a:	1c f4       	brge	.+6      	; 0x1932 <path+0x516>
    192c:	91 95       	neg	r25
    192e:	81 95       	neg	r24
    1930:	91 09       	sbc	r25, r1
    1932:	19 dc       	rcall	.-1998   	; 0x1166 <travel_till_bucket>
    1934:	c7 c0       	rjmp	.+398    	; 0x1ac4 <path+0x6a8>
			}
			else
			{
				check_head_turn(dy);
    1936:	92 dc       	rcall	.-1756   	; 0x125c <check_head_turn>
	            if(z!=0 && z<20)
    1938:	80 91 25 02 	lds	r24, 0x0225
    193c:	90 91 26 02 	lds	r25, 0x0226
    1940:	00 97       	sbiw	r24, 0x00	; 0
    1942:	69 f0       	breq	.+26     	; 0x195e <path+0x542>
    1944:	44 97       	sbiw	r24, 0x14	; 20
    1946:	b4 f4       	brge	.+44     	; 0x1974 <path+0x558>
	            travel_till_block(abs(dy));
    1948:	80 91 3e 02 	lds	r24, 0x023E
    194c:	90 91 3f 02 	lds	r25, 0x023F
    1950:	99 23       	and	r25, r25
    1952:	1c f4       	brge	.+6      	; 0x195a <path+0x53e>
    1954:	91 95       	neg	r25
    1956:	81 95       	neg	r24
    1958:	91 09       	sbc	r25, r1
    195a:	64 da       	rcall	.-2872   	; 0xe24 <travel_till_block>
    195c:	b3 c0       	rjmp	.+358    	; 0x1ac4 <path+0x6a8>
	            else if(z==0)
	            travel(abs(dy));
    195e:	80 91 3e 02 	lds	r24, 0x023E
    1962:	90 91 3f 02 	lds	r25, 0x023F
    1966:	99 23       	and	r25, r25
    1968:	1c f4       	brge	.+6      	; 0x1970 <path+0x554>
    196a:	91 95       	neg	r25
    196c:	81 95       	neg	r24
    196e:	91 09       	sbc	r25, r1
    1970:	7c d8       	rcall	.-3848   	; 0xa6a <travel>
    1972:	a8 c0       	rjmp	.+336    	; 0x1ac4 <path+0x6a8>
	            else
	            travel_till_bucket(abs(dy));
    1974:	80 91 3e 02 	lds	r24, 0x023E
    1978:	90 91 3f 02 	lds	r25, 0x023F
    197c:	99 23       	and	r25, r25
    197e:	1c f4       	brge	.+6      	; 0x1986 <path+0x56a>
    1980:	91 95       	neg	r25
    1982:	81 95       	neg	r24
    1984:	91 09       	sbc	r25, r1
    1986:	ef db       	rcall	.-2082   	; 0x1166 <travel_till_bucket>
    1988:	9d c0       	rjmp	.+314    	; 0x1ac4 <path+0x6a8>
			}
		}
		else
		{
			if(STy%2!=0)
    198a:	80 91 10 02 	lds	r24, 0x0210
    198e:	90 91 11 02 	lds	r25, 0x0211
    1992:	80 ff       	sbrs	r24, 0
    1994:	5b c0       	rjmp	.+182    	; 0x1a4c <path+0x630>
			{
				if (head=='N')
    1996:	20 91 00 02 	lds	r18, 0x0200
    199a:	2e 34       	cpi	r18, 0x4E	; 78
    199c:	31 f4       	brne	.+12     	; 0x19aa <path+0x58e>
					STy=STy+1;
    199e:	01 96       	adiw	r24, 0x01	; 1
    19a0:	90 93 11 02 	sts	0x0211, r25
    19a4:	80 93 10 02 	sts	0x0210, r24
    19a8:	07 c0       	rjmp	.+14     	; 0x19b8 <path+0x59c>
				else if(head=='S')
    19aa:	23 35       	cpi	r18, 0x53	; 83
    19ac:	29 f4       	brne	.+10     	; 0x19b8 <path+0x59c>
					STy=STy-1;
    19ae:	01 97       	sbiw	r24, 0x01	; 1
    19b0:	90 93 11 02 	sts	0x0211, r25
    19b4:	80 93 10 02 	sts	0x0210, r24
				travel(1);
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	56 d8       	rcall	.-3924   	; 0xa6a <travel>
				check_head_turn(dx);
    19be:	80 91 27 02 	lds	r24, 0x0227
    19c2:	90 91 28 02 	lds	r25, 0x0228
    19c6:	4a dc       	rcall	.-1900   	; 0x125c <check_head_turn>
				travel(abs(dx));
    19c8:	80 91 27 02 	lds	r24, 0x0227
    19cc:	90 91 28 02 	lds	r25, 0x0228
    19d0:	99 23       	and	r25, r25
    19d2:	1c f4       	brge	.+6      	; 0x19da <path+0x5be>
    19d4:	91 95       	neg	r25
    19d6:	81 95       	neg	r24
    19d8:	91 09       	sbc	r25, r1
    19da:	47 d8       	rcall	.-3954   	; 0xa6a <travel>
				dy=C_N_D1_y-STy;
    19dc:	80 91 23 02 	lds	r24, 0x0223
    19e0:	90 91 24 02 	lds	r25, 0x0224
    19e4:	20 91 10 02 	lds	r18, 0x0210
    19e8:	30 91 11 02 	lds	r19, 0x0211
    19ec:	82 1b       	sub	r24, r18
    19ee:	93 0b       	sbc	r25, r19
    19f0:	90 93 3f 02 	sts	0x023F, r25
    19f4:	80 93 3e 02 	sts	0x023E, r24
				check_head_turn(dy);
    19f8:	31 dc       	rcall	.-1950   	; 0x125c <check_head_turn>
	            if(z!=0 && z<20)
    19fa:	80 91 25 02 	lds	r24, 0x0225
    19fe:	90 91 26 02 	lds	r25, 0x0226
    1a02:	00 97       	sbiw	r24, 0x00	; 0
    1a04:	69 f0       	breq	.+26     	; 0x1a20 <path+0x604>
    1a06:	44 97       	sbiw	r24, 0x14	; 20
    1a08:	b4 f4       	brge	.+44     	; 0x1a36 <path+0x61a>
	            travel_till_block(abs(dy));
    1a0a:	80 91 3e 02 	lds	r24, 0x023E
    1a0e:	90 91 3f 02 	lds	r25, 0x023F
    1a12:	99 23       	and	r25, r25
    1a14:	1c f4       	brge	.+6      	; 0x1a1c <path+0x600>
    1a16:	91 95       	neg	r25
    1a18:	81 95       	neg	r24
    1a1a:	91 09       	sbc	r25, r1
    1a1c:	03 da       	rcall	.-3066   	; 0xe24 <travel_till_block>
    1a1e:	52 c0       	rjmp	.+164    	; 0x1ac4 <path+0x6a8>
	            else if(z==0)
	            travel(abs(dy));
    1a20:	80 91 3e 02 	lds	r24, 0x023E
    1a24:	90 91 3f 02 	lds	r25, 0x023F
    1a28:	99 23       	and	r25, r25
    1a2a:	1c f4       	brge	.+6      	; 0x1a32 <path+0x616>
    1a2c:	91 95       	neg	r25
    1a2e:	81 95       	neg	r24
    1a30:	91 09       	sbc	r25, r1
    1a32:	1b d8       	rcall	.-4042   	; 0xa6a <travel>
    1a34:	47 c0       	rjmp	.+142    	; 0x1ac4 <path+0x6a8>
	            else
	            travel_till_bucket(abs(dy));
    1a36:	80 91 3e 02 	lds	r24, 0x023E
    1a3a:	90 91 3f 02 	lds	r25, 0x023F
    1a3e:	99 23       	and	r25, r25
    1a40:	1c f4       	brge	.+6      	; 0x1a48 <path+0x62c>
    1a42:	91 95       	neg	r25
    1a44:	81 95       	neg	r24
    1a46:	91 09       	sbc	r25, r1
    1a48:	8e db       	rcall	.-2276   	; 0x1166 <travel_till_bucket>
    1a4a:	3c c0       	rjmp	.+120    	; 0x1ac4 <path+0x6a8>
			}
			else
			{
				check_head_turn(dx);
    1a4c:	ce 01       	movw	r24, r28
    1a4e:	06 dc       	rcall	.-2036   	; 0x125c <check_head_turn>
	            if(z!=0 && z<20)
    1a50:	80 91 25 02 	lds	r24, 0x0225
    1a54:	90 91 26 02 	lds	r25, 0x0226
    1a58:	00 97       	sbiw	r24, 0x00	; 0
    1a5a:	69 f0       	breq	.+26     	; 0x1a76 <path+0x65a>
    1a5c:	44 97       	sbiw	r24, 0x14	; 20
    1a5e:	bc f4       	brge	.+46     	; 0x1a8e <path+0x672>
	            travel_till_block(abs(dx));
    1a60:	80 91 27 02 	lds	r24, 0x0227
    1a64:	90 91 28 02 	lds	r25, 0x0228
    1a68:	99 23       	and	r25, r25
    1a6a:	1c f4       	brge	.+6      	; 0x1a72 <path+0x656>
    1a6c:	91 95       	neg	r25
    1a6e:	81 95       	neg	r24
    1a70:	91 09       	sbc	r25, r1
    1a72:	d8 d9       	rcall	.-3152   	; 0xe24 <travel_till_block>
    1a74:	27 c0       	rjmp	.+78     	; 0x1ac4 <path+0x6a8>
	            else if(z==0)
	            travel(abs(dx));
    1a76:	80 91 27 02 	lds	r24, 0x0227
    1a7a:	90 91 28 02 	lds	r25, 0x0228
    1a7e:	99 23       	and	r25, r25
    1a80:	1c f4       	brge	.+6      	; 0x1a88 <path+0x66c>
    1a82:	91 95       	neg	r25
    1a84:	81 95       	neg	r24
    1a86:	91 09       	sbc	r25, r1
    1a88:	0e 94 35 05 	call	0xa6a	; 0xa6a <travel>
    1a8c:	1b c0       	rjmp	.+54     	; 0x1ac4 <path+0x6a8>
	            else
	            travel_till_bucket(abs(dx));
    1a8e:	80 91 27 02 	lds	r24, 0x0227
    1a92:	90 91 28 02 	lds	r25, 0x0228
    1a96:	99 23       	and	r25, r25
    1a98:	1c f4       	brge	.+6      	; 0x1aa0 <path+0x684>
    1a9a:	91 95       	neg	r25
    1a9c:	81 95       	neg	r24
    1a9e:	91 09       	sbc	r25, r1
    1aa0:	62 db       	rcall	.-2364   	; 0x1166 <travel_till_bucket>
    1aa2:	10 c0       	rjmp	.+32     	; 0x1ac4 <path+0x6a8>
    1aa4:	c8 01       	movw	r24, r16
    1aa6:	8c 2b       	or	r24, r28
    1aa8:	9d 2b       	or	r25, r29
	        else if(z==0)
	        travel(abs(TS));
	        else
	        travel_till_bucket(abs(TS));
		}
		else if(dx%2==0 && dy%2==0)
    1aaa:	80 ff       	sbrs	r24, 0
    1aac:	93 cd       	rjmp	.-1242   	; 0x15d4 <path+0x1b8>
    1aae:	a4 ce       	rjmp	.-696    	; 0x17f8 <path+0x3dc>
    1ab0:	80 2b       	or	r24, r16
    1ab2:	91 2b       	or	r25, r17
    1ab4:	80 ff       	sbrs	r24, 0
    1ab6:	8e cd       	rjmp	.-1252   	; 0x15d4 <path+0x1b8>
    1ab8:	90 2f       	mov	r25, r16
    1aba:	81 2f       	mov	r24, r17
		else
		{
			/*odd + even */
			if(dx%2!=0 && dy%2==0)
			{
				odd=dx;
    1abc:	8e 01       	movw	r16, r28
				even=dy;
    1abe:	c9 2f       	mov	r28, r25
    1ac0:	d8 2f       	mov	r29, r24
    1ac2:	9a ce       	rjmp	.-716    	; 0x17f8 <path+0x3dc>
	            else
	            travel_till_bucket(abs(dx));
			}
		}
	}
}
    1ac4:	df 91       	pop	r29
    1ac6:	cf 91       	pop	r28
    1ac8:	1f 91       	pop	r17
    1aca:	0f 91       	pop	r16
    1acc:	08 95       	ret

00001ace <find_coorD1>:
void find_coorD1(int a)
{
 //while(ic<(sizeof(D1))/sizeof(D1[0])){
 //if (D1[ic]==a)
 //{
  NOx=(a%3)*2+1;
    1ace:	63 e0       	ldi	r22, 0x03	; 3
    1ad0:	70 e0       	ldi	r23, 0x00	; 0
    1ad2:	cb d3       	rcall	.+1942   	; 0x226a <__divmodhi4>
    1ad4:	88 0f       	add	r24, r24
    1ad6:	99 1f       	adc	r25, r25
    1ad8:	01 96       	adiw	r24, 0x01	; 1
    1ada:	90 93 a7 02 	sts	0x02A7, r25
    1ade:	80 93 a6 02 	sts	0x02A6, r24
  NOy=8-(a/3)*2-1;
    1ae2:	84 e0       	ldi	r24, 0x04	; 4
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	86 1b       	sub	r24, r22
    1ae8:	97 0b       	sbc	r25, r23
    1aea:	88 0f       	add	r24, r24
    1aec:	99 1f       	adc	r25, r25
    1aee:	01 97       	sbiw	r24, 0x01	; 1
    1af0:	90 93 20 02 	sts	0x0220, r25
    1af4:	80 93 1f 02 	sts	0x021F, r24
    1af8:	08 95       	ret

00001afa <go_to_N2>:
* Logic: < move bot from current location to node N2 by the help of path function >
* Example Call: <go_to_N2();>
*/
void go_to_N2()
{
 dx=6-STx;
    1afa:	20 91 01 02 	lds	r18, 0x0201
    1afe:	30 91 02 02 	lds	r19, 0x0202
    1b02:	86 e0       	ldi	r24, 0x06	; 6
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	82 1b       	sub	r24, r18
    1b08:	93 0b       	sbc	r25, r19
    1b0a:	90 93 28 02 	sts	0x0228, r25
    1b0e:	80 93 27 02 	sts	0x0227, r24
 dy=4-STy;
    1b12:	20 91 10 02 	lds	r18, 0x0210
    1b16:	30 91 11 02 	lds	r19, 0x0211
    1b1a:	64 e0       	ldi	r22, 0x04	; 4
    1b1c:	70 e0       	ldi	r23, 0x00	; 0
    1b1e:	62 1b       	sub	r22, r18
    1b20:	73 0b       	sbc	r23, r19
    1b22:	70 93 3f 02 	sts	0x023F, r23
    1b26:	60 93 3e 02 	sts	0x023E, r22
 path(dx,dy);
    1b2a:	78 cc       	rjmp	.-1808   	; 0x141c <path>
    1b2c:	08 95       	ret

00001b2e <N2_to_N3>:
* Logic: < move bot from node N2 to node N3 by the help of path function >
* Example Call: <N2_to_N3();>
*/
void N2_to_N3()
{
 dx=2;
    1b2e:	82 e0       	ldi	r24, 0x02	; 2
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	90 93 28 02 	sts	0x0228, r25
    1b36:	80 93 27 02 	sts	0x0227, r24
 dy=0;
    1b3a:	10 92 3f 02 	sts	0x023F, r1
    1b3e:	10 92 3e 02 	sts	0x023E, r1
 path(dx,dy);
    1b42:	60 e0       	ldi	r22, 0x00	; 0
    1b44:	70 e0       	ldi	r23, 0x00	; 0
    1b46:	6a cc       	rjmp	.-1836   	; 0x141c <path>
    1b48:	08 95       	ret

00001b4a <find_coorD2>:
	//int i3=1;
	//while(1)
	//{
	//if (D2[i3]==a)
	//{
		NOx=(D2[a]%4*2)+1;
    1b4a:	88 0f       	add	r24, r24
    1b4c:	99 1f       	adc	r25, r25
    1b4e:	fc 01       	movw	r30, r24
    1b50:	e7 5d       	subi	r30, 0xD7	; 215
    1b52:	fd 4f       	sbci	r31, 0xFD	; 253
    1b54:	40 81       	ld	r20, Z
    1b56:	51 81       	ldd	r21, Z+1	; 0x01
    1b58:	ca 01       	movw	r24, r20
    1b5a:	83 70       	andi	r24, 0x03	; 3
    1b5c:	90 78       	andi	r25, 0x80	; 128
    1b5e:	99 23       	and	r25, r25
    1b60:	24 f4       	brge	.+8      	; 0x1b6a <find_coorD2+0x20>
    1b62:	01 97       	sbiw	r24, 0x01	; 1
    1b64:	8c 6f       	ori	r24, 0xFC	; 252
    1b66:	9f 6f       	ori	r25, 0xFF	; 255
    1b68:	01 96       	adiw	r24, 0x01	; 1
    1b6a:	88 0f       	add	r24, r24
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	01 96       	adiw	r24, 0x01	; 1
    1b70:	90 93 a7 02 	sts	0x02A7, r25
    1b74:	80 93 a6 02 	sts	0x02A6, r24
		NOy=(((23-D2[a])/4)*2+1);
    1b78:	27 e1       	ldi	r18, 0x17	; 23
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	24 1b       	sub	r18, r20
    1b7e:	35 0b       	sbc	r19, r21
    1b80:	c9 01       	movw	r24, r18
    1b82:	99 23       	and	r25, r25
    1b84:	0c f4       	brge	.+2      	; 0x1b88 <find_coorD2+0x3e>
    1b86:	03 96       	adiw	r24, 0x03	; 3
    1b88:	95 95       	asr	r25
    1b8a:	87 95       	ror	r24
    1b8c:	81 60       	ori	r24, 0x01	; 1
    1b8e:	90 93 20 02 	sts	0x0220, r25
    1b92:	80 93 1f 02 	sts	0x021F, r24
    1b96:	08 95       	ret

00001b98 <N3_to_targetNo>:
* Logic: < move bot from N3 node to the number in the D2 cell>
* Example Call: <N3_to_targetNo();>
*/
void N3_to_targetNo()
{
	find_coorD2(2*p);
    1b98:	80 91 0e 02 	lds	r24, 0x020E
    1b9c:	90 91 0f 02 	lds	r25, 0x020F
    1ba0:	88 0f       	add	r24, r24
    1ba2:	99 1f       	adc	r25, r25
    1ba4:	d2 df       	rcall	.-92     	; 0x1b4a <find_coorD2>
	if(NOy>6)
    1ba6:	80 91 1f 02 	lds	r24, 0x021F
    1baa:	90 91 20 02 	lds	r25, 0x0220
    1bae:	87 30       	cpi	r24, 0x07	; 7
    1bb0:	91 05       	cpc	r25, r1
    1bb2:	7c f0       	brlt	.+30     	; 0x1bd2 <N3_to_targetNo+0x3a>
	{
		Dest_x=NOx-1;
    1bb4:	20 91 a6 02 	lds	r18, 0x02A6
    1bb8:	30 91 a7 02 	lds	r19, 0x02A7
    1bbc:	21 50       	subi	r18, 0x01	; 1
    1bbe:	31 09       	sbc	r19, r1
    1bc0:	30 93 22 02 	sts	0x0222, r19
    1bc4:	20 93 21 02 	sts	0x0221, r18
		Dest_y=NOy;
    1bc8:	90 93 18 02 	sts	0x0218, r25
    1bcc:	80 93 17 02 	sts	0x0217, r24
    1bd0:	0d c0       	rjmp	.+26     	; 0x1bec <N3_to_targetNo+0x54>
	}
	else
	{
		Dest_x=NOx;
    1bd2:	20 91 a6 02 	lds	r18, 0x02A6
    1bd6:	30 91 a7 02 	lds	r19, 0x02A7
    1bda:	30 93 22 02 	sts	0x0222, r19
    1bde:	20 93 21 02 	sts	0x0221, r18
		Dest_y=NOy+1;
    1be2:	01 96       	adiw	r24, 0x01	; 1
    1be4:	90 93 18 02 	sts	0x0218, r25
    1be8:	80 93 17 02 	sts	0x0217, r24
	}
	dx=Dest_x-STx;
    1bec:	80 91 21 02 	lds	r24, 0x0221
    1bf0:	90 91 22 02 	lds	r25, 0x0222
    1bf4:	20 91 01 02 	lds	r18, 0x0201
    1bf8:	30 91 02 02 	lds	r19, 0x0202
    1bfc:	82 1b       	sub	r24, r18
    1bfe:	93 0b       	sbc	r25, r19
    1c00:	90 93 28 02 	sts	0x0228, r25
    1c04:	80 93 27 02 	sts	0x0227, r24
	dy=Dest_y-STy;
    1c08:	60 91 17 02 	lds	r22, 0x0217
    1c0c:	70 91 18 02 	lds	r23, 0x0218
    1c10:	20 91 10 02 	lds	r18, 0x0210
    1c14:	30 91 11 02 	lds	r19, 0x0211
    1c18:	62 1b       	sub	r22, r18
    1c1a:	73 0b       	sbc	r23, r19
    1c1c:	70 93 3f 02 	sts	0x023F, r23
    1c20:	60 93 3e 02 	sts	0x023E, r22
	
	path(dx,dy);
    1c24:	fb cb       	rjmp	.-2058   	; 0x141c <path>
    1c26:	08 95       	ret

00001c28 <dest_to_N3>:
* Logic: < move bot from current position in D2 to node N3>
* Example Call: <dest_to_N3();>
*/
void dest_to_N3()
{
	dx=(0-Dest_x);
    1c28:	80 91 21 02 	lds	r24, 0x0221
    1c2c:	90 91 22 02 	lds	r25, 0x0222
    1c30:	91 95       	neg	r25
    1c32:	81 95       	neg	r24
    1c34:	91 09       	sbc	r25, r1
    1c36:	90 93 28 02 	sts	0x0228, r25
    1c3a:	80 93 27 02 	sts	0x0227, r24
	dy=(6-Dest_y);
    1c3e:	20 91 17 02 	lds	r18, 0x0217
    1c42:	30 91 18 02 	lds	r19, 0x0218
    1c46:	66 e0       	ldi	r22, 0x06	; 6
    1c48:	70 e0       	ldi	r23, 0x00	; 0
    1c4a:	62 1b       	sub	r22, r18
    1c4c:	73 0b       	sbc	r23, r19
    1c4e:	70 93 3f 02 	sts	0x023F, r23
    1c52:	60 93 3e 02 	sts	0x023E, r22
	path(dx,dy);
    1c56:	e2 cb       	rjmp	.-2108   	; 0x141c <path>
    1c58:	08 95       	ret

00001c5a <N3_to_N2>:
* Logic: < move bot from node N3 to N2>
* Example Call: <N3_to_N2();>
*/
void N3_to_N2()
{
	dx=-2;
    1c5a:	8e ef       	ldi	r24, 0xFE	; 254
    1c5c:	9f ef       	ldi	r25, 0xFF	; 255
    1c5e:	90 93 28 02 	sts	0x0228, r25
    1c62:	80 93 27 02 	sts	0x0227, r24
	dy=0;
    1c66:	10 92 3f 02 	sts	0x023F, r1
    1c6a:	10 92 3e 02 	sts	0x023E, r1
	path(dx,dy);
    1c6e:	60 e0       	ldi	r22, 0x00	; 0
    1c70:	70 e0       	ldi	r23, 0x00	; 0
    1c72:	d4 cb       	rjmp	.-2136   	; 0x141c <path>
    1c74:	08 95       	ret

00001c76 <main>:
* Logic: Helps the bot to traverse through the arena 
* Example Call: Called automatically by the Operating System
*
*/
int main(void)
{
    1c76:	7f 92       	push	r7
    1c78:	8f 92       	push	r8
    1c7a:	9f 92       	push	r9
    1c7c:	af 92       	push	r10
    1c7e:	bf 92       	push	r11
    1c80:	cf 92       	push	r12
    1c82:	df 92       	push	r13
    1c84:	ef 92       	push	r14
    1c86:	ff 92       	push	r15
    1c88:	0f 93       	push	r16
    1c8a:	1f 93       	push	r17
    1c8c:	cf 93       	push	r28
    1c8e:	df 93       	push	r29
  init_devices();
    1c90:	0e 94 4b 02 	call	0x496	; 0x496 <init_devices>
  servo_3(145);
    1c94:	81 e9       	ldi	r24, 0x91	; 145
    1c96:	95 d9       	rcall	.-3286   	; 0xfc2 <servo_3>
    1c98:	2f ef       	ldi	r18, 0xFF	; 255
    1c9a:	4f e7       	ldi	r20, 0x7F	; 127
    1c9c:	56 e1       	ldi	r21, 0x16	; 22
    1c9e:	21 50       	subi	r18, 0x01	; 1
    1ca0:	40 40       	sbci	r20, 0x00	; 0
    1ca2:	50 40       	sbci	r21, 0x00	; 0
    1ca4:	e1 f7       	brne	.-8      	; 0x1c9e <main+0x28>
    1ca6:	00 c0       	rjmp	.+0      	; 0x1ca8 <main+0x32>
    1ca8:	00 00       	nop
  _delay_ms(500);
  servo_3_free();
    1caa:	b1 d9       	rcall	.-3230   	; 0x100e <servo_3_free>

void servo_1(unsigned char degrees)  
{
  float PositionPanServo = 0;
  PositionPanServo = ((float)degrees / 1.86) + 35.0;
  OCR1AH = 0x00;
    1cac:	a9 e8       	ldi	r26, 0x89	; 137
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	1c 92       	st	X, r1
  OCR1AL = (unsigned char) PositionPanServo;
    1cb2:	e8 e8       	ldi	r30, 0x88	; 136
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	8e e2       	ldi	r24, 0x2E	; 46
    1cb8:	80 83       	st	Z, r24
    1cba:	8f ef       	ldi	r24, 0xFF	; 255
    1cbc:	9f ef       	ldi	r25, 0xFF	; 255
    1cbe:	21 e1       	ldi	r18, 0x11	; 17
    1cc0:	81 50       	subi	r24, 0x01	; 1
    1cc2:	90 40       	sbci	r25, 0x00	; 0
    1cc4:	20 40       	sbci	r18, 0x00	; 0
    1cc6:	e1 f7       	brne	.-8      	; 0x1cc0 <main+0x4a>
    1cc8:	00 c0       	rjmp	.+0      	; 0x1cca <main+0x54>
    1cca:	00 00       	nop

void servo_1(unsigned char degrees)  
{
  float PositionPanServo = 0;
  PositionPanServo = ((float)degrees / 1.86) + 35.0;
  OCR1AH = 0x00;
    1ccc:	1c 92       	st	X, r1
  OCR1AL = (unsigned char) PositionPanServo;
    1cce:	88 e4       	ldi	r24, 0x48	; 72
    1cd0:	80 83       	st	Z, r24
    1cd2:	4f ef       	ldi	r20, 0xFF	; 255
    1cd4:	5f ef       	ldi	r21, 0xFF	; 255
    1cd6:	81 e1       	ldi	r24, 0x11	; 17
    1cd8:	41 50       	subi	r20, 0x01	; 1
    1cda:	50 40       	sbci	r21, 0x00	; 0
    1cdc:	80 40       	sbci	r24, 0x00	; 0
    1cde:	e1 f7       	brne	.-8      	; 0x1cd8 <main+0x62>
    1ce0:	00 c0       	rjmp	.+0      	; 0x1ce2 <main+0x6c>
    1ce2:	00 00       	nop
  servo_1(22);
  _delay_ms(400);
  servo_1(70);
  _delay_ms(400);
  servo_1_free();
    1ce4:	86 d9       	rcall	.-3316   	; 0xff2 <servo_1_free>
  while(1)
  {
	  if((PINE & 0x80) != 0x80) //switch is  pressed
    1ce6:	67 99       	sbic	0x0c, 7	; 12
    1ce8:	fe cf       	rjmp	.-4      	; 0x1ce6 <main+0x70>
	  {
		  break;
	  }
  }
  serial_read();
    1cea:	0e 94 0f 03 	call	0x61e	; 0x61e <serial_read>

  travel(2);	
    1cee:	82 e0       	ldi	r24, 0x02	; 2
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	0e 94 35 05 	call	0xa6a	; 0xa6a <travel>
  
  while(D2[2*p]!=NULL)
    1cf6:	60 91 0e 02 	lds	r22, 0x020E
    1cfa:	70 91 0f 02 	lds	r23, 0x020F
    1cfe:	cb 01       	movw	r24, r22
    1d00:	88 0f       	add	r24, r24
    1d02:	99 1f       	adc	r25, r25
    1d04:	fc 01       	movw	r30, r24
    1d06:	ee 0f       	add	r30, r30
    1d08:	ff 1f       	adc	r31, r31
    1d0a:	e7 5d       	subi	r30, 0xD7	; 215
    1d0c:	fd 4f       	sbci	r31, 0xFD	; 253
    1d0e:	20 81       	ld	r18, Z
    1d10:	31 81       	ldd	r19, Z+1	; 0x01
    1d12:	23 2b       	or	r18, r19
    1d14:	09 f4       	brne	.+2      	; 0x1d18 <main+0xa2>
    1d16:	12 c1       	rjmp	.+548    	; 0x1f3c <main+0x2c6>
  {
	  int sum_d1=0;
	  z=0;
	  for(int y=0;y<10;y++)
	  {
		sum_d1=sum_d1+D1[A_Traversed_D1[p][y]] ; 
    1d18:	0f 2e       	mov	r0, r31
    1d1a:	f4 e1       	ldi	r31, 0x14	; 20
    1d1c:	bf 2e       	mov	r11, r31
    1d1e:	f0 2d       	mov	r31, r0
		if(sum_d1==D2[2*p+1])
			{z++;
			break;}
		else
			z++;	
    1d20:	88 24       	eor	r8, r8
    1d22:	83 94       	inc	r8
    1d24:	71 2c       	mov	r7, r1
    1d26:	0f 2e       	mov	r0, r31
    1d28:	fa e0       	ldi	r31, 0x0A	; 10
    1d2a:	9f 2e       	mov	r9, r31
    1d2c:	f0 2d       	mov	r31, r0
    1d2e:	a1 2c       	mov	r10, r1

	  go_to_N2();

	  N2_to_N3();
	  STx=0;
	  STy=6;
    1d30:	c6 e0       	ldi	r28, 0x06	; 6
    1d32:	d0 e0       	ldi	r29, 0x00	; 0
      z=30;
    1d34:	0f 2e       	mov	r0, r31
    1d36:	fe e1       	ldi	r31, 0x1E	; 30
    1d38:	ef 2e       	mov	r14, r31
    1d3a:	f1 2c       	mov	r15, r1
    1d3c:	f0 2d       	mov	r31, r0
		  buzzer_on();
		  _delay_ms(5000);
		  buzzer_off();
	  }
	  STx=6;
	  STy=4;
    1d3e:	04 e0       	ldi	r16, 0x04	; 4
    1d40:	10 e0       	ldi	r17, 0x00	; 0
  travel(2);	
  
  while(D2[2*p]!=NULL)
  {
	  int sum_d1=0;
	  z=0;
    1d42:	10 92 26 02 	sts	0x0226, r1
    1d46:	10 92 25 02 	sts	0x0225, r1
	  for(int y=0;y<10;y++)
	  {
		sum_d1=sum_d1+D1[A_Traversed_D1[p][y]] ; 
    1d4a:	b6 9e       	mul	r11, r22
    1d4c:	f0 01       	movw	r30, r0
    1d4e:	b7 9e       	mul	r11, r23
    1d50:	f0 0d       	add	r31, r0
    1d52:	11 24       	eor	r1, r1
    1d54:	e0 54       	subi	r30, 0x40	; 64
    1d56:	fd 4f       	sbci	r31, 0xFD	; 253
    1d58:	01 90       	ld	r0, Z+
    1d5a:	f0 81       	ld	r31, Z
    1d5c:	e0 2d       	mov	r30, r0
    1d5e:	ee 0f       	add	r30, r30
    1d60:	ff 1f       	adc	r31, r31
    1d62:	e8 55       	subi	r30, 0x58	; 88
    1d64:	fd 4f       	sbci	r31, 0xFD	; 253
    1d66:	20 81       	ld	r18, Z
    1d68:	31 81       	ldd	r19, Z+1	; 0x01
		if(sum_d1==D2[2*p+1])
    1d6a:	01 96       	adiw	r24, 0x01	; 1
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	ee 0f       	add	r30, r30
    1d70:	ff 1f       	adc	r31, r31
    1d72:	e7 5d       	subi	r30, 0xD7	; 215
    1d74:	fd 4f       	sbci	r31, 0xFD	; 253
    1d76:	40 81       	ld	r20, Z
    1d78:	51 81       	ldd	r21, Z+1	; 0x01
    1d7a:	24 17       	cp	r18, r20
    1d7c:	35 07       	cpc	r19, r21
    1d7e:	09 f0       	breq	.+2      	; 0x1d82 <main+0x10c>
    1d80:	cc c0       	rjmp	.+408    	; 0x1f1a <main+0x2a4>
    1d82:	11 c0       	rjmp	.+34     	; 0x1da6 <main+0x130>
  {
	  int sum_d1=0;
	  z=0;
	  for(int y=0;y<10;y++)
	  {
		sum_d1=sum_d1+D1[A_Traversed_D1[p][y]] ; 
    1d84:	ed 91       	ld	r30, X+
    1d86:	fd 91       	ld	r31, X+
    1d88:	ee 0f       	add	r30, r30
    1d8a:	ff 1f       	adc	r31, r31
    1d8c:	e8 55       	subi	r30, 0x58	; 88
    1d8e:	fd 4f       	sbci	r31, 0xFD	; 253
    1d90:	60 81       	ld	r22, Z
    1d92:	71 81       	ldd	r23, Z+1	; 0x01
    1d94:	26 0f       	add	r18, r22
    1d96:	37 1f       	adc	r19, r23
		if(sum_d1==D2[2*p+1])
    1d98:	42 17       	cp	r20, r18
    1d9a:	53 07       	cpc	r21, r19
    1d9c:	99 f4       	brne	.+38     	; 0x1dc4 <main+0x14e>
    1d9e:	90 93 26 02 	sts	0x0226, r25
    1da2:	80 93 25 02 	sts	0x0225, r24
			{z++;
    1da6:	c0 90 25 02 	lds	r12, 0x0225
    1daa:	d0 90 26 02 	lds	r13, 0x0226
    1dae:	9f ef       	ldi	r25, 0xFF	; 255
    1db0:	c9 1a       	sub	r12, r25
    1db2:	d9 0a       	sbc	r13, r25
    1db4:	d0 92 26 02 	sts	0x0226, r13
    1db8:	c0 92 25 02 	sts	0x0225, r12
		if(A_Traversed_D1[p][y]==-1)
			A_Traversed_D1[p][y]=0;*/
	  }
	  /*calling*/
	  int pos_D1=z;
	  while(z)
    1dbc:	c1 14       	cp	r12, r1
    1dbe:	d1 04       	cpc	r13, r1
    1dc0:	59 f4       	brne	.+22     	; 0x1dd8 <main+0x162>
    1dc2:	4d c0       	rjmp	.+154    	; 0x1e5e <main+0x1e8>
		sum_d1=sum_d1+D1[A_Traversed_D1[p][y]] ; 
		if(sum_d1==D2[2*p+1])
			{z++;
			break;}
		else
			z++;	
    1dc4:	01 96       	adiw	r24, 0x01	; 1
  
  while(D2[2*p]!=NULL)
  {
	  int sum_d1=0;
	  z=0;
	  for(int y=0;y<10;y++)
    1dc6:	8a 30       	cpi	r24, 0x0A	; 10
    1dc8:	91 05       	cpc	r25, r1
    1dca:	e1 f6       	brne	.-72     	; 0x1d84 <main+0x10e>
    1dcc:	90 92 25 02 	sts	0x0225, r9
    1dd0:	a0 92 26 02 	sts	0x0226, r10
			z++;
		if(A_Traversed_D1[p][y]==-1)
			A_Traversed_D1[p][y]=0;*/
	  }
	  /*calling*/
	  int pos_D1=z;
    1dd4:	c9 2c       	mov	r12, r9
    1dd6:	da 2c       	mov	r13, r10
	  int sum_d1=0;
	  z=0;
	  for(int y=0;y<10;y++)
	  {
		sum_d1=sum_d1+D1[A_Traversed_D1[p][y]] ; 
		if(sum_d1==D2[2*p+1])
    1dd8:	c6 01       	movw	r24, r12
	  /*calling*/
	  int pos_D1=z;
	  while(z)
	  {
	  // shortest_no_from_ST();
	   find_coorD1(A_Traversed_D1[p][pos_D1-z]);
    1dda:	20 91 0e 02 	lds	r18, 0x020E
    1dde:	30 91 0f 02 	lds	r19, 0x020F
    1de2:	a6 01       	movw	r20, r12
    1de4:	48 1b       	sub	r20, r24
    1de6:	59 0b       	sbc	r21, r25
    1de8:	f9 01       	movw	r30, r18
    1dea:	ee 0f       	add	r30, r30
    1dec:	ff 1f       	adc	r31, r31
    1dee:	22 0f       	add	r18, r18
    1df0:	33 1f       	adc	r19, r19
    1df2:	22 0f       	add	r18, r18
    1df4:	33 1f       	adc	r19, r19
    1df6:	22 0f       	add	r18, r18
    1df8:	33 1f       	adc	r19, r19
    1dfa:	e2 0f       	add	r30, r18
    1dfc:	f3 1f       	adc	r31, r19
    1dfe:	e4 0f       	add	r30, r20
    1e00:	f5 1f       	adc	r31, r21
    1e02:	ee 0f       	add	r30, r30
    1e04:	ff 1f       	adc	r31, r31
    1e06:	e0 54       	subi	r30, 0x40	; 64
    1e08:	fd 4f       	sbci	r31, 0xFD	; 253
    1e0a:	80 81       	ld	r24, Z
    1e0c:	91 81       	ldd	r25, Z+1	; 0x01
    1e0e:	5f de       	rcall	.-834    	; 0x1ace <find_coorD1>
	   C_N_D1_x=NOx;          //since sum-no's are in the arranged shortest format
    1e10:	80 91 a6 02 	lds	r24, 0x02A6
    1e14:	90 91 a7 02 	lds	r25, 0x02A7
    1e18:	90 93 41 02 	sts	0x0241, r25
    1e1c:	80 93 40 02 	sts	0x0240, r24
	   C_N_D1_y=NOy;	  
    1e20:	80 91 1f 02 	lds	r24, 0x021F
    1e24:	90 91 20 02 	lds	r25, 0x0220
    1e28:	90 93 24 02 	sts	0x0224, r25
    1e2c:	80 93 23 02 	sts	0x0223, r24
	   Calculate_dx_dy();
    1e30:	b4 d9       	rcall	.-3224   	; 0x119a <Calculate_dx_dy>
	   path(dx,dy);
    1e32:	60 91 3e 02 	lds	r22, 0x023E
    1e36:	70 91 3f 02 	lds	r23, 0x023F
    1e3a:	80 91 27 02 	lds	r24, 0x0227
    1e3e:	90 91 28 02 	lds	r25, 0x0228
    1e42:	ec da       	rcall	.-2600   	; 0x141c <path>
	   pick_block();
    1e44:	eb d8       	rcall	.-3626   	; 0x101c <pick_block>
	   z--;
    1e46:	80 91 25 02 	lds	r24, 0x0225
    1e4a:	90 91 26 02 	lds	r25, 0x0226
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	90 93 26 02 	sts	0x0226, r25
    1e54:	80 93 25 02 	sts	0x0225, r24
		if(A_Traversed_D1[p][y]==-1)
			A_Traversed_D1[p][y]=0;*/
	  }
	  /*calling*/
	  int pos_D1=z;
	  while(z)
    1e58:	00 97       	sbiw	r24, 0x00	; 0
    1e5a:	09 f0       	breq	.+2      	; 0x1e5e <main+0x1e8>
    1e5c:	be cf       	rjmp	.-132    	; 0x1dda <main+0x164>
	   path(dx,dy);
	   pick_block();
	   z--;
	  }

	  go_to_N2();
    1e5e:	4d de       	rcall	.-870    	; 0x1afa <go_to_N2>

	  N2_to_N3();
    1e60:	66 de       	rcall	.-820    	; 0x1b2e <N2_to_N3>
	  STx=0;
    1e62:	10 92 02 02 	sts	0x0202, r1
    1e66:	10 92 01 02 	sts	0x0201, r1
	  STy=6;
    1e6a:	d0 93 11 02 	sts	0x0211, r29
    1e6e:	c0 93 10 02 	sts	0x0210, r28
      z=30;
    1e72:	f0 92 26 02 	sts	0x0226, r15
    1e76:	e0 92 25 02 	sts	0x0225, r14
	  N3_to_targetNo();
    1e7a:	8e de       	rcall	.-740    	; 0x1b98 <N3_to_targetNo>
      z=0;
    1e7c:	10 92 26 02 	sts	0x0226, r1
    1e80:	10 92 25 02 	sts	0x0225, r1
	  buzzer_on();
    1e84:	0e 94 3d 01 	call	0x27a	; 0x27a <buzzer_on>
    1e88:	5f ef       	ldi	r21, 0xFF	; 255
    1e8a:	8f ef       	ldi	r24, 0xFF	; 255
    1e8c:	9c e2       	ldi	r25, 0x2C	; 44
    1e8e:	51 50       	subi	r21, 0x01	; 1
    1e90:	80 40       	sbci	r24, 0x00	; 0
    1e92:	90 40       	sbci	r25, 0x00	; 0
    1e94:	e1 f7       	brne	.-8      	; 0x1e8e <main+0x218>
    1e96:	00 c0       	rjmp	.+0      	; 0x1e98 <main+0x222>
    1e98:	00 00       	nop
	  _delay_ms(1000);
	  buzzer_off();	  
    1e9a:	0e 94 41 01 	call	0x282	; 0x282 <buzzer_off>
	  if(D2[2*(p+1)]!=NULL)
    1e9e:	e0 91 0e 02 	lds	r30, 0x020E
    1ea2:	f0 91 0f 02 	lds	r31, 0x020F
    1ea6:	ee 0f       	add	r30, r30
    1ea8:	ff 1f       	adc	r31, r31
    1eaa:	ee 0f       	add	r30, r30
    1eac:	ff 1f       	adc	r31, r31
    1eae:	e3 5d       	subi	r30, 0xD3	; 211
    1eb0:	fd 4f       	sbci	r31, 0xFD	; 253
    1eb2:	80 81       	ld	r24, Z
    1eb4:	91 81       	ldd	r25, Z+1	; 0x01
    1eb6:	89 2b       	or	r24, r25
    1eb8:	19 f0       	breq	.+6      	; 0x1ec0 <main+0x24a>
	  {
		dest_to_N3();
    1eba:	b6 de       	rcall	.-660    	; 0x1c28 <dest_to_N3>
		N3_to_N2();
    1ebc:	ce de       	rcall	.-612    	; 0x1c5a <N3_to_N2>
    1ebe:	0d c0       	rjmp	.+26     	; 0x1eda <main+0x264>
	  }
	  else
	  {
		  buzzer_on();
    1ec0:	0e 94 3d 01 	call	0x27a	; 0x27a <buzzer_on>
    1ec4:	2f ef       	ldi	r18, 0xFF	; 255
    1ec6:	4f ef       	ldi	r20, 0xFF	; 255
    1ec8:	50 ee       	ldi	r21, 0xE0	; 224
    1eca:	21 50       	subi	r18, 0x01	; 1
    1ecc:	40 40       	sbci	r20, 0x00	; 0
    1ece:	50 40       	sbci	r21, 0x00	; 0
    1ed0:	e1 f7       	brne	.-8      	; 0x1eca <main+0x254>
    1ed2:	00 c0       	rjmp	.+0      	; 0x1ed4 <main+0x25e>
    1ed4:	00 00       	nop
		  _delay_ms(5000);
		  buzzer_off();
    1ed6:	0e 94 41 01 	call	0x282	; 0x282 <buzzer_off>
	  }
	  STx=6;
    1eda:	d0 93 02 02 	sts	0x0202, r29
    1ede:	c0 93 01 02 	sts	0x0201, r28
	  STy=4;
    1ee2:	10 93 11 02 	sts	0x0211, r17
    1ee6:	00 93 10 02 	sts	0x0210, r16
	  p++;
    1eea:	60 91 0e 02 	lds	r22, 0x020E
    1eee:	70 91 0f 02 	lds	r23, 0x020F
    1ef2:	6f 5f       	subi	r22, 0xFF	; 255
    1ef4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ef6:	70 93 0f 02 	sts	0x020F, r23
    1efa:	60 93 0e 02 	sts	0x020E, r22
  }
  serial_read();

  travel(2);	
  
  while(D2[2*p]!=NULL)
    1efe:	cb 01       	movw	r24, r22
    1f00:	88 0f       	add	r24, r24
    1f02:	99 1f       	adc	r25, r25
    1f04:	fc 01       	movw	r30, r24
    1f06:	ee 0f       	add	r30, r30
    1f08:	ff 1f       	adc	r31, r31
    1f0a:	e7 5d       	subi	r30, 0xD7	; 215
    1f0c:	fd 4f       	sbci	r31, 0xFD	; 253
    1f0e:	20 81       	ld	r18, Z
    1f10:	31 81       	ldd	r19, Z+1	; 0x01
    1f12:	23 2b       	or	r18, r19
    1f14:	09 f0       	breq	.+2      	; 0x1f18 <main+0x2a2>
    1f16:	15 cf       	rjmp	.-470    	; 0x1d42 <main+0xcc>
    1f18:	11 c0       	rjmp	.+34     	; 0x1f3c <main+0x2c6>
	  int sum_d1=0;
	  z=0;
	  for(int y=0;y<10;y++)
	  {
		sum_d1=sum_d1+D1[A_Traversed_D1[p][y]] ; 
		if(sum_d1==D2[2*p+1])
    1f1a:	88 0f       	add	r24, r24
    1f1c:	99 1f       	adc	r25, r25
    1f1e:	fc 01       	movw	r30, r24
    1f20:	e7 5d       	subi	r30, 0xD7	; 215
    1f22:	fd 4f       	sbci	r31, 0xFD	; 253
    1f24:	40 81       	ld	r20, Z
    1f26:	51 81       	ldd	r21, Z+1	; 0x01
    1f28:	b6 9e       	mul	r11, r22
    1f2a:	d0 01       	movw	r26, r0
    1f2c:	b7 9e       	mul	r11, r23
    1f2e:	b0 0d       	add	r27, r0
    1f30:	11 24       	eor	r1, r1
    1f32:	ae 53       	subi	r26, 0x3E	; 62
    1f34:	bd 4f       	sbci	r27, 0xFD	; 253
    1f36:	88 2d       	mov	r24, r8
    1f38:	97 2d       	mov	r25, r7
    1f3a:	24 cf       	rjmp	.-440    	; 0x1d84 <main+0x10e>
	  STx=6;
	  STy=4;
	  p++;
	
  }  
}  
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	df 91       	pop	r29
    1f42:	cf 91       	pop	r28
    1f44:	1f 91       	pop	r17
    1f46:	0f 91       	pop	r16
    1f48:	ff 90       	pop	r15
    1f4a:	ef 90       	pop	r14
    1f4c:	df 90       	pop	r13
    1f4e:	cf 90       	pop	r12
    1f50:	bf 90       	pop	r11
    1f52:	af 90       	pop	r10
    1f54:	9f 90       	pop	r9
    1f56:	8f 90       	pop	r8
    1f58:	7f 90       	pop	r7
    1f5a:	08 95       	ret

00001f5c <__subsf3>:
    1f5c:	50 58       	subi	r21, 0x80	; 128

00001f5e <__addsf3>:
    1f5e:	bb 27       	eor	r27, r27
    1f60:	aa 27       	eor	r26, r26
    1f62:	0e d0       	rcall	.+28     	; 0x1f80 <__addsf3x>
    1f64:	48 c1       	rjmp	.+656    	; 0x21f6 <__fp_round>
    1f66:	39 d1       	rcall	.+626    	; 0x21da <__fp_pscA>
    1f68:	30 f0       	brcs	.+12     	; 0x1f76 <__addsf3+0x18>
    1f6a:	3e d1       	rcall	.+636    	; 0x21e8 <__fp_pscB>
    1f6c:	20 f0       	brcs	.+8      	; 0x1f76 <__addsf3+0x18>
    1f6e:	31 f4       	brne	.+12     	; 0x1f7c <__addsf3+0x1e>
    1f70:	9f 3f       	cpi	r25, 0xFF	; 255
    1f72:	11 f4       	brne	.+4      	; 0x1f78 <__addsf3+0x1a>
    1f74:	1e f4       	brtc	.+6      	; 0x1f7c <__addsf3+0x1e>
    1f76:	2e c1       	rjmp	.+604    	; 0x21d4 <__fp_nan>
    1f78:	0e f4       	brtc	.+2      	; 0x1f7c <__addsf3+0x1e>
    1f7a:	e0 95       	com	r30
    1f7c:	e7 fb       	bst	r30, 7
    1f7e:	24 c1       	rjmp	.+584    	; 0x21c8 <__fp_inf>

00001f80 <__addsf3x>:
    1f80:	e9 2f       	mov	r30, r25
    1f82:	4a d1       	rcall	.+660    	; 0x2218 <__fp_split3>
    1f84:	80 f3       	brcs	.-32     	; 0x1f66 <__addsf3+0x8>
    1f86:	ba 17       	cp	r27, r26
    1f88:	62 07       	cpc	r22, r18
    1f8a:	73 07       	cpc	r23, r19
    1f8c:	84 07       	cpc	r24, r20
    1f8e:	95 07       	cpc	r25, r21
    1f90:	18 f0       	brcs	.+6      	; 0x1f98 <__addsf3x+0x18>
    1f92:	71 f4       	brne	.+28     	; 0x1fb0 <__addsf3x+0x30>
    1f94:	9e f5       	brtc	.+102    	; 0x1ffc <__addsf3x+0x7c>
    1f96:	62 c1       	rjmp	.+708    	; 0x225c <__fp_zero>
    1f98:	0e f4       	brtc	.+2      	; 0x1f9c <__addsf3x+0x1c>
    1f9a:	e0 95       	com	r30
    1f9c:	0b 2e       	mov	r0, r27
    1f9e:	ba 2f       	mov	r27, r26
    1fa0:	a0 2d       	mov	r26, r0
    1fa2:	0b 01       	movw	r0, r22
    1fa4:	b9 01       	movw	r22, r18
    1fa6:	90 01       	movw	r18, r0
    1fa8:	0c 01       	movw	r0, r24
    1faa:	ca 01       	movw	r24, r20
    1fac:	a0 01       	movw	r20, r0
    1fae:	11 24       	eor	r1, r1
    1fb0:	ff 27       	eor	r31, r31
    1fb2:	59 1b       	sub	r21, r25
    1fb4:	99 f0       	breq	.+38     	; 0x1fdc <__addsf3x+0x5c>
    1fb6:	59 3f       	cpi	r21, 0xF9	; 249
    1fb8:	50 f4       	brcc	.+20     	; 0x1fce <__addsf3x+0x4e>
    1fba:	50 3e       	cpi	r21, 0xE0	; 224
    1fbc:	68 f1       	brcs	.+90     	; 0x2018 <__addsf3x+0x98>
    1fbe:	1a 16       	cp	r1, r26
    1fc0:	f0 40       	sbci	r31, 0x00	; 0
    1fc2:	a2 2f       	mov	r26, r18
    1fc4:	23 2f       	mov	r18, r19
    1fc6:	34 2f       	mov	r19, r20
    1fc8:	44 27       	eor	r20, r20
    1fca:	58 5f       	subi	r21, 0xF8	; 248
    1fcc:	f3 cf       	rjmp	.-26     	; 0x1fb4 <__addsf3x+0x34>
    1fce:	46 95       	lsr	r20
    1fd0:	37 95       	ror	r19
    1fd2:	27 95       	ror	r18
    1fd4:	a7 95       	ror	r26
    1fd6:	f0 40       	sbci	r31, 0x00	; 0
    1fd8:	53 95       	inc	r21
    1fda:	c9 f7       	brne	.-14     	; 0x1fce <__addsf3x+0x4e>
    1fdc:	7e f4       	brtc	.+30     	; 0x1ffc <__addsf3x+0x7c>
    1fde:	1f 16       	cp	r1, r31
    1fe0:	ba 0b       	sbc	r27, r26
    1fe2:	62 0b       	sbc	r22, r18
    1fe4:	73 0b       	sbc	r23, r19
    1fe6:	84 0b       	sbc	r24, r20
    1fe8:	ba f0       	brmi	.+46     	; 0x2018 <__addsf3x+0x98>
    1fea:	91 50       	subi	r25, 0x01	; 1
    1fec:	a1 f0       	breq	.+40     	; 0x2016 <__addsf3x+0x96>
    1fee:	ff 0f       	add	r31, r31
    1ff0:	bb 1f       	adc	r27, r27
    1ff2:	66 1f       	adc	r22, r22
    1ff4:	77 1f       	adc	r23, r23
    1ff6:	88 1f       	adc	r24, r24
    1ff8:	c2 f7       	brpl	.-16     	; 0x1fea <__addsf3x+0x6a>
    1ffa:	0e c0       	rjmp	.+28     	; 0x2018 <__addsf3x+0x98>
    1ffc:	ba 0f       	add	r27, r26
    1ffe:	62 1f       	adc	r22, r18
    2000:	73 1f       	adc	r23, r19
    2002:	84 1f       	adc	r24, r20
    2004:	48 f4       	brcc	.+18     	; 0x2018 <__addsf3x+0x98>
    2006:	87 95       	ror	r24
    2008:	77 95       	ror	r23
    200a:	67 95       	ror	r22
    200c:	b7 95       	ror	r27
    200e:	f7 95       	ror	r31
    2010:	9e 3f       	cpi	r25, 0xFE	; 254
    2012:	08 f0       	brcs	.+2      	; 0x2016 <__addsf3x+0x96>
    2014:	b3 cf       	rjmp	.-154    	; 0x1f7c <__addsf3+0x1e>
    2016:	93 95       	inc	r25
    2018:	88 0f       	add	r24, r24
    201a:	08 f0       	brcs	.+2      	; 0x201e <__addsf3x+0x9e>
    201c:	99 27       	eor	r25, r25
    201e:	ee 0f       	add	r30, r30
    2020:	97 95       	ror	r25
    2022:	87 95       	ror	r24
    2024:	08 95       	ret

00002026 <__divsf3>:
    2026:	0c d0       	rcall	.+24     	; 0x2040 <__divsf3x>
    2028:	e6 c0       	rjmp	.+460    	; 0x21f6 <__fp_round>
    202a:	de d0       	rcall	.+444    	; 0x21e8 <__fp_pscB>
    202c:	40 f0       	brcs	.+16     	; 0x203e <__divsf3+0x18>
    202e:	d5 d0       	rcall	.+426    	; 0x21da <__fp_pscA>
    2030:	30 f0       	brcs	.+12     	; 0x203e <__divsf3+0x18>
    2032:	21 f4       	brne	.+8      	; 0x203c <__divsf3+0x16>
    2034:	5f 3f       	cpi	r21, 0xFF	; 255
    2036:	19 f0       	breq	.+6      	; 0x203e <__divsf3+0x18>
    2038:	c7 c0       	rjmp	.+398    	; 0x21c8 <__fp_inf>
    203a:	51 11       	cpse	r21, r1
    203c:	10 c1       	rjmp	.+544    	; 0x225e <__fp_szero>
    203e:	ca c0       	rjmp	.+404    	; 0x21d4 <__fp_nan>

00002040 <__divsf3x>:
    2040:	eb d0       	rcall	.+470    	; 0x2218 <__fp_split3>
    2042:	98 f3       	brcs	.-26     	; 0x202a <__divsf3+0x4>

00002044 <__divsf3_pse>:
    2044:	99 23       	and	r25, r25
    2046:	c9 f3       	breq	.-14     	; 0x203a <__divsf3+0x14>
    2048:	55 23       	and	r21, r21
    204a:	b1 f3       	breq	.-20     	; 0x2038 <__divsf3+0x12>
    204c:	95 1b       	sub	r25, r21
    204e:	55 0b       	sbc	r21, r21
    2050:	bb 27       	eor	r27, r27
    2052:	aa 27       	eor	r26, r26
    2054:	62 17       	cp	r22, r18
    2056:	73 07       	cpc	r23, r19
    2058:	84 07       	cpc	r24, r20
    205a:	38 f0       	brcs	.+14     	; 0x206a <__divsf3_pse+0x26>
    205c:	9f 5f       	subi	r25, 0xFF	; 255
    205e:	5f 4f       	sbci	r21, 0xFF	; 255
    2060:	22 0f       	add	r18, r18
    2062:	33 1f       	adc	r19, r19
    2064:	44 1f       	adc	r20, r20
    2066:	aa 1f       	adc	r26, r26
    2068:	a9 f3       	breq	.-22     	; 0x2054 <__divsf3_pse+0x10>
    206a:	33 d0       	rcall	.+102    	; 0x20d2 <__divsf3_pse+0x8e>
    206c:	0e 2e       	mov	r0, r30
    206e:	3a f0       	brmi	.+14     	; 0x207e <__divsf3_pse+0x3a>
    2070:	e0 e8       	ldi	r30, 0x80	; 128
    2072:	30 d0       	rcall	.+96     	; 0x20d4 <__divsf3_pse+0x90>
    2074:	91 50       	subi	r25, 0x01	; 1
    2076:	50 40       	sbci	r21, 0x00	; 0
    2078:	e6 95       	lsr	r30
    207a:	00 1c       	adc	r0, r0
    207c:	ca f7       	brpl	.-14     	; 0x2070 <__divsf3_pse+0x2c>
    207e:	29 d0       	rcall	.+82     	; 0x20d2 <__divsf3_pse+0x8e>
    2080:	fe 2f       	mov	r31, r30
    2082:	27 d0       	rcall	.+78     	; 0x20d2 <__divsf3_pse+0x8e>
    2084:	66 0f       	add	r22, r22
    2086:	77 1f       	adc	r23, r23
    2088:	88 1f       	adc	r24, r24
    208a:	bb 1f       	adc	r27, r27
    208c:	26 17       	cp	r18, r22
    208e:	37 07       	cpc	r19, r23
    2090:	48 07       	cpc	r20, r24
    2092:	ab 07       	cpc	r26, r27
    2094:	b0 e8       	ldi	r27, 0x80	; 128
    2096:	09 f0       	breq	.+2      	; 0x209a <__divsf3_pse+0x56>
    2098:	bb 0b       	sbc	r27, r27
    209a:	80 2d       	mov	r24, r0
    209c:	bf 01       	movw	r22, r30
    209e:	ff 27       	eor	r31, r31
    20a0:	93 58       	subi	r25, 0x83	; 131
    20a2:	5f 4f       	sbci	r21, 0xFF	; 255
    20a4:	2a f0       	brmi	.+10     	; 0x20b0 <__divsf3_pse+0x6c>
    20a6:	9e 3f       	cpi	r25, 0xFE	; 254
    20a8:	51 05       	cpc	r21, r1
    20aa:	68 f0       	brcs	.+26     	; 0x20c6 <__divsf3_pse+0x82>
    20ac:	8d c0       	rjmp	.+282    	; 0x21c8 <__fp_inf>
    20ae:	d7 c0       	rjmp	.+430    	; 0x225e <__fp_szero>
    20b0:	5f 3f       	cpi	r21, 0xFF	; 255
    20b2:	ec f3       	brlt	.-6      	; 0x20ae <__divsf3_pse+0x6a>
    20b4:	98 3e       	cpi	r25, 0xE8	; 232
    20b6:	dc f3       	brlt	.-10     	; 0x20ae <__divsf3_pse+0x6a>
    20b8:	86 95       	lsr	r24
    20ba:	77 95       	ror	r23
    20bc:	67 95       	ror	r22
    20be:	b7 95       	ror	r27
    20c0:	f7 95       	ror	r31
    20c2:	9f 5f       	subi	r25, 0xFF	; 255
    20c4:	c9 f7       	brne	.-14     	; 0x20b8 <__divsf3_pse+0x74>
    20c6:	88 0f       	add	r24, r24
    20c8:	91 1d       	adc	r25, r1
    20ca:	96 95       	lsr	r25
    20cc:	87 95       	ror	r24
    20ce:	97 f9       	bld	r25, 7
    20d0:	08 95       	ret
    20d2:	e1 e0       	ldi	r30, 0x01	; 1
    20d4:	66 0f       	add	r22, r22
    20d6:	77 1f       	adc	r23, r23
    20d8:	88 1f       	adc	r24, r24
    20da:	bb 1f       	adc	r27, r27
    20dc:	62 17       	cp	r22, r18
    20de:	73 07       	cpc	r23, r19
    20e0:	84 07       	cpc	r24, r20
    20e2:	ba 07       	cpc	r27, r26
    20e4:	20 f0       	brcs	.+8      	; 0x20ee <__divsf3_pse+0xaa>
    20e6:	62 1b       	sub	r22, r18
    20e8:	73 0b       	sbc	r23, r19
    20ea:	84 0b       	sbc	r24, r20
    20ec:	ba 0b       	sbc	r27, r26
    20ee:	ee 1f       	adc	r30, r30
    20f0:	88 f7       	brcc	.-30     	; 0x20d4 <__divsf3_pse+0x90>
    20f2:	e0 95       	com	r30
    20f4:	08 95       	ret

000020f6 <__fixunssfsi>:
    20f6:	98 d0       	rcall	.+304    	; 0x2228 <__fp_splitA>
    20f8:	88 f0       	brcs	.+34     	; 0x211c <__fixunssfsi+0x26>
    20fa:	9f 57       	subi	r25, 0x7F	; 127
    20fc:	90 f0       	brcs	.+36     	; 0x2122 <__fixunssfsi+0x2c>
    20fe:	b9 2f       	mov	r27, r25
    2100:	99 27       	eor	r25, r25
    2102:	b7 51       	subi	r27, 0x17	; 23
    2104:	a0 f0       	brcs	.+40     	; 0x212e <__fixunssfsi+0x38>
    2106:	d1 f0       	breq	.+52     	; 0x213c <__fixunssfsi+0x46>
    2108:	66 0f       	add	r22, r22
    210a:	77 1f       	adc	r23, r23
    210c:	88 1f       	adc	r24, r24
    210e:	99 1f       	adc	r25, r25
    2110:	1a f0       	brmi	.+6      	; 0x2118 <__fixunssfsi+0x22>
    2112:	ba 95       	dec	r27
    2114:	c9 f7       	brne	.-14     	; 0x2108 <__fixunssfsi+0x12>
    2116:	12 c0       	rjmp	.+36     	; 0x213c <__fixunssfsi+0x46>
    2118:	b1 30       	cpi	r27, 0x01	; 1
    211a:	81 f0       	breq	.+32     	; 0x213c <__fixunssfsi+0x46>
    211c:	9f d0       	rcall	.+318    	; 0x225c <__fp_zero>
    211e:	b1 e0       	ldi	r27, 0x01	; 1
    2120:	08 95       	ret
    2122:	9c c0       	rjmp	.+312    	; 0x225c <__fp_zero>
    2124:	67 2f       	mov	r22, r23
    2126:	78 2f       	mov	r23, r24
    2128:	88 27       	eor	r24, r24
    212a:	b8 5f       	subi	r27, 0xF8	; 248
    212c:	39 f0       	breq	.+14     	; 0x213c <__fixunssfsi+0x46>
    212e:	b9 3f       	cpi	r27, 0xF9	; 249
    2130:	cc f3       	brlt	.-14     	; 0x2124 <__fixunssfsi+0x2e>
    2132:	86 95       	lsr	r24
    2134:	77 95       	ror	r23
    2136:	67 95       	ror	r22
    2138:	b3 95       	inc	r27
    213a:	d9 f7       	brne	.-10     	; 0x2132 <__fixunssfsi+0x3c>
    213c:	3e f4       	brtc	.+14     	; 0x214c <__fixunssfsi+0x56>
    213e:	90 95       	com	r25
    2140:	80 95       	com	r24
    2142:	70 95       	com	r23
    2144:	61 95       	neg	r22
    2146:	7f 4f       	sbci	r23, 0xFF	; 255
    2148:	8f 4f       	sbci	r24, 0xFF	; 255
    214a:	9f 4f       	sbci	r25, 0xFF	; 255
    214c:	08 95       	ret

0000214e <__floatunsisf>:
    214e:	e8 94       	clt
    2150:	09 c0       	rjmp	.+18     	; 0x2164 <__floatsisf+0x12>

00002152 <__floatsisf>:
    2152:	97 fb       	bst	r25, 7
    2154:	3e f4       	brtc	.+14     	; 0x2164 <__floatsisf+0x12>
    2156:	90 95       	com	r25
    2158:	80 95       	com	r24
    215a:	70 95       	com	r23
    215c:	61 95       	neg	r22
    215e:	7f 4f       	sbci	r23, 0xFF	; 255
    2160:	8f 4f       	sbci	r24, 0xFF	; 255
    2162:	9f 4f       	sbci	r25, 0xFF	; 255
    2164:	99 23       	and	r25, r25
    2166:	a9 f0       	breq	.+42     	; 0x2192 <__floatsisf+0x40>
    2168:	f9 2f       	mov	r31, r25
    216a:	96 e9       	ldi	r25, 0x96	; 150
    216c:	bb 27       	eor	r27, r27
    216e:	93 95       	inc	r25
    2170:	f6 95       	lsr	r31
    2172:	87 95       	ror	r24
    2174:	77 95       	ror	r23
    2176:	67 95       	ror	r22
    2178:	b7 95       	ror	r27
    217a:	f1 11       	cpse	r31, r1
    217c:	f8 cf       	rjmp	.-16     	; 0x216e <__floatsisf+0x1c>
    217e:	fa f4       	brpl	.+62     	; 0x21be <__floatsisf+0x6c>
    2180:	bb 0f       	add	r27, r27
    2182:	11 f4       	brne	.+4      	; 0x2188 <__floatsisf+0x36>
    2184:	60 ff       	sbrs	r22, 0
    2186:	1b c0       	rjmp	.+54     	; 0x21be <__floatsisf+0x6c>
    2188:	6f 5f       	subi	r22, 0xFF	; 255
    218a:	7f 4f       	sbci	r23, 0xFF	; 255
    218c:	8f 4f       	sbci	r24, 0xFF	; 255
    218e:	9f 4f       	sbci	r25, 0xFF	; 255
    2190:	16 c0       	rjmp	.+44     	; 0x21be <__floatsisf+0x6c>
    2192:	88 23       	and	r24, r24
    2194:	11 f0       	breq	.+4      	; 0x219a <__floatsisf+0x48>
    2196:	96 e9       	ldi	r25, 0x96	; 150
    2198:	11 c0       	rjmp	.+34     	; 0x21bc <__floatsisf+0x6a>
    219a:	77 23       	and	r23, r23
    219c:	21 f0       	breq	.+8      	; 0x21a6 <__floatsisf+0x54>
    219e:	9e e8       	ldi	r25, 0x8E	; 142
    21a0:	87 2f       	mov	r24, r23
    21a2:	76 2f       	mov	r23, r22
    21a4:	05 c0       	rjmp	.+10     	; 0x21b0 <__floatsisf+0x5e>
    21a6:	66 23       	and	r22, r22
    21a8:	71 f0       	breq	.+28     	; 0x21c6 <__floatsisf+0x74>
    21aa:	96 e8       	ldi	r25, 0x86	; 134
    21ac:	86 2f       	mov	r24, r22
    21ae:	70 e0       	ldi	r23, 0x00	; 0
    21b0:	60 e0       	ldi	r22, 0x00	; 0
    21b2:	2a f0       	brmi	.+10     	; 0x21be <__floatsisf+0x6c>
    21b4:	9a 95       	dec	r25
    21b6:	66 0f       	add	r22, r22
    21b8:	77 1f       	adc	r23, r23
    21ba:	88 1f       	adc	r24, r24
    21bc:	da f7       	brpl	.-10     	; 0x21b4 <__floatsisf+0x62>
    21be:	88 0f       	add	r24, r24
    21c0:	96 95       	lsr	r25
    21c2:	87 95       	ror	r24
    21c4:	97 f9       	bld	r25, 7
    21c6:	08 95       	ret

000021c8 <__fp_inf>:
    21c8:	97 f9       	bld	r25, 7
    21ca:	9f 67       	ori	r25, 0x7F	; 127
    21cc:	80 e8       	ldi	r24, 0x80	; 128
    21ce:	70 e0       	ldi	r23, 0x00	; 0
    21d0:	60 e0       	ldi	r22, 0x00	; 0
    21d2:	08 95       	ret

000021d4 <__fp_nan>:
    21d4:	9f ef       	ldi	r25, 0xFF	; 255
    21d6:	80 ec       	ldi	r24, 0xC0	; 192
    21d8:	08 95       	ret

000021da <__fp_pscA>:
    21da:	00 24       	eor	r0, r0
    21dc:	0a 94       	dec	r0
    21de:	16 16       	cp	r1, r22
    21e0:	17 06       	cpc	r1, r23
    21e2:	18 06       	cpc	r1, r24
    21e4:	09 06       	cpc	r0, r25
    21e6:	08 95       	ret

000021e8 <__fp_pscB>:
    21e8:	00 24       	eor	r0, r0
    21ea:	0a 94       	dec	r0
    21ec:	12 16       	cp	r1, r18
    21ee:	13 06       	cpc	r1, r19
    21f0:	14 06       	cpc	r1, r20
    21f2:	05 06       	cpc	r0, r21
    21f4:	08 95       	ret

000021f6 <__fp_round>:
    21f6:	09 2e       	mov	r0, r25
    21f8:	03 94       	inc	r0
    21fa:	00 0c       	add	r0, r0
    21fc:	11 f4       	brne	.+4      	; 0x2202 <__stack+0x3>
    21fe:	88 23       	and	r24, r24
    2200:	52 f0       	brmi	.+20     	; 0x2216 <__stack+0x17>
    2202:	bb 0f       	add	r27, r27
    2204:	40 f4       	brcc	.+16     	; 0x2216 <__stack+0x17>
    2206:	bf 2b       	or	r27, r31
    2208:	11 f4       	brne	.+4      	; 0x220e <__stack+0xf>
    220a:	60 ff       	sbrs	r22, 0
    220c:	04 c0       	rjmp	.+8      	; 0x2216 <__stack+0x17>
    220e:	6f 5f       	subi	r22, 0xFF	; 255
    2210:	7f 4f       	sbci	r23, 0xFF	; 255
    2212:	8f 4f       	sbci	r24, 0xFF	; 255
    2214:	9f 4f       	sbci	r25, 0xFF	; 255
    2216:	08 95       	ret

00002218 <__fp_split3>:
    2218:	57 fd       	sbrc	r21, 7
    221a:	90 58       	subi	r25, 0x80	; 128
    221c:	44 0f       	add	r20, r20
    221e:	55 1f       	adc	r21, r21
    2220:	59 f0       	breq	.+22     	; 0x2238 <__fp_splitA+0x10>
    2222:	5f 3f       	cpi	r21, 0xFF	; 255
    2224:	71 f0       	breq	.+28     	; 0x2242 <__fp_splitA+0x1a>
    2226:	47 95       	ror	r20

00002228 <__fp_splitA>:
    2228:	88 0f       	add	r24, r24
    222a:	97 fb       	bst	r25, 7
    222c:	99 1f       	adc	r25, r25
    222e:	61 f0       	breq	.+24     	; 0x2248 <__fp_splitA+0x20>
    2230:	9f 3f       	cpi	r25, 0xFF	; 255
    2232:	79 f0       	breq	.+30     	; 0x2252 <__fp_splitA+0x2a>
    2234:	87 95       	ror	r24
    2236:	08 95       	ret
    2238:	12 16       	cp	r1, r18
    223a:	13 06       	cpc	r1, r19
    223c:	14 06       	cpc	r1, r20
    223e:	55 1f       	adc	r21, r21
    2240:	f2 cf       	rjmp	.-28     	; 0x2226 <__fp_split3+0xe>
    2242:	46 95       	lsr	r20
    2244:	f1 df       	rcall	.-30     	; 0x2228 <__fp_splitA>
    2246:	08 c0       	rjmp	.+16     	; 0x2258 <__fp_splitA+0x30>
    2248:	16 16       	cp	r1, r22
    224a:	17 06       	cpc	r1, r23
    224c:	18 06       	cpc	r1, r24
    224e:	99 1f       	adc	r25, r25
    2250:	f1 cf       	rjmp	.-30     	; 0x2234 <__fp_splitA+0xc>
    2252:	86 95       	lsr	r24
    2254:	71 05       	cpc	r23, r1
    2256:	61 05       	cpc	r22, r1
    2258:	08 94       	sec
    225a:	08 95       	ret

0000225c <__fp_zero>:
    225c:	e8 94       	clt

0000225e <__fp_szero>:
    225e:	bb 27       	eor	r27, r27
    2260:	66 27       	eor	r22, r22
    2262:	77 27       	eor	r23, r23
    2264:	cb 01       	movw	r24, r22
    2266:	97 f9       	bld	r25, 7
    2268:	08 95       	ret

0000226a <__divmodhi4>:
    226a:	97 fb       	bst	r25, 7
    226c:	07 2e       	mov	r0, r23
    226e:	16 f4       	brtc	.+4      	; 0x2274 <__divmodhi4+0xa>
    2270:	00 94       	com	r0
    2272:	06 d0       	rcall	.+12     	; 0x2280 <__divmodhi4_neg1>
    2274:	77 fd       	sbrc	r23, 7
    2276:	08 d0       	rcall	.+16     	; 0x2288 <__divmodhi4_neg2>
    2278:	0b d0       	rcall	.+22     	; 0x2290 <__udivmodhi4>
    227a:	07 fc       	sbrc	r0, 7
    227c:	05 d0       	rcall	.+10     	; 0x2288 <__divmodhi4_neg2>
    227e:	3e f4       	brtc	.+14     	; 0x228e <__divmodhi4_exit>

00002280 <__divmodhi4_neg1>:
    2280:	90 95       	com	r25
    2282:	81 95       	neg	r24
    2284:	9f 4f       	sbci	r25, 0xFF	; 255
    2286:	08 95       	ret

00002288 <__divmodhi4_neg2>:
    2288:	70 95       	com	r23
    228a:	61 95       	neg	r22
    228c:	7f 4f       	sbci	r23, 0xFF	; 255

0000228e <__divmodhi4_exit>:
    228e:	08 95       	ret

00002290 <__udivmodhi4>:
    2290:	aa 1b       	sub	r26, r26
    2292:	bb 1b       	sub	r27, r27
    2294:	51 e1       	ldi	r21, 0x11	; 17
    2296:	07 c0       	rjmp	.+14     	; 0x22a6 <__udivmodhi4_ep>

00002298 <__udivmodhi4_loop>:
    2298:	aa 1f       	adc	r26, r26
    229a:	bb 1f       	adc	r27, r27
    229c:	a6 17       	cp	r26, r22
    229e:	b7 07       	cpc	r27, r23
    22a0:	10 f0       	brcs	.+4      	; 0x22a6 <__udivmodhi4_ep>
    22a2:	a6 1b       	sub	r26, r22
    22a4:	b7 0b       	sbc	r27, r23

000022a6 <__udivmodhi4_ep>:
    22a6:	88 1f       	adc	r24, r24
    22a8:	99 1f       	adc	r25, r25
    22aa:	5a 95       	dec	r21
    22ac:	a9 f7       	brne	.-22     	; 0x2298 <__udivmodhi4_loop>
    22ae:	80 95       	com	r24
    22b0:	90 95       	com	r25
    22b2:	bc 01       	movw	r22, r24
    22b4:	cd 01       	movw	r24, r26
    22b6:	08 95       	ret

000022b8 <eeprom_read_byte>:
    22b8:	f9 99       	sbic	0x1f, 1	; 31
    22ba:	fe cf       	rjmp	.-4      	; 0x22b8 <eeprom_read_byte>
    22bc:	92 bd       	out	0x22, r25	; 34
    22be:	81 bd       	out	0x21, r24	; 33
    22c0:	f8 9a       	sbi	0x1f, 0	; 31
    22c2:	99 27       	eor	r25, r25
    22c4:	80 b5       	in	r24, 0x20	; 32
    22c6:	08 95       	ret

000022c8 <eeprom_update_word>:
    22c8:	01 96       	adiw	r24, 0x01	; 1
    22ca:	27 2f       	mov	r18, r23
    22cc:	02 d0       	rcall	.+4      	; 0x22d2 <eeprom_update_r18>
    22ce:	00 c0       	rjmp	.+0      	; 0x22d0 <eeprom_update_byte>

000022d0 <eeprom_update_byte>:
    22d0:	26 2f       	mov	r18, r22

000022d2 <eeprom_update_r18>:
    22d2:	f9 99       	sbic	0x1f, 1	; 31
    22d4:	fe cf       	rjmp	.-4      	; 0x22d2 <eeprom_update_r18>
    22d6:	92 bd       	out	0x22, r25	; 34
    22d8:	81 bd       	out	0x21, r24	; 33
    22da:	f8 9a       	sbi	0x1f, 0	; 31
    22dc:	01 97       	sbiw	r24, 0x01	; 1
    22de:	00 b4       	in	r0, 0x20	; 32
    22e0:	02 16       	cp	r0, r18
    22e2:	39 f0       	breq	.+14     	; 0x22f2 <eeprom_update_r18+0x20>
    22e4:	1f ba       	out	0x1f, r1	; 31
    22e6:	20 bd       	out	0x20, r18	; 32
    22e8:	0f b6       	in	r0, 0x3f	; 63
    22ea:	f8 94       	cli
    22ec:	fa 9a       	sbi	0x1f, 2	; 31
    22ee:	f9 9a       	sbi	0x1f, 1	; 31
    22f0:	0f be       	out	0x3f, r0	; 63
    22f2:	08 95       	ret

000022f4 <_exit>:
    22f4:	f8 94       	cli

000022f6 <__stop_program>:
    22f6:	ff cf       	rjmp	.-2      	; 0x22f6 <__stop_program>
